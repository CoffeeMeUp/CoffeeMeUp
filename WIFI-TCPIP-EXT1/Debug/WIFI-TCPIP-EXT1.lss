
WIFI-TCPIP-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009228  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409228  00409228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20400000  00409230  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000794  20400884  00409ab4  00020884  2**2
                  ALLOC
  4 .stack        00002000  20401018  0040a248  00020884  2**0
                  ALLOC
  5 .heap         00000200  20403018  0040c248  00020884  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208b2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001d4ae  00000000  00000000  0002090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000437b  00000000  00000000  0003ddb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e6bd  00000000  00000000  00042134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001178  00000000  00000000  000507f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001150  00000000  00000000  00051969  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025642  00000000  00000000  00052ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017068  00000000  00000000  000780fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091f55  00000000  00000000  0008f163  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a84  00000000  00000000  001210b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403018 	.word	0x20403018
  400004:	00403c09 	.word	0x00403c09
  400008:	00403c05 	.word	0x00403c05
  40000c:	00403c05 	.word	0x00403c05
  400010:	00403c05 	.word	0x00403c05
  400014:	00403c05 	.word	0x00403c05
  400018:	00403c05 	.word	0x00403c05
	...
  40002c:	00403c05 	.word	0x00403c05
  400030:	00403c05 	.word	0x00403c05
  400034:	00000000 	.word	0x00000000
  400038:	00403c05 	.word	0x00403c05
  40003c:	00403c05 	.word	0x00403c05
  400040:	00403c05 	.word	0x00403c05
  400044:	00403c05 	.word	0x00403c05
  400048:	00404315 	.word	0x00404315
  40004c:	00403c05 	.word	0x00403c05
  400050:	00403c05 	.word	0x00403c05
  400054:	00403c05 	.word	0x00403c05
  400058:	00403c05 	.word	0x00403c05
  40005c:	00403c05 	.word	0x00403c05
  400060:	00403c05 	.word	0x00403c05
  400064:	00000000 	.word	0x00000000
  400068:	004036f5 	.word	0x004036f5
  40006c:	00403709 	.word	0x00403709
  400070:	0040371d 	.word	0x0040371d
  400074:	00403c05 	.word	0x00403c05
  400078:	00403c05 	.word	0x00403c05
  40007c:	00403c05 	.word	0x00403c05
  400080:	00403731 	.word	0x00403731
  400084:	00403745 	.word	0x00403745
  400088:	00403c05 	.word	0x00403c05
  40008c:	00403c05 	.word	0x00403c05
  400090:	00403c05 	.word	0x00403c05
  400094:	00403c05 	.word	0x00403c05
  400098:	00403c05 	.word	0x00403c05
  40009c:	00403c05 	.word	0x00403c05
  4000a0:	00403c05 	.word	0x00403c05
  4000a4:	00403c05 	.word	0x00403c05
  4000a8:	00403c05 	.word	0x00403c05
  4000ac:	00403c05 	.word	0x00403c05
  4000b0:	00403c05 	.word	0x00403c05
  4000b4:	00403c05 	.word	0x00403c05
  4000b8:	00403c05 	.word	0x00403c05
  4000bc:	00403c05 	.word	0x00403c05
  4000c0:	00403c05 	.word	0x00403c05
  4000c4:	00403c05 	.word	0x00403c05
  4000c8:	00403c05 	.word	0x00403c05
  4000cc:	00403c05 	.word	0x00403c05
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403c05 	.word	0x00403c05
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403c05 	.word	0x00403c05
  4000e0:	00403c05 	.word	0x00403c05
  4000e4:	00403c05 	.word	0x00403c05
  4000e8:	00403c05 	.word	0x00403c05
  4000ec:	00403c05 	.word	0x00403c05
  4000f0:	00403c05 	.word	0x00403c05
  4000f4:	00403c05 	.word	0x00403c05
  4000f8:	00403c05 	.word	0x00403c05
  4000fc:	00403c05 	.word	0x00403c05
  400100:	00403c05 	.word	0x00403c05
  400104:	00403c05 	.word	0x00403c05
  400108:	00403c05 	.word	0x00403c05
  40010c:	00403c05 	.word	0x00403c05
  400110:	00403c05 	.word	0x00403c05
	...
  400120:	00403c05 	.word	0x00403c05
  400124:	00403c05 	.word	0x00403c05
  400128:	00403c05 	.word	0x00403c05
  40012c:	00403c05 	.word	0x00403c05
  400130:	00403c05 	.word	0x00403c05
  400134:	00000000 	.word	0x00000000
  400138:	00403c05 	.word	0x00403c05
  40013c:	00403c05 	.word	0x00403c05

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400884 	.word	0x20400884
  40015c:	00000000 	.word	0x00000000
  400160:	00409230 	.word	0x00409230

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400888 	.word	0x20400888
  400190:	00409230 	.word	0x00409230
  400194:	00409230 	.word	0x00409230
  400198:	00000000 	.word	0x00000000

0040019c <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  40019c:	b121      	cbz	r1, 4001a8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  40019e:	6843      	ldr	r3, [r0, #4]
  4001a0:	f043 0301 	orr.w	r3, r3, #1
  4001a4:	6043      	str	r3, [r0, #4]
  4001a6:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001a8:	6843      	ldr	r3, [r0, #4]
  4001aa:	f023 0301 	bic.w	r3, r3, #1
  4001ae:	6043      	str	r3, [r0, #4]
  4001b0:	4770      	bx	lr
  4001b2:	bf00      	nop

004001b4 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001b4:	6201      	str	r1, [r0, #32]
  4001b6:	4770      	bx	lr

004001b8 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001b8:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001ba:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001bc:	6884      	ldr	r4, [r0, #8]
  4001be:	42a5      	cmp	r5, r4
  4001c0:	d003      	beq.n	4001ca <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001c2:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  4001c4:	6885      	ldr	r5, [r0, #8]
  4001c6:	42a5      	cmp	r5, r4
  4001c8:	d1fb      	bne.n	4001c2 <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  4001ca:	b161      	cbz	r1, 4001e6 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001cc:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001d0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001d4:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001d8:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001dc:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001e0:	bf18      	it	ne
  4001e2:	300c      	addne	r0, #12
  4001e4:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001e6:	b142      	cbz	r2, 4001fa <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001e8:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001f0:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4001f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4001f8:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4001fa:	b143      	cbz	r3, 40020e <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001fc:	f3c4 1202 	ubfx	r2, r4, #4, #3
  400200:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400204:	f004 040f 	and.w	r4, r4, #15
  400208:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40020c:	601c      	str	r4, [r3, #0]
	}
}
  40020e:	bc30      	pop	{r4, r5}
  400210:	4770      	bx	lr
  400212:	bf00      	nop

00400214 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400214:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400216:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400218:	f014 0f01 	tst.w	r4, #1
  40021c:	d005      	beq.n	40022a <rtc_set_time+0x16>
  40021e:	290c      	cmp	r1, #12
  400220:	d903      	bls.n	40022a <rtc_set_time+0x16>
			ul_hour -= 12;
  400222:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400224:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  400228:	e000      	b.n	40022c <rtc_set_time+0x18>
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
	uint32_t ul_time = 0;
  40022a:	2600      	movs	r6, #0
  40022c:	4c1c      	ldr	r4, [pc, #112]	; (4002a0 <rtc_set_time+0x8c>)
  40022e:	fba4 5703 	umull	r5, r7, r4, r3
  400232:	08ff      	lsrs	r7, r7, #3
  400234:	eb07 0587 	add.w	r5, r7, r7, lsl #2
  400238:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  40023c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  400240:	fba4 7502 	umull	r7, r5, r4, r2
  400244:	08ed      	lsrs	r5, r5, #3
  400246:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  40024a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40024e:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  400252:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  400256:	4332      	orrs	r2, r6
  400258:	fba4 4301 	umull	r4, r3, r4, r1
  40025c:	08db      	lsrs	r3, r3, #3
  40025e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400266:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
  40026a:	ea42 4103 	orr.w	r1, r2, r3, lsl #16
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40026e:	6803      	ldr	r3, [r0, #0]
  400270:	f043 0301 	orr.w	r3, r3, #1
  400274:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400276:	6983      	ldr	r3, [r0, #24]
  400278:	f013 0f01 	tst.w	r3, #1
  40027c:	d0fb      	beq.n	400276 <rtc_set_time+0x62>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40027e:	2301      	movs	r3, #1
  400280:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400282:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400284:	6803      	ldr	r3, [r0, #0]
  400286:	f023 0301 	bic.w	r3, r3, #1
  40028a:	6003      	str	r3, [r0, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40028c:	69c3      	ldr	r3, [r0, #28]
  40028e:	f043 0304 	orr.w	r3, r3, #4
  400292:	61c3      	str	r3, [r0, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400294:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400296:	f000 0001 	and.w	r0, r0, #1
  40029a:	bcf0      	pop	{r4, r5, r6, r7}
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	cccccccd 	.word	0xcccccccd

004002a4 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002a4:	b4f0      	push	{r4, r5, r6, r7}
  4002a6:	9c04      	ldr	r4, [sp, #16]
  4002a8:	9d06      	ldr	r5, [sp, #24]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002aa:	b1b9      	cbz	r1, 4002dc <rtc_set_time_alarm+0x38>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002ac:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002ae:	f011 0f01 	tst.w	r1, #1
  4002b2:	d005      	beq.n	4002c0 <rtc_set_time_alarm+0x1c>
  4002b4:	2a0c      	cmp	r2, #12
  4002b6:	d903      	bls.n	4002c0 <rtc_set_time_alarm+0x1c>
				ul_hour -= 12;
  4002b8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ba:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4002be:	e000      	b.n	4002c2 <rtc_set_time_alarm+0x1e>
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
	uint32_t ul_alarm = 0;
  4002c0:	2700      	movs	r7, #0
				ul_hour -= 12;
				ul_alarm |= RTC_TIMR_AMPM;
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002c2:	491b      	ldr	r1, [pc, #108]	; (400330 <rtc_set_time_alarm+0x8c>)
  4002c4:	fba1 6102 	umull	r6, r1, r1, r2
  4002c8:	08c9      	lsrs	r1, r1, #3
  4002ca:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  4002ce:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
  4002d2:	0412      	lsls	r2, r2, #16
  4002d4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002d8:	433a      	orrs	r2, r7
  4002da:	e000      	b.n	4002de <rtc_set_time_alarm+0x3a>
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
	uint32_t ul_alarm = 0;
  4002dc:	2200      	movs	r2, #0
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002de:	b15b      	cbz	r3, 4002f8 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002e0:	4b13      	ldr	r3, [pc, #76]	; (400330 <rtc_set_time_alarm+0x8c>)
  4002e2:	fba3 1304 	umull	r1, r3, r3, r4
  4002e6:	08db      	lsrs	r3, r3, #3
  4002e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4002ec:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
  4002f0:	0224      	lsls	r4, r4, #8
  4002f2:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  4002f6:	4322      	orrs	r2, r4
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  4002f8:	9b05      	ldr	r3, [sp, #20]
  4002fa:	b153      	cbz	r3, 400312 <rtc_set_time_alarm+0x6e>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4002fc:	4b0c      	ldr	r3, [pc, #48]	; (400330 <rtc_set_time_alarm+0x8c>)
  4002fe:	fba3 1305 	umull	r1, r3, r3, r5
  400302:	08db      	lsrs	r3, r3, #3
  400304:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400308:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
  40030c:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
  400310:	431a      	orrs	r2, r3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400312:	6901      	ldr	r1, [r0, #16]
  400314:	4b07      	ldr	r3, [pc, #28]	; (400334 <rtc_set_time_alarm+0x90>)
  400316:	400b      	ands	r3, r1
  400318:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  40031a:	6102      	str	r2, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b06      	ldr	r3, [pc, #24]	; (400338 <rtc_set_time_alarm+0x94>)
  400320:	4313      	orrs	r3, r2
  400322:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  400324:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400326:	f000 0004 	and.w	r0, r0, #4
  40032a:	bcf0      	pop	{r4, r5, r6, r7}
  40032c:	4770      	bx	lr
  40032e:	bf00      	nop
  400330:	cccccccd 	.word	0xcccccccd
  400334:	ff7f7f7f 	.word	0xff7f7f7f
  400338:	00808080 	.word	0x00808080

0040033c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40033c:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40033e:	4e2a      	ldr	r6, [pc, #168]	; (4003e8 <rtc_set_date+0xac>)
  400340:	fba6 4e03 	umull	r4, lr, r6, r3
  400344:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  400348:	9c05      	ldr	r4, [sp, #20]
  40034a:	0564      	lsls	r4, r4, #21
  40034c:	ea44 770e 	orr.w	r7, r4, lr, lsl #28
  400350:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  400354:	eba3 054e 	sub.w	r5, r3, lr, lsl #1
  400358:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
  40035c:	fba6 4302 	umull	r4, r3, r6, r2
  400360:	08db      	lsrs	r3, r3, #3
  400362:	ea45 5503 	orr.w	r5, r5, r3, lsl #20
  400366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40036a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  40036e:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
  400372:	4b1e      	ldr	r3, [pc, #120]	; (4003ec <rtc_set_date+0xb0>)
  400374:	fba3 2301 	umull	r2, r3, r3, r1
  400378:	099b      	lsrs	r3, r3, #6
  40037a:	ea44 1203 	orr.w	r2, r4, r3, lsl #4
  40037e:	4c1c      	ldr	r4, [pc, #112]	; (4003f0 <rtc_set_date+0xb4>)
  400380:	fba4 3401 	umull	r3, r4, r4, r1
  400384:	0963      	lsrs	r3, r4, #5
  400386:	fba6 5403 	umull	r5, r4, r6, r3
  40038a:	08e4      	lsrs	r4, r4, #3
  40038c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400390:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  400394:	4313      	orrs	r3, r2
  400396:	fba6 2401 	umull	r2, r4, r6, r1
  40039a:	08e4      	lsrs	r4, r4, #3
  40039c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4003a0:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
  4003a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4003a8:	fba6 2604 	umull	r2, r6, r6, r4
  4003ac:	08f6      	lsrs	r6, r6, #3
  4003ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003b2:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
  4003b6:	ea43 3206 	orr.w	r2, r3, r6, lsl #12
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4003ba:	6803      	ldr	r3, [r0, #0]
  4003bc:	f043 0302 	orr.w	r3, r3, #2
  4003c0:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4003c2:	6983      	ldr	r3, [r0, #24]
  4003c4:	f013 0f01 	tst.w	r3, #1
  4003c8:	d0fb      	beq.n	4003c2 <rtc_set_date+0x86>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4003ca:	2301      	movs	r3, #1
  4003cc:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4003ce:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4003d0:	6803      	ldr	r3, [r0, #0]
  4003d2:	f023 0302 	bic.w	r3, r3, #2
  4003d6:	6003      	str	r3, [r0, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  4003d8:	69c3      	ldr	r3, [r0, #28]
  4003da:	f043 0304 	orr.w	r3, r3, #4
  4003de:	61c3      	str	r3, [r0, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4003e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003e2:	f000 0002 	and.w	r0, r0, #2
  4003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4003e8:	cccccccd 	.word	0xcccccccd
  4003ec:	10624dd3 	.word	0x10624dd3
  4003f0:	51eb851f 	.word	0x51eb851f

004003f4 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4003f4:	b430      	push	{r4, r5}
  4003f6:	9c02      	ldr	r4, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  4003f8:	b159      	cbz	r1, 400412 <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003fa:	4914      	ldr	r1, [pc, #80]	; (40044c <rtc_set_date_alarm+0x58>)
  4003fc:	fba1 5102 	umull	r5, r1, r1, r2
  400400:	08c9      	lsrs	r1, r1, #3
  400402:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400406:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  40040a:	0412      	lsls	r2, r2, #16
  40040c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  400410:	e000      	b.n	400414 <rtc_set_date_alarm+0x20>
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
	uint32_t ul_alarm = 0;
  400412:	2200      	movs	r2, #0
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  400414:	b15b      	cbz	r3, 40042e <rtc_set_date_alarm+0x3a>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400416:	4b0d      	ldr	r3, [pc, #52]	; (40044c <rtc_set_date_alarm+0x58>)
  400418:	fba3 1304 	umull	r1, r3, r3, r4
  40041c:	08db      	lsrs	r3, r3, #3
  40041e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400422:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
  400426:	0624      	lsls	r4, r4, #24
  400428:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
  40042c:	4322      	orrs	r2, r4
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  40042e:	6941      	ldr	r1, [r0, #20]
  400430:	4b07      	ldr	r3, [pc, #28]	; (400450 <rtc_set_date_alarm+0x5c>)
  400432:	400b      	ands	r3, r1
  400434:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  400436:	6142      	str	r2, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400438:	6942      	ldr	r2, [r0, #20]
  40043a:	4b06      	ldr	r3, [pc, #24]	; (400454 <rtc_set_date_alarm+0x60>)
  40043c:	4313      	orrs	r3, r2
  40043e:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  400440:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400442:	f000 0008 	and.w	r0, r0, #8
  400446:	bc30      	pop	{r4, r5}
  400448:	4770      	bx	lr
  40044a:	bf00      	nop
  40044c:	cccccccd 	.word	0xcccccccd
  400450:	7f7fffff 	.word	0x7f7fffff
  400454:	80800000 	.word	0x80800000

00400458 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400458:	6980      	ldr	r0, [r0, #24]
}
  40045a:	4770      	bx	lr

0040045c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40045c:	61c1      	str	r1, [r0, #28]
  40045e:	4770      	bx	lr

00400460 <com_interpretando_buffer>:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

com_t *com_interpretando_buffer(char *pdata){
  400460:	b538      	push	{r3, r4, r5, lr}
  400462:	4605      	mov	r5, r0
	com_t *ret;
	char  *hour_data;
	ret = (com_t *) malloc(sizeof(com_t));
  400464:	2008      	movs	r0, #8
  400466:	4b1d      	ldr	r3, [pc, #116]	; (4004dc <com_interpretando_buffer+0x7c>)
  400468:	4798      	blx	r3
  40046a:	4604      	mov	r4, r0
	if (!strcmp(pdata,PACOTE_LED_ON)){
  40046c:	491c      	ldr	r1, [pc, #112]	; (4004e0 <com_interpretando_buffer+0x80>)
  40046e:	4628      	mov	r0, r5
  400470:	4b1c      	ldr	r3, [pc, #112]	; (4004e4 <com_interpretando_buffer+0x84>)
  400472:	4798      	blx	r3
  400474:	b940      	cbnz	r0, 400488 <com_interpretando_buffer+0x28>
		printf("%s \n", PACOTE_LED_ON);
  400476:	491a      	ldr	r1, [pc, #104]	; (4004e0 <com_interpretando_buffer+0x80>)
  400478:	481b      	ldr	r0, [pc, #108]	; (4004e8 <com_interpretando_buffer+0x88>)
  40047a:	4b1c      	ldr	r3, [pc, #112]	; (4004ec <com_interpretando_buffer+0x8c>)
  40047c:	4798      	blx	r3
		ret->pkg_type  = command_LED_ON;
  40047e:	2301      	movs	r3, #1
  400480:	7023      	strb	r3, [r4, #0]
		ret->pkg_value = NULL;
  400482:	2300      	movs	r3, #0
  400484:	6063      	str	r3, [r4, #4]
		return ret;
  400486:	e027      	b.n	4004d8 <com_interpretando_buffer+0x78>
	} else 	if (!strcmp(pdata, PACOTE_LED_OFF)){
  400488:	4919      	ldr	r1, [pc, #100]	; (4004f0 <com_interpretando_buffer+0x90>)
  40048a:	4628      	mov	r0, r5
  40048c:	4b15      	ldr	r3, [pc, #84]	; (4004e4 <com_interpretando_buffer+0x84>)
  40048e:	4798      	blx	r3
  400490:	b940      	cbnz	r0, 4004a4 <com_interpretando_buffer+0x44>
		printf("%s \n", PACOTE_LED_OFF);
  400492:	4917      	ldr	r1, [pc, #92]	; (4004f0 <com_interpretando_buffer+0x90>)
  400494:	4814      	ldr	r0, [pc, #80]	; (4004e8 <com_interpretando_buffer+0x88>)
  400496:	4b15      	ldr	r3, [pc, #84]	; (4004ec <com_interpretando_buffer+0x8c>)
  400498:	4798      	blx	r3
		ret->pkg_type  = command_LED_OFF;
  40049a:	2302      	movs	r3, #2
  40049c:	7023      	strb	r3, [r4, #0]
		ret->pkg_value = NULL;
  40049e:	2300      	movs	r3, #0
  4004a0:	6063      	str	r3, [r4, #4]
		return ret;
  4004a2:	e019      	b.n	4004d8 <com_interpretando_buffer+0x78>
	} else if (!strcmp(pdata,PACOTE_TESTE_RX)){
  4004a4:	4913      	ldr	r1, [pc, #76]	; (4004f4 <com_interpretando_buffer+0x94>)
  4004a6:	4628      	mov	r0, r5
  4004a8:	4b0e      	ldr	r3, [pc, #56]	; (4004e4 <com_interpretando_buffer+0x84>)
  4004aa:	4798      	blx	r3
  4004ac:	b920      	cbnz	r0, 4004b8 <com_interpretando_buffer+0x58>
		ret->pkg_type  = PACOTE_TESTE_COM;
  4004ae:	2301      	movs	r3, #1
  4004b0:	7023      	strb	r3, [r4, #0]
		ret->pkg_value = PACOTE_TESTE_tx_OK;
  4004b2:	4b11      	ldr	r3, [pc, #68]	; (4004f8 <com_interpretando_buffer+0x98>)
  4004b4:	6063      	str	r3, [r4, #4]
		return ret;
  4004b6:	e00f      	b.n	4004d8 <com_interpretando_buffer+0x78>
	} else if ((hour_data = strstr(pdata, PACOTE_HEADER_RX)) != NULL) {
  4004b8:	4910      	ldr	r1, [pc, #64]	; (4004fc <com_interpretando_buffer+0x9c>)
  4004ba:	4628      	mov	r0, r5
  4004bc:	4b10      	ldr	r3, [pc, #64]	; (400500 <com_interpretando_buffer+0xa0>)
  4004be:	4798      	blx	r3
  4004c0:	b130      	cbz	r0, 4004d0 <com_interpretando_buffer+0x70>
		hour_t *h = parse_hour(hour_data + 5);
  4004c2:	3005      	adds	r0, #5
  4004c4:	4b0f      	ldr	r3, [pc, #60]	; (400504 <com_interpretando_buffer+0xa4>)
  4004c6:	4798      	blx	r3
		ret->pkg_value = h;
  4004c8:	6060      	str	r0, [r4, #4]
		ret->pkg_type  = PACOTE_ALARM_SET;
  4004ca:	2310      	movs	r3, #16
  4004cc:	7023      	strb	r3, [r4, #0]
		return ret;
  4004ce:	e003      	b.n	4004d8 <com_interpretando_buffer+0x78>
	}
	ret->pkg_type  = PACOTE_ERRO;
  4004d0:	23ff      	movs	r3, #255	; 0xff
  4004d2:	7023      	strb	r3, [r4, #0]
	ret->pkg_value = NULL;
  4004d4:	2300      	movs	r3, #0
  4004d6:	6063      	str	r3, [r4, #4]
	return ret;
  4004d8:	4620      	mov	r0, r4
  4004da:	bd38      	pop	{r3, r4, r5, pc}
  4004dc:	004045b5 	.word	0x004045b5
  4004e0:	00407f38 	.word	0x00407f38
  4004e4:	00404e09 	.word	0x00404e09
  4004e8:	00407f40 	.word	0x00407f40
  4004ec:	0040458d 	.word	0x0040458d
  4004f0:	00407f48 	.word	0x00407f48
  4004f4:	00407f50 	.word	0x00407f50
  4004f8:	00407f5c 	.word	0x00407f5c
  4004fc:	00407f64 	.word	0x00407f64
  400500:	00405495 	.word	0x00405495
  400504:	00400509 	.word	0x00400509

00400508 <parse_hour>:
#define MINUTE_DIGIT_ID   4

#define CHAR_TO_INT(val) (val - '0')

hour_t *parse_hour(char *hour_str)
{
  400508:	b510      	push	{r4, lr}
  40050a:	4604      	mov	r4, r0
	hour_t *h = (hour_t *) malloc(sizeof(hour_t));
  40050c:	2002      	movs	r0, #2
  40050e:	4b0a      	ldr	r3, [pc, #40]	; (400538 <parse_hour+0x30>)
  400510:	4798      	blx	r3
	h->hour = CHAR_TO_INT(hour_str[HOUR_DECIMAL_ID]) * 10 +
  400512:	7823      	ldrb	r3, [r4, #0]
  400514:	3b30      	subs	r3, #48	; 0x30
  400516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40051a:	7862      	ldrb	r2, [r4, #1]
  40051c:	3a30      	subs	r2, #48	; 0x30
  40051e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  400522:	7003      	strb	r3, [r0, #0]
			  CHAR_TO_INT(hour_str[HOUR_DIGIT_ID]);
	h->minute = CHAR_TO_INT(hour_str[MINUTE_DECIMAL_ID]) * 10 +
  400524:	78e3      	ldrb	r3, [r4, #3]
  400526:	3b30      	subs	r3, #48	; 0x30
  400528:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40052c:	7922      	ldrb	r2, [r4, #4]
  40052e:	3a30      	subs	r2, #48	; 0x30
  400530:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  400534:	7043      	strb	r3, [r0, #1]
	            CHAR_TO_INT(hour_str[MINUTE_DIGIT_ID]);
	return h;
  400536:	bd10      	pop	{r4, pc}
  400538:	004045b5 	.word	0x004045b5

0040053c <rtc_init>:
#define HOUR   9
#define MINUTE 5
#define SECOND 0

void rtc_init(void)
{
  40053c:	b530      	push	{r4, r5, lr}
  40053e:	b083      	sub	sp, #12
	// PMC
	pmc_enable_periph_clk(ID_RTC);
  400540:	2002      	movs	r0, #2
  400542:	4b13      	ldr	r3, [pc, #76]	; (400590 <rtc_init+0x54>)
  400544:	4798      	blx	r3

	// Default RTC config for 24hrs mode
	rtc_set_hour_mode(RTC, 0);
  400546:	4c13      	ldr	r4, [pc, #76]	; (400594 <rtc_init+0x58>)
  400548:	2100      	movs	r1, #0
  40054a:	4620      	mov	r0, r4
  40054c:	4b12      	ldr	r3, [pc, #72]	; (400598 <rtc_init+0x5c>)
  40054e:	4798      	blx	r3

	// Configure date and hour manually
	// TODO: Use actual time, not random consts
	//       (gather data from the internet
	//		 once online)
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  400550:	230d      	movs	r3, #13
  400552:	9300      	str	r3, [sp, #0]
  400554:	231b      	movs	r3, #27
  400556:	2203      	movs	r2, #3
  400558:	f240 71e1 	movw	r1, #2017	; 0x7e1
  40055c:	4620      	mov	r0, r4
  40055e:	4d0f      	ldr	r5, [pc, #60]	; (40059c <rtc_init+0x60>)
  400560:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  400562:	2300      	movs	r3, #0
  400564:	2205      	movs	r2, #5
  400566:	2109      	movs	r1, #9
  400568:	4620      	mov	r0, r4
  40056a:	4d0d      	ldr	r5, [pc, #52]	; (4005a0 <rtc_init+0x64>)
  40056c:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40056e:	4b0d      	ldr	r3, [pc, #52]	; (4005a4 <rtc_init+0x68>)
  400570:	2204      	movs	r2, #4
  400572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400576:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40057a:	2120      	movs	r1, #32
  40057c:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400580:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 1);
	NVIC_EnableIRQ(RTC_IRQn);

	// Enable alarm interrupts
	rtc_enable_interrupt(RTC, RTC_IER_ALREN);
  400582:	2102      	movs	r1, #2
  400584:	4620      	mov	r0, r4
  400586:	4b08      	ldr	r3, [pc, #32]	; (4005a8 <rtc_init+0x6c>)
  400588:	4798      	blx	r3
}
  40058a:	b003      	add	sp, #12
  40058c:	bd30      	pop	{r4, r5, pc}
  40058e:	bf00      	nop
  400590:	00403905 	.word	0x00403905
  400594:	400e1860 	.word	0x400e1860
  400598:	0040019d 	.word	0x0040019d
  40059c:	0040033d 	.word	0x0040033d
  4005a0:	00400215 	.word	0x00400215
  4005a4:	e000e100 	.word	0xe000e100
  4005a8:	004001b5 	.word	0x004001b5

004005ac <rtc_set_alarm>:

void rtc_set_alarm(hour_t *h)
{
  4005ac:	b570      	push	{r4, r5, r6, lr}
  4005ae:	b086      	sub	sp, #24
  4005b0:	4604      	mov	r4, r0
	uint32_t date_err = rtc_set_date_alarm(RTC,
  4005b2:	4d16      	ldr	r5, [pc, #88]	; (40060c <rtc_set_alarm+0x60>)
  4005b4:	231b      	movs	r3, #27
  4005b6:	9300      	str	r3, [sp, #0]
  4005b8:	2301      	movs	r3, #1
  4005ba:	2203      	movs	r2, #3
  4005bc:	4619      	mov	r1, r3
  4005be:	4628      	mov	r0, r5
  4005c0:	4e13      	ldr	r6, [pc, #76]	; (400610 <rtc_set_alarm+0x64>)
  4005c2:	47b0      	blx	r6
  4005c4:	4606      	mov	r6, r0
			1, MONTH, 1, DAY);
	uint32_t time_err = rtc_set_time_alarm(RTC,
  4005c6:	7822      	ldrb	r2, [r4, #0]
  4005c8:	2300      	movs	r3, #0
  4005ca:	9302      	str	r3, [sp, #8]
  4005cc:	2101      	movs	r1, #1
  4005ce:	9101      	str	r1, [sp, #4]
  4005d0:	7863      	ldrb	r3, [r4, #1]
  4005d2:	9300      	str	r3, [sp, #0]
  4005d4:	460b      	mov	r3, r1
  4005d6:	4628      	mov	r0, r5
  4005d8:	4d0e      	ldr	r5, [pc, #56]	; (400614 <rtc_set_alarm+0x68>)
  4005da:	47a8      	blx	r5
			1, h->hour, 1, h->minute, 1, 0);
	if (!time_err && !date_err) {
  4005dc:	b980      	cbnz	r0, 400600 <rtc_set_alarm+0x54>
  4005de:	b97e      	cbnz	r6, 400600 <rtc_set_alarm+0x54>
		printf("Alarm set to: %.2hhd:%.2hhd\n",
  4005e0:	7862      	ldrb	r2, [r4, #1]
  4005e2:	7821      	ldrb	r1, [r4, #0]
  4005e4:	480c      	ldr	r0, [pc, #48]	; (400618 <rtc_set_alarm+0x6c>)
  4005e6:	4c0d      	ldr	r4, [pc, #52]	; (40061c <rtc_set_alarm+0x70>)
  4005e8:	47a0      	blx	r4
				h->hour, h->minute);
		uint32_t pul_hour, pul_minute;
		rtc_get_time(RTC, &pul_hour, &pul_minute,
  4005ea:	2300      	movs	r3, #0
  4005ec:	aa05      	add	r2, sp, #20
  4005ee:	a904      	add	r1, sp, #16
  4005f0:	4806      	ldr	r0, [pc, #24]	; (40060c <rtc_set_alarm+0x60>)
  4005f2:	4d0b      	ldr	r5, [pc, #44]	; (400620 <rtc_set_alarm+0x74>)
  4005f4:	47a8      	blx	r5
				NULL);
		printf("Current time: %.2hhd:%.2hhd\n",
  4005f6:	9a05      	ldr	r2, [sp, #20]
  4005f8:	9904      	ldr	r1, [sp, #16]
  4005fa:	480a      	ldr	r0, [pc, #40]	; (400624 <rtc_set_alarm+0x78>)
  4005fc:	47a0      	blx	r4
  4005fe:	e002      	b.n	400606 <rtc_set_alarm+0x5a>
				pul_hour, pul_minute);

	} else
		puts("RTC alarm set error");
  400600:	4809      	ldr	r0, [pc, #36]	; (400628 <rtc_set_alarm+0x7c>)
  400602:	4b0a      	ldr	r3, [pc, #40]	; (40062c <rtc_set_alarm+0x80>)
  400604:	4798      	blx	r3
  400606:	b006      	add	sp, #24
  400608:	bd70      	pop	{r4, r5, r6, pc}
  40060a:	bf00      	nop
  40060c:	400e1860 	.word	0x400e1860
  400610:	004003f5 	.word	0x004003f5
  400614:	004002a5 	.word	0x004002a5
  400618:	00407f6c 	.word	0x00407f6c
  40061c:	0040458d 	.word	0x0040458d
  400620:	004001b9 	.word	0x004001b9
  400624:	00407f8c 	.word	0x00407f8c
  400628:	00407fac 	.word	0x00407fac
  40062c:	00404c51 	.word	0x00404c51

00400630 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  400630:	2810      	cmp	r0, #16
  400632:	d108      	bne.n	400646 <chip_isr+0x16>
  400634:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400638:	d105      	bne.n	400646 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  40063a:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  40063c:	4b02      	ldr	r3, [pc, #8]	; (400648 <chip_isr+0x18>)
  40063e:	681b      	ldr	r3, [r3, #0]
  400640:	b103      	cbz	r3, 400644 <chip_isr+0x14>
			gpfIsr();
  400642:	4798      	blx	r3
  400644:	bd08      	pop	{r3, pc}
  400646:	4770      	bx	lr
  400648:	204008a0 	.word	0x204008a0

0040064c <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  40064c:	b140      	cbz	r0, 400660 <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  40064e:	b570      	push	{r4, r5, r6, lr}
  400650:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  400652:	4e04      	ldr	r6, [pc, #16]	; (400664 <nm_bsp_sleep+0x18>)
  400654:	4d04      	ldr	r5, [pc, #16]	; (400668 <nm_bsp_sleep+0x1c>)
  400656:	4630      	mov	r0, r6
  400658:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  40065a:	3c01      	subs	r4, #1
  40065c:	d1fb      	bne.n	400656 <nm_bsp_sleep+0xa>
  40065e:	bd70      	pop	{r4, r5, r6, pc}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	00031635 	.word	0x00031635
  400668:	20400001 	.word	0x20400001

0040066c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  40066c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400670:	4f09      	ldr	r7, [pc, #36]	; (400698 <nm_bsp_reset+0x2c>)
  400672:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  400676:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  40067a:	4d08      	ldr	r5, [pc, #32]	; (40069c <nm_bsp_reset+0x30>)
  40067c:	2608      	movs	r6, #8
  40067e:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  400680:	2064      	movs	r0, #100	; 0x64
  400682:	4c07      	ldr	r4, [pc, #28]	; (4006a0 <nm_bsp_reset+0x34>)
  400684:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400686:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  40068a:	2064      	movs	r0, #100	; 0x64
  40068c:	47a0      	blx	r4
  40068e:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  400690:	2064      	movs	r0, #100	; 0x64
  400692:	47a0      	blx	r4
  400694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400698:	400e1200 	.word	0x400e1200
  40069c:	400e1000 	.word	0x400e1000
  4006a0:	0040064d 	.word	0x0040064d

004006a4 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  4006a4:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4006a6:	2200      	movs	r2, #0
  4006a8:	4b14      	ldr	r3, [pc, #80]	; (4006fc <nm_bsp_init+0x58>)
  4006aa:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4006ac:	200a      	movs	r0, #10
  4006ae:	4c14      	ldr	r4, [pc, #80]	; (400700 <nm_bsp_init+0x5c>)
  4006b0:	47a0      	blx	r4
  4006b2:	200b      	movs	r0, #11
  4006b4:	47a0      	blx	r4
  4006b6:	200c      	movs	r0, #12
  4006b8:	47a0      	blx	r4
  4006ba:	2010      	movs	r0, #16
  4006bc:	47a0      	blx	r4
  4006be:	2011      	movs	r0, #17
  4006c0:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006c2:	4b10      	ldr	r3, [pc, #64]	; (400704 <nm_bsp_init+0x60>)
  4006c4:	2208      	movs	r2, #8
  4006c6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006cc:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006ce:	4a0e      	ldr	r2, [pc, #56]	; (400708 <nm_bsp_init+0x64>)
  4006d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4006d4:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006da:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006dc:	2204      	movs	r2, #4
  4006de:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006e4:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4006e6:	4b09      	ldr	r3, [pc, #36]	; (40070c <nm_bsp_init+0x68>)
  4006e8:	681b      	ldr	r3, [r3, #0]
  4006ea:	f013 0f01 	tst.w	r3, #1
  4006ee:	d001      	beq.n	4006f4 <nm_bsp_init+0x50>
  4006f0:	4b06      	ldr	r3, [pc, #24]	; (40070c <nm_bsp_init+0x68>)
  4006f2:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  4006f4:	4b06      	ldr	r3, [pc, #24]	; (400710 <nm_bsp_init+0x6c>)
  4006f6:	4798      	blx	r3

	return 0;
}
  4006f8:	2000      	movs	r0, #0
  4006fa:	bd10      	pop	{r4, pc}
  4006fc:	204008a0 	.word	0x204008a0
  400700:	00403905 	.word	0x00403905
  400704:	400e1000 	.word	0x400e1000
  400708:	400e1200 	.word	0x400e1200
  40070c:	e000e010 	.word	0xe000e010
  400710:	0040066d 	.word	0x0040066d

00400714 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400714:	b530      	push	{r4, r5, lr}
  400716:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400718:	4b14      	ldr	r3, [pc, #80]	; (40076c <nm_bsp_register_isr+0x58>)
  40071a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40071c:	2010      	movs	r0, #16
  40071e:	4b14      	ldr	r3, [pc, #80]	; (400770 <nm_bsp_register_isr+0x5c>)
  400720:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  400722:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400726:	207c      	movs	r0, #124	; 0x7c
  400728:	4b12      	ldr	r3, [pc, #72]	; (400774 <nm_bsp_register_isr+0x60>)
  40072a:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40072c:	4c12      	ldr	r4, [pc, #72]	; (400778 <nm_bsp_register_isr+0x64>)
  40072e:	2201      	movs	r2, #1
  400730:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400734:	4620      	mov	r0, r4
  400736:	4b11      	ldr	r3, [pc, #68]	; (40077c <nm_bsp_register_isr+0x68>)
  400738:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40073a:	4b11      	ldr	r3, [pc, #68]	; (400780 <nm_bsp_register_isr+0x6c>)
  40073c:	9300      	str	r3, [sp, #0]
  40073e:	2351      	movs	r3, #81	; 0x51
  400740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400744:	2110      	movs	r1, #16
  400746:	4620      	mov	r0, r4
  400748:	4d0e      	ldr	r5, [pc, #56]	; (400784 <nm_bsp_register_isr+0x70>)
  40074a:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40074c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400750:	4620      	mov	r0, r4
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <nm_bsp_register_isr+0x74>)
  400754:	4798      	blx	r3
  400756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40075a:	4b0c      	ldr	r3, [pc, #48]	; (40078c <nm_bsp_register_isr+0x78>)
  40075c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40075e:	2200      	movs	r2, #0
  400760:	2110      	movs	r1, #16
  400762:	4620      	mov	r0, r4
  400764:	4b0a      	ldr	r3, [pc, #40]	; (400790 <nm_bsp_register_isr+0x7c>)
  400766:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  400768:	b003      	add	sp, #12
  40076a:	bd30      	pop	{r4, r5, pc}
  40076c:	204008a0 	.word	0x204008a0
  400770:	00403905 	.word	0x00403905
  400774:	00403505 	.word	0x00403505
  400778:	400e1400 	.word	0x400e1400
  40077c:	004033c1 	.word	0x004033c1
  400780:	00400631 	.word	0x00400631
  400784:	00403689 	.word	0x00403689
  400788:	004034f5 	.word	0x004034f5
  40078c:	e000e100 	.word	0xe000e100
  400790:	00403759 	.word	0x00403759

00400794 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400794:	b508      	push	{r3, lr}
	if (u8Enable) {
  400796:	b128      	cbz	r0, 4007a4 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400798:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40079c:	4804      	ldr	r0, [pc, #16]	; (4007b0 <nm_bsp_interrupt_ctrl+0x1c>)
  40079e:	4b05      	ldr	r3, [pc, #20]	; (4007b4 <nm_bsp_interrupt_ctrl+0x20>)
  4007a0:	4798      	blx	r3
  4007a2:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4007a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a8:	4801      	ldr	r0, [pc, #4]	; (4007b0 <nm_bsp_interrupt_ctrl+0x1c>)
  4007aa:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <nm_bsp_interrupt_ctrl+0x24>)
  4007ac:	4798      	blx	r3
  4007ae:	bd08      	pop	{r3, pc}
  4007b0:	400e1400 	.word	0x400e1400
  4007b4:	004034f5 	.word	0x004034f5
  4007b8:	004034f9 	.word	0x004034f9

004007bc <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4007be:	4c39      	ldr	r4, [pc, #228]	; (4008a4 <nm_bus_init+0xe8>)
  4007c0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4007c4:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4007c6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4007ca:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4007cc:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4007ce:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4007d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4007d4:	430b      	orrs	r3, r1
  4007d6:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4007d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4007da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4007de:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4007e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007e4:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4007e6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4007ea:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4007ec:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4007ee:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4007f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4007f4:	4313      	orrs	r3, r2
  4007f6:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4007f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4007fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4007fe:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400804:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400806:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40080a:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40080c:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40080e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400812:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400814:	4318      	orrs	r0, r3
  400816:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400818:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40081a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40081e:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400820:	6061      	str	r1, [r4, #4]
  400822:	6062      	str	r2, [r4, #4]
  400824:	6063      	str	r3, [r4, #4]
  400826:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40082a:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  40082c:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40082e:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  400830:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  400832:	4d1d      	ldr	r5, [pc, #116]	; (4008a8 <nm_bus_init+0xec>)
  400834:	4628      	mov	r0, r5
  400836:	4b1d      	ldr	r3, [pc, #116]	; (4008ac <nm_bus_init+0xf0>)
  400838:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40083a:	2302      	movs	r3, #2
  40083c:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  40083e:	2380      	movs	r3, #128	; 0x80
  400840:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400842:	686b      	ldr	r3, [r5, #4]
  400844:	f043 0301 	orr.w	r3, r3, #1
  400848:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40084a:	686b      	ldr	r3, [r5, #4]
  40084c:	f043 0310 	orr.w	r3, r3, #16
  400850:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  400852:	2101      	movs	r1, #1
  400854:	4628      	mov	r0, r5
  400856:	4b16      	ldr	r3, [pc, #88]	; (4008b0 <nm_bus_init+0xf4>)
  400858:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40085a:	2200      	movs	r2, #0
  40085c:	2101      	movs	r1, #1
  40085e:	4628      	mov	r0, r5
  400860:	4b14      	ldr	r3, [pc, #80]	; (4008b4 <nm_bus_init+0xf8>)
  400862:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  400864:	2201      	movs	r2, #1
  400866:	4611      	mov	r1, r2
  400868:	4628      	mov	r0, r5
  40086a:	4b13      	ldr	r3, [pc, #76]	; (4008b8 <nm_bus_init+0xfc>)
  40086c:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40086e:	2200      	movs	r2, #0
  400870:	2101      	movs	r1, #1
  400872:	4628      	mov	r0, r5
  400874:	4b11      	ldr	r3, [pc, #68]	; (4008bc <nm_bus_init+0x100>)
  400876:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  400878:	4911      	ldr	r1, [pc, #68]	; (4008c0 <nm_bus_init+0x104>)
  40087a:	4812      	ldr	r0, [pc, #72]	; (4008c4 <nm_bus_init+0x108>)
  40087c:	4b12      	ldr	r3, [pc, #72]	; (4008c8 <nm_bus_init+0x10c>)
  40087e:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400880:	b2c2      	uxtb	r2, r0
  400882:	2101      	movs	r1, #1
  400884:	4628      	mov	r0, r5
  400886:	4b11      	ldr	r3, [pc, #68]	; (4008cc <nm_bus_init+0x110>)
  400888:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40088a:	2300      	movs	r3, #0
  40088c:	461a      	mov	r2, r3
  40088e:	2101      	movs	r1, #1
  400890:	4628      	mov	r0, r5
  400892:	4f0f      	ldr	r7, [pc, #60]	; (4008d0 <nm_bus_init+0x114>)
  400894:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400896:	2301      	movs	r3, #1
  400898:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40089a:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  40089c:	4b0d      	ldr	r3, [pc, #52]	; (4008d4 <nm_bus_init+0x118>)
  40089e:	4798      	blx	r3
#endif
	return result;
}
  4008a0:	2000      	movs	r0, #0
  4008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008a4:	400e1400 	.word	0x400e1400
  4008a8:	40008000 	.word	0x40008000
  4008ac:	00403959 	.word	0x00403959
  4008b0:	00403985 	.word	0x00403985
  4008b4:	00403a09 	.word	0x00403a09
  4008b8:	00403a29 	.word	0x00403a29
  4008bc:	00403a49 	.word	0x00403a49
  4008c0:	11e1a300 	.word	0x11e1a300
  4008c4:	02dc6c00 	.word	0x02dc6c00
  4008c8:	00403a5d 	.word	0x00403a5d
  4008cc:	00403a75 	.word	0x00403a75
  4008d0:	00403aa1 	.word	0x00403aa1
  4008d4:	0040066d 	.word	0x0040066d

004008d8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4008d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008dc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4008de:	2803      	cmp	r0, #3
  4008e0:	d141      	bne.n	400966 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4008e2:	680e      	ldr	r6, [r1, #0]
  4008e4:	684d      	ldr	r5, [r1, #4]
  4008e6:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  4008e8:	2300      	movs	r3, #0
  4008ea:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  4008ee:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  4008f2:	b136      	cbz	r6, 400902 <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  4008f4:	2d00      	cmp	r5, #0
  4008f6:	d133      	bne.n	400960 <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  4008f8:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4008fc:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  4008fe:	ad01      	add	r5, sp, #4
  400900:	e004      	b.n	40090c <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400902:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400906:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  40090a:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  40090c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400910:	4b1c      	ldr	r3, [pc, #112]	; (400984 <nm_bus_ioctl+0xac>)
  400912:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400914:	b1f4      	cbz	r4, 400954 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400916:	4f1c      	ldr	r7, [pc, #112]	; (400988 <nm_bus_ioctl+0xb0>)
  400918:	f8df b084 	ldr.w	fp, [pc, #132]	; 4009a0 <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40091c:	f8df a084 	ldr.w	sl, [pc, #132]	; 4009a4 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400920:	2300      	movs	r3, #0
  400922:	461a      	mov	r2, r3
  400924:	7831      	ldrb	r1, [r6, #0]
  400926:	4638      	mov	r0, r7
  400928:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40092a:	f10d 0205 	add.w	r2, sp, #5
  40092e:	f10d 0106 	add.w	r1, sp, #6
  400932:	4638      	mov	r0, r7
  400934:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  400936:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40093a:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  40093c:	3c01      	subs	r4, #1
  40093e:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  400940:	f1b8 0f00 	cmp.w	r8, #0
  400944:	d100      	bne.n	400948 <nm_bus_ioctl+0x70>
			pu8Miso++;
  400946:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  400948:	f1b9 0f00 	cmp.w	r9, #0
  40094c:	d100      	bne.n	400950 <nm_bus_ioctl+0x78>
			pu8Mosi++;
  40094e:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  400950:	2c00      	cmp	r4, #0
  400952:	d1e5      	bne.n	400920 <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  400954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400958:	4b0a      	ldr	r3, [pc, #40]	; (400984 <nm_bus_ioctl+0xac>)
  40095a:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  40095c:	2000      	movs	r0, #0
  40095e:	e00e      	b.n	40097e <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  400960:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  400964:	e00b      	b.n	40097e <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  400966:	f240 121f 	movw	r2, #287	; 0x11f
  40096a:	4908      	ldr	r1, [pc, #32]	; (40098c <nm_bus_ioctl+0xb4>)
  40096c:	4808      	ldr	r0, [pc, #32]	; (400990 <nm_bus_ioctl+0xb8>)
  40096e:	4c09      	ldr	r4, [pc, #36]	; (400994 <nm_bus_ioctl+0xbc>)
  400970:	47a0      	blx	r4
  400972:	4809      	ldr	r0, [pc, #36]	; (400998 <nm_bus_ioctl+0xc0>)
  400974:	47a0      	blx	r4
  400976:	4809      	ldr	r0, [pc, #36]	; (40099c <nm_bus_ioctl+0xc4>)
  400978:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  40097a:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  40097e:	b003      	add	sp, #12
  400980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400984:	400e1400 	.word	0x400e1400
  400988:	40008000 	.word	0x40008000
  40098c:	00407fc0 	.word	0x00407fc0
  400990:	00407fd0 	.word	0x00407fd0
  400994:	0040458d 	.word	0x0040458d
  400998:	00407fe4 	.word	0x00407fe4
  40099c:	00407ffc 	.word	0x00407ffc
  4009a0:	004039d1 	.word	0x004039d1
  4009a4:	0040399d 	.word	0x0040399d

004009a8 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4009a8:	2202      	movs	r2, #2
  4009aa:	4b0e      	ldr	r3, [pc, #56]	; (4009e4 <nm_bus_deinit+0x3c>)
  4009ac:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ae:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4009b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4009b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009ba:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4009c4:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4009ce:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4009d8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  4009de:	2000      	movs	r0, #0
  4009e0:	4770      	bx	lr
  4009e2:	bf00      	nop
  4009e4:	40008000 	.word	0x40008000

004009e8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4009e8:	b13a      	cbz	r2, 4009fa <m2m_memcpy+0x12>
  4009ea:	3901      	subs	r1, #1
  4009ec:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4009ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4009f2:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4009f6:	4290      	cmp	r0, r2
  4009f8:	d1f9      	bne.n	4009ee <m2m_memcpy+0x6>
  4009fa:	4770      	bx	lr

004009fc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4009fc:	b122      	cbz	r2, 400a08 <m2m_memset+0xc>
  4009fe:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  400a00:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400a04:	4290      	cmp	r0, r2
  400a06:	d1fb      	bne.n	400a00 <m2m_memset+0x4>
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop

00400a0c <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  400a0c:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  400a0e:	7802      	ldrb	r2, [r0, #0]
  400a10:	b13a      	cbz	r2, 400a22 <m2m_strlen+0x16>
  400a12:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400a14:	3001      	adds	r0, #1
  400a16:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400a18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400a1c:	2a00      	cmp	r2, #0
  400a1e:	d1f9      	bne.n	400a14 <m2m_strlen+0x8>
  400a20:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  400a22:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400a24:	4770      	bx	lr
  400a26:	bf00      	nop

00400a28 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400a28:	4a02      	ldr	r2, [pc, #8]	; (400a34 <isr+0xc>)
  400a2a:	7813      	ldrb	r3, [r2, #0]
  400a2c:	3301      	adds	r3, #1
  400a2e:	b2db      	uxtb	r3, r3
  400a30:	7013      	strb	r3, [r2, #0]
  400a32:	4770      	bx	lr
  400a34:	204008ac 	.word	0x204008ac

00400a38 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400a38:	4770      	bx	lr
  400a3a:	bf00      	nop

00400a3c <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  400a3c:	b500      	push	{lr}
  400a3e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  400a40:	2001      	movs	r0, #1
  400a42:	4b0b      	ldr	r3, [pc, #44]	; (400a70 <hif_set_rx_done+0x34>)
  400a44:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400a46:	a901      	add	r1, sp, #4
  400a48:	f241 0070 	movw	r0, #4208	; 0x1070
  400a4c:	4b09      	ldr	r3, [pc, #36]	; (400a74 <hif_set_rx_done+0x38>)
  400a4e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400a50:	4603      	mov	r3, r0
  400a52:	b940      	cbnz	r0, 400a66 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  400a54:	9901      	ldr	r1, [sp, #4]
  400a56:	f041 0102 	orr.w	r1, r1, #2
  400a5a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400a5c:	f241 0070 	movw	r0, #4208	; 0x1070
  400a60:	4b05      	ldr	r3, [pc, #20]	; (400a78 <hif_set_rx_done+0x3c>)
  400a62:	4798      	blx	r3
  400a64:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  400a66:	4618      	mov	r0, r3
  400a68:	b003      	add	sp, #12
  400a6a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a6e:	bf00      	nop
  400a70:	00400795 	.word	0x00400795
  400a74:	00401d05 	.word	0x00401d05
  400a78:	00401d11 	.word	0x00401d11

00400a7c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  400a7c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  400a7e:	4b11      	ldr	r3, [pc, #68]	; (400ac4 <hif_chip_wake+0x48>)
  400a80:	781b      	ldrb	r3, [r3, #0]
  400a82:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a86:	d115      	bne.n	400ab4 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400a88:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <hif_chip_wake+0x4c>)
  400a8a:	781b      	ldrb	r3, [r3, #0]
  400a8c:	b2db      	uxtb	r3, r3
  400a8e:	2b03      	cmp	r3, #3
  400a90:	d004      	beq.n	400a9c <hif_chip_wake+0x20>
  400a92:	4b0d      	ldr	r3, [pc, #52]	; (400ac8 <hif_chip_wake+0x4c>)
  400a94:	781b      	ldrb	r3, [r3, #0]
  400a96:	b2db      	uxtb	r3, r3
  400a98:	2b04      	cmp	r3, #4
  400a9a:	d10b      	bne.n	400ab4 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  400a9c:	4b0b      	ldr	r3, [pc, #44]	; (400acc <hif_chip_wake+0x50>)
  400a9e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400aa0:	4603      	mov	r3, r0
  400aa2:	b968      	cbnz	r0, 400ac0 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400aa4:	f245 6178 	movw	r1, #22136	; 0x5678
  400aa8:	f241 0074 	movw	r0, #4212	; 0x1074
  400aac:	4b08      	ldr	r3, [pc, #32]	; (400ad0 <hif_chip_wake+0x54>)
  400aae:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400ab0:	4603      	mov	r3, r0
  400ab2:	b928      	cbnz	r0, 400ac0 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400ab4:	4a03      	ldr	r2, [pc, #12]	; (400ac4 <hif_chip_wake+0x48>)
  400ab6:	7813      	ldrb	r3, [r2, #0]
  400ab8:	3301      	adds	r3, #1
  400aba:	b2db      	uxtb	r3, r3
  400abc:	7013      	strb	r3, [r2, #0]
  400abe:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  400ac0:	4618      	mov	r0, r3
  400ac2:	bd08      	pop	{r3, pc}
  400ac4:	204008c8 	.word	0x204008c8
  400ac8:	204008b8 	.word	0x204008b8
  400acc:	00401875 	.word	0x00401875
  400ad0:	00401d11 	.word	0x00401d11

00400ad4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400ad4:	b500      	push	{lr}
  400ad6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400ad8:	4b1d      	ldr	r3, [pc, #116]	; (400b50 <hif_chip_sleep+0x7c>)
  400ada:	781b      	ldrb	r3, [r3, #0]
  400adc:	f013 0fff 	tst.w	r3, #255	; 0xff
  400ae0:	d004      	beq.n	400aec <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  400ae2:	4a1b      	ldr	r2, [pc, #108]	; (400b50 <hif_chip_sleep+0x7c>)
  400ae4:	7813      	ldrb	r3, [r2, #0]
  400ae6:	3b01      	subs	r3, #1
  400ae8:	b2db      	uxtb	r3, r3
  400aea:	7013      	strb	r3, [r2, #0]
	}

	if(gu8ChipSleep == 0)
  400aec:	4b18      	ldr	r3, [pc, #96]	; (400b50 <hif_chip_sleep+0x7c>)
  400aee:	781b      	ldrb	r3, [r3, #0]
  400af0:	f013 0fff 	tst.w	r3, #255	; 0xff
  400af4:	d125      	bne.n	400b42 <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400af6:	4b17      	ldr	r3, [pc, #92]	; (400b54 <hif_chip_sleep+0x80>)
  400af8:	781b      	ldrb	r3, [r3, #0]
  400afa:	b2db      	uxtb	r3, r3
  400afc:	2b03      	cmp	r3, #3
  400afe:	d004      	beq.n	400b0a <hif_chip_sleep+0x36>
  400b00:	4b14      	ldr	r3, [pc, #80]	; (400b54 <hif_chip_sleep+0x80>)
  400b02:	781b      	ldrb	r3, [r3, #0]
  400b04:	b2db      	uxtb	r3, r3
  400b06:	2b04      	cmp	r3, #4
  400b08:	d11d      	bne.n	400b46 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  400b0a:	2300      	movs	r3, #0
  400b0c:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  400b0e:	f244 3121 	movw	r1, #17185	; 0x4321
  400b12:	f241 0074 	movw	r0, #4212	; 0x1074
  400b16:	4b10      	ldr	r3, [pc, #64]	; (400b58 <hif_chip_sleep+0x84>)
  400b18:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400b1a:	4603      	mov	r3, r0
  400b1c:	b9a0      	cbnz	r0, 400b48 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  400b1e:	a901      	add	r1, sp, #4
  400b20:	2001      	movs	r0, #1
  400b22:	4b0e      	ldr	r3, [pc, #56]	; (400b5c <hif_chip_sleep+0x88>)
  400b24:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400b26:	4603      	mov	r3, r0
  400b28:	b970      	cbnz	r0, 400b48 <hif_chip_sleep+0x74>
			if(reg&0x2)
  400b2a:	9901      	ldr	r1, [sp, #4]
  400b2c:	f011 0f02 	tst.w	r1, #2
  400b30:	d00a      	beq.n	400b48 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  400b32:	f021 0102 	bic.w	r1, r1, #2
  400b36:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  400b38:	2001      	movs	r0, #1
  400b3a:	4b07      	ldr	r3, [pc, #28]	; (400b58 <hif_chip_sleep+0x84>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	e002      	b.n	400b48 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  400b42:	2300      	movs	r3, #0
  400b44:	e000      	b.n	400b48 <hif_chip_sleep+0x74>
  400b46:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  400b48:	4618      	mov	r0, r3
  400b4a:	b003      	add	sp, #12
  400b4c:	f85d fb04 	ldr.w	pc, [sp], #4
  400b50:	204008c8 	.word	0x204008c8
  400b54:	204008b8 	.word	0x204008b8
  400b58:	00401d11 	.word	0x00401d11
  400b5c:	00401d05 	.word	0x00401d05

00400b60 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  400b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b64:	b087      	sub	sp, #28
  400b66:	4680      	mov	r8, r0
  400b68:	460f      	mov	r7, r1
  400b6a:	4692      	mov	sl, r2
  400b6c:	4699      	mov	r9, r3
  400b6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  400b70:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  400b74:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  400b78:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  400b7c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  400b80:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  400b84:	2308      	movs	r3, #8
  400b86:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  400b8a:	b144      	cbz	r4, 400b9e <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  400b8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400b90:	fa16 f383 	uxtah	r3, r6, r3
  400b94:	442b      	add	r3, r5
  400b96:	b29b      	uxth	r3, r3
  400b98:	f8ad 3016 	strh.w	r3, [sp, #22]
  400b9c:	e006      	b.n	400bac <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  400b9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400ba2:	fa19 f383 	uxtah	r3, r9, r3
  400ba6:	b29b      	uxth	r3, r3
  400ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  400bac:	4b57      	ldr	r3, [pc, #348]	; (400d0c <hif_send+0x1ac>)
  400bae:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  400bb0:	4683      	mov	fp, r0
  400bb2:	2800      	cmp	r0, #0
  400bb4:	f040 8095 	bne.w	400ce2 <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  400bb8:	2300      	movs	r3, #0
  400bba:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400bbc:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  400bc0:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  400bc2:	9b02      	ldr	r3, [sp, #8]
  400bc4:	ea48 0303 	orr.w	r3, r8, r3
  400bc8:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400bca:	9b02      	ldr	r3, [sp, #8]
  400bcc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  400bd0:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  400bd2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400bd6:	9b02      	ldr	r3, [sp, #8]
  400bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400bdc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  400bde:	9902      	ldr	r1, [sp, #8]
  400be0:	f241 008c 	movw	r0, #4236	; 0x108c
  400be4:	4b4a      	ldr	r3, [pc, #296]	; (400d10 <hif_send+0x1b0>)
  400be6:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400be8:	4683      	mov	fp, r0
  400bea:	2800      	cmp	r0, #0
  400bec:	f040 808a 	bne.w	400d04 <hif_send+0x1a4>


		reg = 0;
  400bf0:	2300      	movs	r3, #0
  400bf2:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400bf4:	9b02      	ldr	r3, [sp, #8]
  400bf6:	f043 0302 	orr.w	r3, r3, #2
  400bfa:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400bfc:	9902      	ldr	r1, [sp, #8]
  400bfe:	f241 0078 	movw	r0, #4216	; 0x1078
  400c02:	4b43      	ldr	r3, [pc, #268]	; (400d10 <hif_send+0x1b0>)
  400c04:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400c06:	4683      	mov	fp, r0
  400c08:	2800      	cmp	r0, #0
  400c0a:	d17b      	bne.n	400d04 <hif_send+0x1a4>
		dma_addr = 0;
  400c0c:	2300      	movs	r3, #0
  400c0e:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400c10:	f8ad 3006 	strh.w	r3, [sp, #6]
  400c14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400c18:	b29b      	uxth	r3, r3
  400c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400c1e:	d21e      	bcs.n	400c5e <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400c20:	f241 0878 	movw	r8, #4216	; 0x1078
  400c24:	4f3b      	ldr	r7, [pc, #236]	; (400d14 <hif_send+0x1b4>)
  400c26:	a902      	add	r1, sp, #8
  400c28:	4640      	mov	r0, r8
  400c2a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400c2c:	b9b8      	cbnz	r0, 400c5e <hif_send+0xfe>
			if (!(reg & 0x2))
  400c2e:	9b02      	ldr	r3, [sp, #8]
  400c30:	f013 0f02 	tst.w	r3, #2
  400c34:	d107      	bne.n	400c46 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400c36:	a903      	add	r1, sp, #12
  400c38:	4837      	ldr	r0, [pc, #220]	; (400d18 <hif_send+0x1b8>)
  400c3a:	4b36      	ldr	r3, [pc, #216]	; (400d14 <hif_send+0x1b4>)
  400c3c:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  400c3e:	b170      	cbz	r0, 400c5e <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  400c40:	2300      	movs	r3, #0
  400c42:	9303      	str	r3, [sp, #12]
  400c44:	e00b      	b.n	400c5e <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400c46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400c4a:	3301      	adds	r3, #1
  400c4c:	b29b      	uxth	r3, r3
  400c4e:	f8ad 3006 	strh.w	r3, [sp, #6]
  400c52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400c56:	b29b      	uxth	r3, r3
  400c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400c5c:	d3e3      	bcc.n	400c26 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  400c5e:	9b03      	ldr	r3, [sp, #12]
  400c60:	2b00      	cmp	r3, #0
  400c62:	d04d      	beq.n	400d00 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  400c64:	9b03      	ldr	r3, [sp, #12]
  400c66:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400c68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400c6c:	b29b      	uxth	r3, r3
  400c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  400c72:	9804      	ldr	r0, [sp, #16]
  400c74:	2208      	movs	r2, #8
  400c76:	a905      	add	r1, sp, #20
  400c78:	4b28      	ldr	r3, [pc, #160]	; (400d1c <hif_send+0x1bc>)
  400c7a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  400c7c:	4683      	mov	fp, r0
  400c7e:	2800      	cmp	r0, #0
  400c80:	d140      	bne.n	400d04 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  400c82:	9b04      	ldr	r3, [sp, #16]
  400c84:	3308      	adds	r3, #8
  400c86:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  400c88:	f1ba 0f00 	cmp.w	sl, #0
  400c8c:	d00a      	beq.n	400ca4 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  400c8e:	9804      	ldr	r0, [sp, #16]
  400c90:	464a      	mov	r2, r9
  400c92:	4651      	mov	r1, sl
  400c94:	4b21      	ldr	r3, [pc, #132]	; (400d1c <hif_send+0x1bc>)
  400c96:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400c98:	4683      	mov	fp, r0
  400c9a:	2800      	cmp	r0, #0
  400c9c:	d132      	bne.n	400d04 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  400c9e:	9b04      	ldr	r3, [sp, #16]
  400ca0:	444b      	add	r3, r9
  400ca2:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400ca4:	b174      	cbz	r4, 400cc4 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400ca6:	9b04      	ldr	r3, [sp, #16]
  400ca8:	ebc9 0505 	rsb	r5, r9, r5
  400cac:	441d      	add	r5, r3
  400cae:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  400cb0:	9804      	ldr	r0, [sp, #16]
  400cb2:	4632      	mov	r2, r6
  400cb4:	4621      	mov	r1, r4
  400cb6:	4b19      	ldr	r3, [pc, #100]	; (400d1c <hif_send+0x1bc>)
  400cb8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400cba:	4683      	mov	fp, r0
  400cbc:	bb10      	cbnz	r0, 400d04 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  400cbe:	9b04      	ldr	r3, [sp, #16]
  400cc0:	441e      	add	r6, r3
  400cc2:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400cc4:	9b03      	ldr	r3, [sp, #12]
  400cc6:	009b      	lsls	r3, r3, #2
  400cc8:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400cca:	9b02      	ldr	r3, [sp, #8]
  400ccc:	f043 0302 	orr.w	r3, r3, #2
  400cd0:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  400cd2:	9902      	ldr	r1, [sp, #8]
  400cd4:	f241 006c 	movw	r0, #4204	; 0x106c
  400cd8:	4b0d      	ldr	r3, [pc, #52]	; (400d10 <hif_send+0x1b0>)
  400cda:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400cdc:	4683      	mov	fp, r0
  400cde:	b988      	cbnz	r0, 400d04 <hif_send+0x1a4>
  400ce0:	e00a      	b.n	400cf8 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  400ce2:	f240 129f 	movw	r2, #415	; 0x19f
  400ce6:	490e      	ldr	r1, [pc, #56]	; (400d20 <hif_send+0x1c0>)
  400ce8:	480e      	ldr	r0, [pc, #56]	; (400d24 <hif_send+0x1c4>)
  400cea:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <hif_send+0x1c8>)
  400cec:	47a0      	blx	r4
  400cee:	480f      	ldr	r0, [pc, #60]	; (400d2c <hif_send+0x1cc>)
  400cf0:	47a0      	blx	r4
  400cf2:	480f      	ldr	r0, [pc, #60]	; (400d30 <hif_send+0x1d0>)
  400cf4:	47a0      	blx	r4
		goto ERR1;
  400cf6:	e005      	b.n	400d04 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400cf8:	4b0e      	ldr	r3, [pc, #56]	; (400d34 <hif_send+0x1d4>)
  400cfa:	4798      	blx	r3
  400cfc:	4683      	mov	fp, r0
  400cfe:	e001      	b.n	400d04 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  400d00:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400d04:	4658      	mov	r0, fp
  400d06:	b007      	add	sp, #28
  400d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d0c:	00400a7d 	.word	0x00400a7d
  400d10:	00401d11 	.word	0x00401d11
  400d14:	00401d05 	.word	0x00401d05
  400d18:	00150400 	.word	0x00150400
  400d1c:	00401d7d 	.word	0x00401d7d
  400d20:	00408258 	.word	0x00408258
  400d24:	00407fd0 	.word	0x00407fd0
  400d28:	0040458d 	.word	0x0040458d
  400d2c:	00408014 	.word	0x00408014
  400d30:	00407ffc 	.word	0x00407ffc
  400d34:	00400ad5 	.word	0x00400ad5

00400d38 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  400d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400d3c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400d3e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 40103c <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  400d42:	4fa3      	ldr	r7, [pc, #652]	; (400fd0 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400d44:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 401040 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400d48:	4ea2      	ldr	r6, [pc, #648]	; (400fd4 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400d4a:	e17b      	b.n	401044 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  400d4c:	f899 3000 	ldrb.w	r3, [r9]
  400d50:	3b01      	subs	r3, #1
  400d52:	b2db      	uxtb	r3, r3
  400d54:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  400d58:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  400d5a:	4604      	mov	r4, r0
  400d5c:	2800      	cmp	r0, #0
  400d5e:	f040 811a 	bne.w	400f96 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  400d62:	a903      	add	r1, sp, #12
  400d64:	f241 0070 	movw	r0, #4208	; 0x1070
  400d68:	4b9b      	ldr	r3, [pc, #620]	; (400fd8 <hif_handle_isr+0x2a0>)
  400d6a:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  400d6c:	4604      	mov	r4, r0
  400d6e:	2800      	cmp	r0, #0
  400d70:	f040 8106 	bne.w	400f80 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  400d74:	9b03      	ldr	r3, [sp, #12]
  400d76:	f013 0f01 	tst.w	r3, #1
  400d7a:	f000 80f5 	beq.w	400f68 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  400d7e:	4b97      	ldr	r3, [pc, #604]	; (400fdc <hif_handle_isr+0x2a4>)
  400d80:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  400d82:	9903      	ldr	r1, [sp, #12]
  400d84:	f021 0101 	bic.w	r1, r1, #1
  400d88:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400d8a:	f241 0070 	movw	r0, #4208	; 0x1070
  400d8e:	4b94      	ldr	r3, [pc, #592]	; (400fe0 <hif_handle_isr+0x2a8>)
  400d90:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  400d92:	4604      	mov	r4, r0
  400d94:	2800      	cmp	r0, #0
  400d96:	f040 810e 	bne.w	400fb6 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  400d9a:	2200      	movs	r2, #0
  400d9c:	4b91      	ldr	r3, [pc, #580]	; (400fe4 <hif_handle_isr+0x2ac>)
  400d9e:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  400da0:	9d03      	ldr	r5, [sp, #12]
  400da2:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400da6:	2d00      	cmp	r5, #0
  400da8:	f000 80d1 	beq.w	400f4e <hif_handle_isr+0x216>
					uint32 address = 0;
  400dac:	a906      	add	r1, sp, #24
  400dae:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  400db2:	f241 0084 	movw	r0, #4228	; 0x1084
  400db6:	4b88      	ldr	r3, [pc, #544]	; (400fd8 <hif_handle_isr+0x2a0>)
  400db8:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400dba:	4604      	mov	r4, r0
  400dbc:	b168      	cbz	r0, 400dda <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  400dbe:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  400dc2:	4641      	mov	r1, r8
  400dc4:	4630      	mov	r0, r6
  400dc6:	4d88      	ldr	r5, [pc, #544]	; (400fe8 <hif_handle_isr+0x2b0>)
  400dc8:	47a8      	blx	r5
  400dca:	4888      	ldr	r0, [pc, #544]	; (400fec <hif_handle_isr+0x2b4>)
  400dcc:	47a8      	blx	r5
  400dce:	4888      	ldr	r0, [pc, #544]	; (400ff0 <hif_handle_isr+0x2b8>)
  400dd0:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400dd2:	2001      	movs	r0, #1
  400dd4:	4b81      	ldr	r3, [pc, #516]	; (400fdc <hif_handle_isr+0x2a4>)
  400dd6:	4798      	blx	r3
  400dd8:	e0eb      	b.n	400fb2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400dda:	2204      	movs	r2, #4
  400ddc:	a904      	add	r1, sp, #16
  400dde:	9805      	ldr	r0, [sp, #20]
  400de0:	4b84      	ldr	r3, [pc, #528]	; (400ff4 <hif_handle_isr+0x2bc>)
  400de2:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400de4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400de8:	b29b      	uxth	r3, r3
  400dea:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  400dee:	4604      	mov	r4, r0
  400df0:	b168      	cbz	r0, 400e0e <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  400df2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400df6:	4641      	mov	r1, r8
  400df8:	4630      	mov	r0, r6
  400dfa:	4d7b      	ldr	r5, [pc, #492]	; (400fe8 <hif_handle_isr+0x2b0>)
  400dfc:	47a8      	blx	r5
  400dfe:	487e      	ldr	r0, [pc, #504]	; (400ff8 <hif_handle_isr+0x2c0>)
  400e00:	47a8      	blx	r5
  400e02:	487b      	ldr	r0, [pc, #492]	; (400ff0 <hif_handle_isr+0x2b8>)
  400e04:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400e06:	2001      	movs	r0, #1
  400e08:	4b74      	ldr	r3, [pc, #464]	; (400fdc <hif_handle_isr+0x2a4>)
  400e0a:	4798      	blx	r3
  400e0c:	e0d1      	b.n	400fb2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  400e0e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400e12:	b29b      	uxth	r3, r3
  400e14:	429d      	cmp	r5, r3
  400e16:	d01e      	beq.n	400e56 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400e18:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400e1c:	b29b      	uxth	r3, r3
  400e1e:	1aeb      	subs	r3, r5, r3
  400e20:	2b04      	cmp	r3, #4
  400e22:	dd18      	ble.n	400e56 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400e24:	f240 12df 	movw	r2, #479	; 0x1df
  400e28:	4641      	mov	r1, r8
  400e2a:	4630      	mov	r0, r6
  400e2c:	4c6e      	ldr	r4, [pc, #440]	; (400fe8 <hif_handle_isr+0x2b0>)
  400e2e:	47a0      	blx	r4
  400e30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400e34:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400e38:	f89d 1011 	ldrb.w	r1, [sp, #17]
  400e3c:	9100      	str	r1, [sp, #0]
  400e3e:	b292      	uxth	r2, r2
  400e40:	4629      	mov	r1, r5
  400e42:	486e      	ldr	r0, [pc, #440]	; (400ffc <hif_handle_isr+0x2c4>)
  400e44:	47a0      	blx	r4
  400e46:	486a      	ldr	r0, [pc, #424]	; (400ff0 <hif_handle_isr+0x2b8>)
  400e48:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  400e4a:	2001      	movs	r0, #1
  400e4c:	4b63      	ldr	r3, [pc, #396]	; (400fdc <hif_handle_isr+0x2a4>)
  400e4e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  400e50:	f06f 0405 	mvn.w	r4, #5
  400e54:	e0ad      	b.n	400fb2 <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  400e56:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400e5a:	b2db      	uxtb	r3, r3
  400e5c:	2b01      	cmp	r3, #1
  400e5e:	d10d      	bne.n	400e7c <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  400e60:	4b67      	ldr	r3, [pc, #412]	; (401000 <hif_handle_isr+0x2c8>)
  400e62:	681b      	ldr	r3, [r3, #0]
  400e64:	2b00      	cmp	r3, #0
  400e66:	d060      	beq.n	400f2a <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400e68:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400e6c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400e70:	3908      	subs	r1, #8
  400e72:	9a05      	ldr	r2, [sp, #20]
  400e74:	3208      	adds	r2, #8
  400e76:	b289      	uxth	r1, r1
  400e78:	4798      	blx	r3
  400e7a:	e056      	b.n	400f2a <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  400e7c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400e80:	b2db      	uxtb	r3, r3
  400e82:	2b02      	cmp	r3, #2
  400e84:	d10d      	bne.n	400ea2 <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  400e86:	4b5f      	ldr	r3, [pc, #380]	; (401004 <hif_handle_isr+0x2cc>)
  400e88:	681b      	ldr	r3, [r3, #0]
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d04d      	beq.n	400f2a <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400e8e:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400e92:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400e96:	3908      	subs	r1, #8
  400e98:	9a05      	ldr	r2, [sp, #20]
  400e9a:	3208      	adds	r2, #8
  400e9c:	b289      	uxth	r1, r1
  400e9e:	4798      	blx	r3
  400ea0:	e043      	b.n	400f2a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400ea2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ea6:	b2db      	uxtb	r3, r3
  400ea8:	2b04      	cmp	r3, #4
  400eaa:	d10d      	bne.n	400ec8 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  400eac:	4b56      	ldr	r3, [pc, #344]	; (401008 <hif_handle_isr+0x2d0>)
  400eae:	681b      	ldr	r3, [r3, #0]
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d03a      	beq.n	400f2a <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400eb4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400eb8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400ebc:	3908      	subs	r1, #8
  400ebe:	9a05      	ldr	r2, [sp, #20]
  400ec0:	3208      	adds	r2, #8
  400ec2:	b289      	uxth	r1, r1
  400ec4:	4798      	blx	r3
  400ec6:	e030      	b.n	400f2a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400ec8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ecc:	b2db      	uxtb	r3, r3
  400ece:	2b06      	cmp	r3, #6
  400ed0:	d10c      	bne.n	400eec <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  400ed2:	4b4e      	ldr	r3, [pc, #312]	; (40100c <hif_handle_isr+0x2d4>)
  400ed4:	681b      	ldr	r3, [r3, #0]
  400ed6:	b343      	cbz	r3, 400f2a <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400ed8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400edc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400ee0:	3908      	subs	r1, #8
  400ee2:	9a05      	ldr	r2, [sp, #20]
  400ee4:	3208      	adds	r2, #8
  400ee6:	b289      	uxth	r1, r1
  400ee8:	4798      	blx	r3
  400eea:	e01e      	b.n	400f2a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400eec:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400ef0:	b2db      	uxtb	r3, r3
  400ef2:	2b07      	cmp	r3, #7
  400ef4:	d10c      	bne.n	400f10 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400ef6:	4b46      	ldr	r3, [pc, #280]	; (401010 <hif_handle_isr+0x2d8>)
  400ef8:	681b      	ldr	r3, [r3, #0]
  400efa:	b1b3      	cbz	r3, 400f2a <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400efc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400f00:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400f04:	3908      	subs	r1, #8
  400f06:	9a05      	ldr	r2, [sp, #20]
  400f08:	3208      	adds	r2, #8
  400f0a:	b289      	uxth	r1, r1
  400f0c:	4798      	blx	r3
  400f0e:	e00c      	b.n	400f2a <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400f10:	f240 2202 	movw	r2, #514	; 0x202
  400f14:	4641      	mov	r1, r8
  400f16:	4630      	mov	r0, r6
  400f18:	4c33      	ldr	r4, [pc, #204]	; (400fe8 <hif_handle_isr+0x2b0>)
  400f1a:	47a0      	blx	r4
  400f1c:	483d      	ldr	r0, [pc, #244]	; (401014 <hif_handle_isr+0x2dc>)
  400f1e:	47a0      	blx	r4
  400f20:	4833      	ldr	r0, [pc, #204]	; (400ff0 <hif_handle_isr+0x2b8>)
  400f22:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400f24:	f06f 0405 	mvn.w	r4, #5
  400f28:	e043      	b.n	400fb2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400f2a:	4b2e      	ldr	r3, [pc, #184]	; (400fe4 <hif_handle_isr+0x2ac>)
  400f2c:	781b      	ldrb	r3, [r3, #0]
  400f2e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f32:	d13b      	bne.n	400fac <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400f34:	f240 2209 	movw	r2, #521	; 0x209
  400f38:	4641      	mov	r1, r8
  400f3a:	4630      	mov	r0, r6
  400f3c:	4c2a      	ldr	r4, [pc, #168]	; (400fe8 <hif_handle_isr+0x2b0>)
  400f3e:	47a0      	blx	r4
  400f40:	4835      	ldr	r0, [pc, #212]	; (401018 <hif_handle_isr+0x2e0>)
  400f42:	47a0      	blx	r4
  400f44:	482a      	ldr	r0, [pc, #168]	; (400ff0 <hif_handle_isr+0x2b8>)
  400f46:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400f48:	4b34      	ldr	r3, [pc, #208]	; (40101c <hif_handle_isr+0x2e4>)
  400f4a:	4798      	blx	r3
  400f4c:	e02e      	b.n	400fac <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400f4e:	f240 2211 	movw	r2, #529	; 0x211
  400f52:	4641      	mov	r1, r8
  400f54:	4630      	mov	r0, r6
  400f56:	4c24      	ldr	r4, [pc, #144]	; (400fe8 <hif_handle_isr+0x2b0>)
  400f58:	47a0      	blx	r4
  400f5a:	4831      	ldr	r0, [pc, #196]	; (401020 <hif_handle_isr+0x2e8>)
  400f5c:	47a0      	blx	r4
  400f5e:	4824      	ldr	r0, [pc, #144]	; (400ff0 <hif_handle_isr+0x2b8>)
  400f60:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400f62:	f06f 0401 	mvn.w	r4, #1
  400f66:	e026      	b.n	400fb6 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400f68:	f44f 7206 	mov.w	r2, #536	; 0x218
  400f6c:	4641      	mov	r1, r8
  400f6e:	4630      	mov	r0, r6
  400f70:	4c1d      	ldr	r4, [pc, #116]	; (400fe8 <hif_handle_isr+0x2b0>)
  400f72:	47a0      	blx	r4
  400f74:	9903      	ldr	r1, [sp, #12]
  400f76:	482b      	ldr	r0, [pc, #172]	; (401024 <hif_handle_isr+0x2ec>)
  400f78:	47a0      	blx	r4
  400f7a:	481d      	ldr	r0, [pc, #116]	; (400ff0 <hif_handle_isr+0x2b8>)
  400f7c:	47a0      	blx	r4
  400f7e:	e015      	b.n	400fac <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400f80:	f240 221e 	movw	r2, #542	; 0x21e
  400f84:	4641      	mov	r1, r8
  400f86:	4630      	mov	r0, r6
  400f88:	4d17      	ldr	r5, [pc, #92]	; (400fe8 <hif_handle_isr+0x2b0>)
  400f8a:	47a8      	blx	r5
  400f8c:	4826      	ldr	r0, [pc, #152]	; (401028 <hif_handle_isr+0x2f0>)
  400f8e:	47a8      	blx	r5
  400f90:	4817      	ldr	r0, [pc, #92]	; (400ff0 <hif_handle_isr+0x2b8>)
  400f92:	47a8      	blx	r5
  400f94:	e00f      	b.n	400fb6 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400f96:	f44f 7209 	mov.w	r2, #548	; 0x224
  400f9a:	4641      	mov	r1, r8
  400f9c:	4630      	mov	r0, r6
  400f9e:	4d12      	ldr	r5, [pc, #72]	; (400fe8 <hif_handle_isr+0x2b0>)
  400fa0:	47a8      	blx	r5
  400fa2:	4822      	ldr	r0, [pc, #136]	; (40102c <hif_handle_isr+0x2f4>)
  400fa4:	47a8      	blx	r5
  400fa6:	4812      	ldr	r0, [pc, #72]	; (400ff0 <hif_handle_isr+0x2b8>)
  400fa8:	47a8      	blx	r5
  400faa:	e004      	b.n	400fb6 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400fac:	4b20      	ldr	r3, [pc, #128]	; (401030 <hif_handle_isr+0x2f8>)
  400fae:	4798      	blx	r3
  400fb0:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400fb2:	2c00      	cmp	r4, #0
  400fb4:	d046      	beq.n	401044 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400fb6:	f240 2243 	movw	r2, #579	; 0x243
  400fba:	491e      	ldr	r1, [pc, #120]	; (401034 <hif_handle_isr+0x2fc>)
  400fbc:	4630      	mov	r0, r6
  400fbe:	4d0a      	ldr	r5, [pc, #40]	; (400fe8 <hif_handle_isr+0x2b0>)
  400fc0:	47a8      	blx	r5
  400fc2:	4621      	mov	r1, r4
  400fc4:	481c      	ldr	r0, [pc, #112]	; (401038 <hif_handle_isr+0x300>)
  400fc6:	47a8      	blx	r5
  400fc8:	4809      	ldr	r0, [pc, #36]	; (400ff0 <hif_handle_isr+0x2b8>)
  400fca:	47a8      	blx	r5
			}
		}
  400fcc:	e6c4      	b.n	400d58 <hif_handle_isr+0x20>
  400fce:	bf00      	nop
  400fd0:	00400a7d 	.word	0x00400a7d
  400fd4:	00407fd0 	.word	0x00407fd0
  400fd8:	00401d05 	.word	0x00401d05
  400fdc:	00400795 	.word	0x00400795
  400fe0:	00401d11 	.word	0x00401d11
  400fe4:	204008c0 	.word	0x204008c0
  400fe8:	0040458d 	.word	0x0040458d
  400fec:	00408034 	.word	0x00408034
  400ff0:	00407ffc 	.word	0x00407ffc
  400ff4:	00401d1d 	.word	0x00401d1d
  400ff8:	0040805c 	.word	0x0040805c
  400ffc:	00408074 	.word	0x00408074
  401000:	204008a8 	.word	0x204008a8
  401004:	204008bc 	.word	0x204008bc
  401008:	204008c4 	.word	0x204008c4
  40100c:	204008a4 	.word	0x204008a4
  401010:	204008b4 	.word	0x204008b4
  401014:	004080b4 	.word	0x004080b4
  401018:	004080cc 	.word	0x004080cc
  40101c:	00400a3d 	.word	0x00400a3d
  401020:	004080f0 	.word	0x004080f0
  401024:	00408104 	.word	0x00408104
  401028:	00408120 	.word	0x00408120
  40102c:	00408144 	.word	0x00408144
  401030:	00400ad5 	.word	0x00400ad5
  401034:	00408264 	.word	0x00408264
  401038:	00408164 	.word	0x00408164
  40103c:	204008ac 	.word	0x204008ac
  401040:	00408000 	.word	0x00408000

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401044:	f899 3000 	ldrb.w	r3, [r9]
  401048:	f013 0fff 	tst.w	r3, #255	; 0xff
  40104c:	f47f ae7e 	bne.w	400d4c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  401050:	2000      	movs	r0, #0
  401052:	b007      	add	sp, #28
  401054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00401058 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  401058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40105c:	b083      	sub	sp, #12
  40105e:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  401060:	2a00      	cmp	r2, #0
  401062:	bf18      	it	ne
  401064:	2900      	cmpne	r1, #0
  401066:	d003      	beq.n	401070 <hif_receive+0x18>
  401068:	4605      	mov	r5, r0
  40106a:	460f      	mov	r7, r1
  40106c:	4616      	mov	r6, r2
  40106e:	b9a0      	cbnz	r0, 40109a <hif_receive+0x42>
	{
		if(isDone)
  401070:	b134      	cbz	r4, 401080 <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  401072:	2201      	movs	r2, #1
  401074:	4b31      	ldr	r3, [pc, #196]	; (40113c <hif_receive+0xe4>)
  401076:	701a      	strb	r2, [r3, #0]

			/* set RX done */
			ret = hif_set_rx_done();
  401078:	4b31      	ldr	r3, [pc, #196]	; (401140 <hif_receive+0xe8>)
  40107a:	4798      	blx	r3
  40107c:	4603      	mov	r3, r0
  40107e:	e058      	b.n	401132 <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  401080:	f240 2269 	movw	r2, #617	; 0x269
  401084:	492f      	ldr	r1, [pc, #188]	; (401144 <hif_receive+0xec>)
  401086:	4830      	ldr	r0, [pc, #192]	; (401148 <hif_receive+0xf0>)
  401088:	4c30      	ldr	r4, [pc, #192]	; (40114c <hif_receive+0xf4>)
  40108a:	47a0      	blx	r4
  40108c:	4830      	ldr	r0, [pc, #192]	; (401150 <hif_receive+0xf8>)
  40108e:	47a0      	blx	r4
  401090:	4830      	ldr	r0, [pc, #192]	; (401154 <hif_receive+0xfc>)
  401092:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  401094:	f06f 030b 	mvn.w	r3, #11
  401098:	e04b      	b.n	401132 <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  40109a:	4669      	mov	r1, sp
  40109c:	f241 0070 	movw	r0, #4208	; 0x1070
  4010a0:	4b2d      	ldr	r3, [pc, #180]	; (401158 <hif_receive+0x100>)
  4010a2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4010a4:	4603      	mov	r3, r0
  4010a6:	2800      	cmp	r0, #0
  4010a8:	d143      	bne.n	401132 <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  4010aa:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  4010ae:	a901      	add	r1, sp, #4
  4010b0:	f241 0084 	movw	r0, #4228	; 0x1084
  4010b4:	4b28      	ldr	r3, [pc, #160]	; (401158 <hif_receive+0x100>)
  4010b6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4010b8:	4603      	mov	r3, r0
  4010ba:	2800      	cmp	r0, #0
  4010bc:	d139      	bne.n	401132 <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  4010be:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  4010c2:	4546      	cmp	r6, r8
  4010c4:	d90e      	bls.n	4010e4 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  4010c6:	f240 227a 	movw	r2, #634	; 0x27a
  4010ca:	491e      	ldr	r1, [pc, #120]	; (401144 <hif_receive+0xec>)
  4010cc:	481e      	ldr	r0, [pc, #120]	; (401148 <hif_receive+0xf0>)
  4010ce:	4c1f      	ldr	r4, [pc, #124]	; (40114c <hif_receive+0xf4>)
  4010d0:	47a0      	blx	r4
  4010d2:	4642      	mov	r2, r8
  4010d4:	4631      	mov	r1, r6
  4010d6:	4821      	ldr	r0, [pc, #132]	; (40115c <hif_receive+0x104>)
  4010d8:	47a0      	blx	r4
  4010da:	481e      	ldr	r0, [pc, #120]	; (401154 <hif_receive+0xfc>)
  4010dc:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  4010de:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  4010e2:	e026      	b.n	401132 <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4010e4:	9b01      	ldr	r3, [sp, #4]
  4010e6:	429d      	cmp	r5, r3
  4010e8:	d304      	bcc.n	4010f4 <hif_receive+0x9c>
  4010ea:	eb05 0906 	add.w	r9, r5, r6
  4010ee:	4443      	add	r3, r8
  4010f0:	4599      	cmp	r9, r3
  4010f2:	d90c      	bls.n	40110e <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  4010f4:	f44f 7220 	mov.w	r2, #640	; 0x280
  4010f8:	4912      	ldr	r1, [pc, #72]	; (401144 <hif_receive+0xec>)
  4010fa:	4813      	ldr	r0, [pc, #76]	; (401148 <hif_receive+0xf0>)
  4010fc:	4c13      	ldr	r4, [pc, #76]	; (40114c <hif_receive+0xf4>)
  4010fe:	47a0      	blx	r4
  401100:	4817      	ldr	r0, [pc, #92]	; (401160 <hif_receive+0x108>)
  401102:	47a0      	blx	r4
  401104:	4813      	ldr	r0, [pc, #76]	; (401154 <hif_receive+0xfc>)
  401106:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  401108:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  40110c:	e011      	b.n	401132 <hif_receive+0xda>
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  40110e:	4632      	mov	r2, r6
  401110:	4639      	mov	r1, r7
  401112:	4628      	mov	r0, r5
  401114:	4b13      	ldr	r3, [pc, #76]	; (401164 <hif_receive+0x10c>)
  401116:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401118:	4603      	mov	r3, r0
  40111a:	b950      	cbnz	r0, 401132 <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  40111c:	9a01      	ldr	r2, [sp, #4]
  40111e:	4442      	add	r2, r8
  401120:	454a      	cmp	r2, r9
  401122:	d000      	beq.n	401126 <hif_receive+0xce>
  401124:	b12c      	cbz	r4, 401132 <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  401126:	2201      	movs	r2, #1
  401128:	4b04      	ldr	r3, [pc, #16]	; (40113c <hif_receive+0xe4>)
  40112a:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  40112c:	4b04      	ldr	r3, [pc, #16]	; (401140 <hif_receive+0xe8>)
  40112e:	4798      	blx	r3
  401130:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  401132:	4618      	mov	r0, r3
  401134:	b003      	add	sp, #12
  401136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40113a:	bf00      	nop
  40113c:	204008c0 	.word	0x204008c0
  401140:	00400a3d 	.word	0x00400a3d
  401144:	00408008 	.word	0x00408008
  401148:	00407fd0 	.word	0x00407fd0
  40114c:	0040458d 	.word	0x0040458d
  401150:	00408194 	.word	0x00408194
  401154:	00407ffc 	.word	0x00407ffc
  401158:	00401d05 	.word	0x00401d05
  40115c:	004081b4 	.word	0x004081b4
  401160:	004081f8 	.word	0x004081f8
  401164:	00401d1d 	.word	0x00401d1d

00401168 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  401168:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  40116a:	1e43      	subs	r3, r0, #1
  40116c:	2b06      	cmp	r3, #6
  40116e:	d81d      	bhi.n	4011ac <hif_register_cb+0x44>
  401170:	e8df f003 	tbb	[pc, r3]
  401174:	0c100408 	.word	0x0c100408
  401178:	141c      	.short	0x141c
  40117a:	18          	.byte	0x18
  40117b:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  40117c:	4b13      	ldr	r3, [pc, #76]	; (4011cc <hif_register_cb+0x64>)
  40117e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401180:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  401182:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401184:	4b12      	ldr	r3, [pc, #72]	; (4011d0 <hif_register_cb+0x68>)
  401186:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401188:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  40118a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  40118c:	4b11      	ldr	r3, [pc, #68]	; (4011d4 <hif_register_cb+0x6c>)
  40118e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401190:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  401192:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401194:	4b10      	ldr	r3, [pc, #64]	; (4011d8 <hif_register_cb+0x70>)
  401196:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401198:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  40119a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  40119c:	4b0f      	ldr	r3, [pc, #60]	; (4011dc <hif_register_cb+0x74>)
  40119e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  4011a0:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  4011a2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  4011a4:	4b0e      	ldr	r3, [pc, #56]	; (4011e0 <hif_register_cb+0x78>)
  4011a6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  4011a8:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  4011aa:	bd38      	pop	{r3, r4, r5, pc}
  4011ac:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  4011ae:	f240 22b9 	movw	r2, #697	; 0x2b9
  4011b2:	490c      	ldr	r1, [pc, #48]	; (4011e4 <hif_register_cb+0x7c>)
  4011b4:	480c      	ldr	r0, [pc, #48]	; (4011e8 <hif_register_cb+0x80>)
  4011b6:	4d0d      	ldr	r5, [pc, #52]	; (4011ec <hif_register_cb+0x84>)
  4011b8:	47a8      	blx	r5
  4011ba:	4621      	mov	r1, r4
  4011bc:	480c      	ldr	r0, [pc, #48]	; (4011f0 <hif_register_cb+0x88>)
  4011be:	47a8      	blx	r5
  4011c0:	480c      	ldr	r0, [pc, #48]	; (4011f4 <hif_register_cb+0x8c>)
  4011c2:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  4011c4:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  4011c8:	bd38      	pop	{r3, r4, r5, pc}
  4011ca:	bf00      	nop
  4011cc:	204008bc 	.word	0x204008bc
  4011d0:	204008a8 	.word	0x204008a8
  4011d4:	204008c4 	.word	0x204008c4
  4011d8:	204008b0 	.word	0x204008b0
  4011dc:	204008a4 	.word	0x204008a4
  4011e0:	204008b4 	.word	0x204008b4
  4011e4:	00408248 	.word	0x00408248
  4011e8:	00407fd0 	.word	0x00407fd0
  4011ec:	0040458d 	.word	0x0040458d
  4011f0:	0040823c 	.word	0x0040823c
  4011f4:	00407ffc 	.word	0x00407ffc

004011f8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  4011f8:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  4011fa:	2400      	movs	r4, #0
  4011fc:	4b09      	ldr	r3, [pc, #36]	; (401224 <hif_init+0x2c>)
  4011fe:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  401200:	4b09      	ldr	r3, [pc, #36]	; (401228 <hif_init+0x30>)
  401202:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  401204:	4b09      	ldr	r3, [pc, #36]	; (40122c <hif_init+0x34>)
  401206:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401208:	4b09      	ldr	r3, [pc, #36]	; (401230 <hif_init+0x38>)
  40120a:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  40120c:	4b09      	ldr	r3, [pc, #36]	; (401234 <hif_init+0x3c>)
  40120e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  401210:	4809      	ldr	r0, [pc, #36]	; (401238 <hif_init+0x40>)
  401212:	4b0a      	ldr	r3, [pc, #40]	; (40123c <hif_init+0x44>)
  401214:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401216:	490a      	ldr	r1, [pc, #40]	; (401240 <hif_init+0x48>)
  401218:	2003      	movs	r0, #3
  40121a:	4b0a      	ldr	r3, [pc, #40]	; (401244 <hif_init+0x4c>)
  40121c:	4798      	blx	r3

	return M2M_SUCCESS;
}
  40121e:	4620      	mov	r0, r4
  401220:	bd10      	pop	{r4, pc}
  401222:	bf00      	nop
  401224:	204008a8 	.word	0x204008a8
  401228:	204008bc 	.word	0x204008bc
  40122c:	204008c8 	.word	0x204008c8
  401230:	204008b8 	.word	0x204008b8
  401234:	204008ac 	.word	0x204008ac
  401238:	00400a29 	.word	0x00400a29
  40123c:	00400715 	.word	0x00400715
  401240:	00400a39 	.word	0x00400a39
  401244:	00401169 	.word	0x00401169

00401248 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401248:	b530      	push	{r4, r5, lr}
  40124a:	b09f      	sub	sp, #124	; 0x7c
  40124c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  40124e:	282c      	cmp	r0, #44	; 0x2c
  401250:	d111      	bne.n	401276 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  401252:	2300      	movs	r3, #0
  401254:	2204      	movs	r2, #4
  401256:	a903      	add	r1, sp, #12
  401258:	4628      	mov	r0, r5
  40125a:	4c90      	ldr	r4, [pc, #576]	; (40149c <m2m_wifi_cb+0x254>)
  40125c:	47a0      	blx	r4
  40125e:	2800      	cmp	r0, #0
  401260:	f040 8119 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401264:	4b8e      	ldr	r3, [pc, #568]	; (4014a0 <m2m_wifi_cb+0x258>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	2b00      	cmp	r3, #0
  40126a:	f000 8114 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  40126e:	a903      	add	r1, sp, #12
  401270:	202c      	movs	r0, #44	; 0x2c
  401272:	4798      	blx	r3
  401274:	e10f      	b.n	401496 <m2m_wifi_cb+0x24e>
  401276:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  401278:	281b      	cmp	r0, #27
  40127a:	d111      	bne.n	4012a0 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  40127c:	2300      	movs	r3, #0
  40127e:	2208      	movs	r2, #8
  401280:	a903      	add	r1, sp, #12
  401282:	4628      	mov	r0, r5
  401284:	4c85      	ldr	r4, [pc, #532]	; (40149c <m2m_wifi_cb+0x254>)
  401286:	47a0      	blx	r4
  401288:	2800      	cmp	r0, #0
  40128a:	f040 8104 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  40128e:	4b84      	ldr	r3, [pc, #528]	; (4014a0 <m2m_wifi_cb+0x258>)
  401290:	681b      	ldr	r3, [r3, #0]
  401292:	2b00      	cmp	r3, #0
  401294:	f000 80ff 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401298:	a903      	add	r1, sp, #12
  40129a:	201b      	movs	r0, #27
  40129c:	4798      	blx	r3
  40129e:	e0fa      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4012a0:	2806      	cmp	r0, #6
  4012a2:	d111      	bne.n	4012c8 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  4012a4:	2301      	movs	r3, #1
  4012a6:	2230      	movs	r2, #48	; 0x30
  4012a8:	a903      	add	r1, sp, #12
  4012aa:	4628      	mov	r0, r5
  4012ac:	4c7b      	ldr	r4, [pc, #492]	; (40149c <m2m_wifi_cb+0x254>)
  4012ae:	47a0      	blx	r4
  4012b0:	2800      	cmp	r0, #0
  4012b2:	f040 80f0 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  4012b6:	4b7a      	ldr	r3, [pc, #488]	; (4014a0 <m2m_wifi_cb+0x258>)
  4012b8:	681b      	ldr	r3, [r3, #0]
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	f000 80eb 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  4012c0:	a903      	add	r1, sp, #12
  4012c2:	2006      	movs	r0, #6
  4012c4:	4798      	blx	r3
  4012c6:	e0e6      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4012c8:	280e      	cmp	r0, #14
  4012ca:	f000 80e4 	beq.w	401496 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4012ce:	2832      	cmp	r0, #50	; 0x32
  4012d0:	d111      	bne.n	4012f6 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  4012d2:	2300      	movs	r3, #0
  4012d4:	2210      	movs	r2, #16
  4012d6:	a903      	add	r1, sp, #12
  4012d8:	4628      	mov	r0, r5
  4012da:	4c70      	ldr	r4, [pc, #448]	; (40149c <m2m_wifi_cb+0x254>)
  4012dc:	47a0      	blx	r4
  4012de:	2800      	cmp	r0, #0
  4012e0:	f040 80d9 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4012e4:	4b6e      	ldr	r3, [pc, #440]	; (4014a0 <m2m_wifi_cb+0x258>)
  4012e6:	681b      	ldr	r3, [r3, #0]
  4012e8:	2b00      	cmp	r3, #0
  4012ea:	f000 80d4 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  4012ee:	a903      	add	r1, sp, #12
  4012f0:	2032      	movs	r0, #50	; 0x32
  4012f2:	4798      	blx	r3
  4012f4:	e0cf      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  4012f6:	282f      	cmp	r0, #47	; 0x2f
  4012f8:	d116      	bne.n	401328 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  4012fa:	2264      	movs	r2, #100	; 0x64
  4012fc:	2100      	movs	r1, #0
  4012fe:	a803      	add	r0, sp, #12
  401300:	4b68      	ldr	r3, [pc, #416]	; (4014a4 <m2m_wifi_cb+0x25c>)
  401302:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401304:	2300      	movs	r3, #0
  401306:	2264      	movs	r2, #100	; 0x64
  401308:	a903      	add	r1, sp, #12
  40130a:	4628      	mov	r0, r5
  40130c:	4c63      	ldr	r4, [pc, #396]	; (40149c <m2m_wifi_cb+0x254>)
  40130e:	47a0      	blx	r4
  401310:	2800      	cmp	r0, #0
  401312:	f040 80c0 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401316:	4b62      	ldr	r3, [pc, #392]	; (4014a0 <m2m_wifi_cb+0x258>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	2b00      	cmp	r3, #0
  40131c:	f000 80bb 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401320:	a903      	add	r1, sp, #12
  401322:	202f      	movs	r0, #47	; 0x2f
  401324:	4798      	blx	r3
  401326:	e0b6      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401328:	2834      	cmp	r0, #52	; 0x34
  40132a:	d120      	bne.n	40136e <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  40132c:	2300      	movs	r3, #0
  40132e:	2204      	movs	r2, #4
  401330:	a903      	add	r1, sp, #12
  401332:	4628      	mov	r0, r5
  401334:	4c59      	ldr	r4, [pc, #356]	; (40149c <m2m_wifi_cb+0x254>)
  401336:	47a0      	blx	r4
  401338:	2800      	cmp	r0, #0
  40133a:	f040 80ac 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  40133e:	485a      	ldr	r0, [pc, #360]	; (4014a8 <m2m_wifi_cb+0x260>)
  401340:	4c5a      	ldr	r4, [pc, #360]	; (4014ac <m2m_wifi_cb+0x264>)
  401342:	47a0      	blx	r4
  401344:	9903      	ldr	r1, [sp, #12]
  401346:	0e0b      	lsrs	r3, r1, #24
  401348:	9300      	str	r3, [sp, #0]
  40134a:	f3c1 4307 	ubfx	r3, r1, #16, #8
  40134e:	f3c1 2207 	ubfx	r2, r1, #8, #8
  401352:	b2c9      	uxtb	r1, r1
  401354:	4856      	ldr	r0, [pc, #344]	; (4014b0 <m2m_wifi_cb+0x268>)
  401356:	47a0      	blx	r4
  401358:	4856      	ldr	r0, [pc, #344]	; (4014b4 <m2m_wifi_cb+0x26c>)
  40135a:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  40135c:	4b50      	ldr	r3, [pc, #320]	; (4014a0 <m2m_wifi_cb+0x258>)
  40135e:	681b      	ldr	r3, [r3, #0]
  401360:	2b00      	cmp	r3, #0
  401362:	f000 8098 	beq.w	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401366:	2100      	movs	r1, #0
  401368:	2034      	movs	r0, #52	; 0x34
  40136a:	4798      	blx	r3
  40136c:	e093      	b.n	401496 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  40136e:	2811      	cmp	r0, #17
  401370:	d116      	bne.n	4013a0 <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  401372:	2300      	movs	r3, #0
  401374:	4a50      	ldr	r2, [pc, #320]	; (4014b8 <m2m_wifi_cb+0x270>)
  401376:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  401378:	2204      	movs	r2, #4
  40137a:	a903      	add	r1, sp, #12
  40137c:	4628      	mov	r0, r5
  40137e:	4c47      	ldr	r4, [pc, #284]	; (40149c <m2m_wifi_cb+0x254>)
  401380:	47a0      	blx	r4
  401382:	2800      	cmp	r0, #0
  401384:	f040 8087 	bne.w	401496 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  401388:	f89d 200c 	ldrb.w	r2, [sp, #12]
  40138c:	4b4b      	ldr	r3, [pc, #300]	; (4014bc <m2m_wifi_cb+0x274>)
  40138e:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  401390:	4b43      	ldr	r3, [pc, #268]	; (4014a0 <m2m_wifi_cb+0x258>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	2b00      	cmp	r3, #0
  401396:	d07e      	beq.n	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401398:	a903      	add	r1, sp, #12
  40139a:	2011      	movs	r0, #17
  40139c:	4798      	blx	r3
  40139e:	e07a      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  4013a0:	2813      	cmp	r0, #19
  4013a2:	d10f      	bne.n	4013c4 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  4013a4:	2300      	movs	r3, #0
  4013a6:	222c      	movs	r2, #44	; 0x2c
  4013a8:	a903      	add	r1, sp, #12
  4013aa:	4628      	mov	r0, r5
  4013ac:	4c3b      	ldr	r4, [pc, #236]	; (40149c <m2m_wifi_cb+0x254>)
  4013ae:	47a0      	blx	r4
  4013b0:	2800      	cmp	r0, #0
  4013b2:	d170      	bne.n	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4013b4:	4b3a      	ldr	r3, [pc, #232]	; (4014a0 <m2m_wifi_cb+0x258>)
  4013b6:	681b      	ldr	r3, [r3, #0]
  4013b8:	2b00      	cmp	r3, #0
  4013ba:	d06c      	beq.n	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  4013bc:	a903      	add	r1, sp, #12
  4013be:	2013      	movs	r0, #19
  4013c0:	4798      	blx	r3
  4013c2:	e068      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  4013c4:	2804      	cmp	r0, #4
  4013c6:	d10f      	bne.n	4013e8 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4013c8:	2300      	movs	r3, #0
  4013ca:	2204      	movs	r2, #4
  4013cc:	a91c      	add	r1, sp, #112	; 0x70
  4013ce:	4628      	mov	r0, r5
  4013d0:	4c32      	ldr	r4, [pc, #200]	; (40149c <m2m_wifi_cb+0x254>)
  4013d2:	47a0      	blx	r4
  4013d4:	2800      	cmp	r0, #0
  4013d6:	d15e      	bne.n	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4013d8:	4b31      	ldr	r3, [pc, #196]	; (4014a0 <m2m_wifi_cb+0x258>)
  4013da:	681b      	ldr	r3, [r3, #0]
  4013dc:	2b00      	cmp	r3, #0
  4013de:	d05a      	beq.n	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  4013e0:	a91c      	add	r1, sp, #112	; 0x70
  4013e2:	2004      	movs	r0, #4
  4013e4:	4798      	blx	r3
  4013e6:	e056      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  4013e8:	2865      	cmp	r0, #101	; 0x65
  4013ea:	d10f      	bne.n	40140c <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4013ec:	2300      	movs	r3, #0
  4013ee:	2204      	movs	r2, #4
  4013f0:	a91c      	add	r1, sp, #112	; 0x70
  4013f2:	4628      	mov	r0, r5
  4013f4:	4c29      	ldr	r4, [pc, #164]	; (40149c <m2m_wifi_cb+0x254>)
  4013f6:	47a0      	blx	r4
  4013f8:	2800      	cmp	r0, #0
  4013fa:	d14c      	bne.n	401496 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4013fc:	4b28      	ldr	r3, [pc, #160]	; (4014a0 <m2m_wifi_cb+0x258>)
  4013fe:	681b      	ldr	r3, [r3, #0]
  401400:	2b00      	cmp	r3, #0
  401402:	d048      	beq.n	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401404:	a91c      	add	r1, sp, #112	; 0x70
  401406:	2065      	movs	r0, #101	; 0x65
  401408:	4798      	blx	r3
  40140a:	e044      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  40140c:	2809      	cmp	r0, #9
  40140e:	d10f      	bne.n	401430 <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401410:	2301      	movs	r3, #1
  401412:	2264      	movs	r2, #100	; 0x64
  401414:	a903      	add	r1, sp, #12
  401416:	4628      	mov	r0, r5
  401418:	4c20      	ldr	r4, [pc, #128]	; (40149c <m2m_wifi_cb+0x254>)
  40141a:	47a0      	blx	r4
  40141c:	2800      	cmp	r0, #0
  40141e:	d13a      	bne.n	401496 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401420:	4b1f      	ldr	r3, [pc, #124]	; (4014a0 <m2m_wifi_cb+0x258>)
  401422:	681b      	ldr	r3, [r3, #0]
  401424:	2b00      	cmp	r3, #0
  401426:	d036      	beq.n	401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401428:	a903      	add	r1, sp, #12
  40142a:	2009      	movs	r0, #9
  40142c:	4798      	blx	r3
  40142e:	e032      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  401430:	282a      	cmp	r0, #42	; 0x2a
  401432:	d10d      	bne.n	401450 <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401434:	2301      	movs	r3, #1
  401436:	2204      	movs	r2, #4
  401438:	a903      	add	r1, sp, #12
  40143a:	4628      	mov	r0, r5
  40143c:	4c17      	ldr	r4, [pc, #92]	; (40149c <m2m_wifi_cb+0x254>)
  40143e:	47a0      	blx	r4
  401440:	bb48      	cbnz	r0, 401496 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401442:	4b17      	ldr	r3, [pc, #92]	; (4014a0 <m2m_wifi_cb+0x258>)
  401444:	681b      	ldr	r3, [r3, #0]
  401446:	b333      	cbz	r3, 401496 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  401448:	a903      	add	r1, sp, #12
  40144a:	202a      	movs	r0, #42	; 0x2a
  40144c:	4798      	blx	r3
  40144e:	e022      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401450:	2820      	cmp	r0, #32
  401452:	d115      	bne.n	401480 <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401454:	2300      	movs	r3, #0
  401456:	2208      	movs	r2, #8
  401458:	a903      	add	r1, sp, #12
  40145a:	4628      	mov	r0, r5
  40145c:	4c0f      	ldr	r4, [pc, #60]	; (40149c <m2m_wifi_cb+0x254>)
  40145e:	47a0      	blx	r4
  401460:	b9c8      	cbnz	r0, 401496 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401462:	2301      	movs	r3, #1
  401464:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401468:	9903      	ldr	r1, [sp, #12]
  40146a:	f105 0008 	add.w	r0, r5, #8
  40146e:	47a0      	blx	r4
  401470:	b988      	cbnz	r0, 401496 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  401472:	4b0b      	ldr	r3, [pc, #44]	; (4014a0 <m2m_wifi_cb+0x258>)
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	b173      	cbz	r3, 401496 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401478:	a903      	add	r1, sp, #12
  40147a:	2020      	movs	r0, #32
  40147c:	4798      	blx	r3
  40147e:	e00a      	b.n	401496 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401480:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401484:	490e      	ldr	r1, [pc, #56]	; (4014c0 <m2m_wifi_cb+0x278>)
  401486:	480f      	ldr	r0, [pc, #60]	; (4014c4 <m2m_wifi_cb+0x27c>)
  401488:	4d08      	ldr	r5, [pc, #32]	; (4014ac <m2m_wifi_cb+0x264>)
  40148a:	47a8      	blx	r5
  40148c:	4621      	mov	r1, r4
  40148e:	480e      	ldr	r0, [pc, #56]	; (4014c8 <m2m_wifi_cb+0x280>)
  401490:	47a8      	blx	r5
  401492:	4808      	ldr	r0, [pc, #32]	; (4014b4 <m2m_wifi_cb+0x26c>)
  401494:	47a8      	blx	r5
	}
}
  401496:	b01f      	add	sp, #124	; 0x7c
  401498:	bd30      	pop	{r4, r5, pc}
  40149a:	bf00      	nop
  40149c:	00401059 	.word	0x00401059
  4014a0:	204008cc 	.word	0x204008cc
  4014a4:	004009fd 	.word	0x004009fd
  4014a8:	00408294 	.word	0x00408294
  4014ac:	0040458d 	.word	0x0040458d
  4014b0:	004082a0 	.word	0x004082a0
  4014b4:	00407ffc 	.word	0x00407ffc
  4014b8:	204008d0 	.word	0x204008d0
  4014bc:	204008d1 	.word	0x204008d1
  4014c0:	00408288 	.word	0x00408288
  4014c4:	00407fd0 	.word	0x00407fd0
  4014c8:	004082c0 	.word	0x004082c0

004014cc <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  4014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4014ce:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  4014d0:	2301      	movs	r3, #1
  4014d2:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  4014d6:	2800      	cmp	r0, #0
  4014d8:	d04e      	beq.n	401578 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  4014da:	6802      	ldr	r2, [r0, #0]
  4014dc:	4b29      	ldr	r3, [pc, #164]	; (401584 <m2m_wifi_init+0xb8>)
  4014de:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  4014e0:	2200      	movs	r2, #0
  4014e2:	4b29      	ldr	r3, [pc, #164]	; (401588 <m2m_wifi_init+0xbc>)
  4014e4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  4014e6:	f10d 0007 	add.w	r0, sp, #7
  4014ea:	4b28      	ldr	r3, [pc, #160]	; (40158c <m2m_wifi_init+0xc0>)
  4014ec:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  4014ee:	4604      	mov	r4, r0
  4014f0:	2800      	cmp	r0, #0
  4014f2:	d143      	bne.n	40157c <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  4014f4:	4b26      	ldr	r3, [pc, #152]	; (401590 <m2m_wifi_init+0xc4>)
  4014f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  4014f8:	4604      	mov	r4, r0
  4014fa:	2800      	cmp	r0, #0
  4014fc:	d138      	bne.n	401570 <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  4014fe:	4925      	ldr	r1, [pc, #148]	; (401594 <m2m_wifi_init+0xc8>)
  401500:	2001      	movs	r0, #1
  401502:	4b25      	ldr	r3, [pc, #148]	; (401598 <m2m_wifi_init+0xcc>)
  401504:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401506:	a802      	add	r0, sp, #8
  401508:	4b24      	ldr	r3, [pc, #144]	; (40159c <m2m_wifi_init+0xd0>)
  40150a:	4798      	blx	r3
  40150c:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40150e:	4f24      	ldr	r7, [pc, #144]	; (4015a0 <m2m_wifi_init+0xd4>)
  401510:	4638      	mov	r0, r7
  401512:	4d24      	ldr	r5, [pc, #144]	; (4015a4 <m2m_wifi_init+0xd8>)
  401514:	47a8      	blx	r5
  401516:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40151a:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40151e:	f89d 100c 	ldrb.w	r1, [sp, #12]
  401522:	4821      	ldr	r0, [pc, #132]	; (4015a8 <m2m_wifi_init+0xdc>)
  401524:	47a8      	blx	r5
  401526:	4e21      	ldr	r6, [pc, #132]	; (4015ac <m2m_wifi_init+0xe0>)
  401528:	4630      	mov	r0, r6
  40152a:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  40152c:	4638      	mov	r0, r7
  40152e:	47a8      	blx	r5
  401530:	f89d 3011 	ldrb.w	r3, [sp, #17]
  401534:	f89d 2010 	ldrb.w	r2, [sp, #16]
  401538:	f89d 100f 	ldrb.w	r1, [sp, #15]
  40153c:	481c      	ldr	r0, [pc, #112]	; (4015b0 <m2m_wifi_init+0xe4>)
  40153e:	47a8      	blx	r5
  401540:	4630      	mov	r0, r6
  401542:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401544:	4638      	mov	r0, r7
  401546:	47a8      	blx	r5
  401548:	2300      	movs	r3, #0
  40154a:	2203      	movs	r2, #3
  40154c:	2113      	movs	r1, #19
  40154e:	4819      	ldr	r0, [pc, #100]	; (4015b4 <m2m_wifi_init+0xe8>)
  401550:	47a8      	blx	r5
  401552:	4630      	mov	r0, r6
  401554:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  401556:	f114 0f0d 	cmn.w	r4, #13
  40155a:	d10f      	bne.n	40157c <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  40155c:	f240 12d5 	movw	r2, #469	; 0x1d5
  401560:	4915      	ldr	r1, [pc, #84]	; (4015b8 <m2m_wifi_init+0xec>)
  401562:	4816      	ldr	r0, [pc, #88]	; (4015bc <m2m_wifi_init+0xf0>)
  401564:	47a8      	blx	r5
  401566:	4816      	ldr	r0, [pc, #88]	; (4015c0 <m2m_wifi_init+0xf4>)
  401568:	47a8      	blx	r5
  40156a:	4630      	mov	r0, r6
  40156c:	47a8      	blx	r5
  40156e:	e005      	b.n	40157c <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401570:	2000      	movs	r0, #0
  401572:	4b14      	ldr	r3, [pc, #80]	; (4015c4 <m2m_wifi_init+0xf8>)
  401574:	4798      	blx	r3
  401576:	e001      	b.n	40157c <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  401578:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40157c:	4620      	mov	r0, r4
  40157e:	b00b      	add	sp, #44	; 0x2c
  401580:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401582:	bf00      	nop
  401584:	204008cc 	.word	0x204008cc
  401588:	204008d0 	.word	0x204008d0
  40158c:	00401e89 	.word	0x00401e89
  401590:	004011f9 	.word	0x004011f9
  401594:	00401249 	.word	0x00401249
  401598:	00401169 	.word	0x00401169
  40159c:	00401ddd 	.word	0x00401ddd
  4015a0:	00408294 	.word	0x00408294
  4015a4:	0040458d 	.word	0x0040458d
  4015a8:	00408378 	.word	0x00408378
  4015ac:	00407ffc 	.word	0x00407ffc
  4015b0:	00408394 	.word	0x00408394
  4015b4:	004083b0 	.word	0x004083b0
  4015b8:	004085bc 	.word	0x004085bc
  4015bc:	00407fd0 	.word	0x00407fd0
  4015c0:	004083cc 	.word	0x004083cc
  4015c4:	00401f51 	.word	0x00401f51

004015c8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4015c8:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4015ca:	4b01      	ldr	r3, [pc, #4]	; (4015d0 <m2m_wifi_handle_events+0x8>)
  4015cc:	4798      	blx	r3
}
  4015ce:	bd08      	pop	{r3, pc}
  4015d0:	00400d39 	.word	0x00400d39

004015d4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4015d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015d8:	b0a0      	sub	sp, #128	; 0x80
  4015da:	4680      	mov	r8, r0
  4015dc:	460d      	mov	r5, r1
  4015de:	4614      	mov	r4, r2
  4015e0:	461e      	mov	r6, r3
  4015e2:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4015e6:	2a01      	cmp	r2, #1
  4015e8:	d045      	beq.n	401676 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  4015ea:	b963      	cbnz	r3, 401606 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  4015ec:	f240 2203 	movw	r2, #515	; 0x203
  4015f0:	497a      	ldr	r1, [pc, #488]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  4015f2:	487b      	ldr	r0, [pc, #492]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  4015f4:	4c7b      	ldr	r4, [pc, #492]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  4015f6:	47a0      	blx	r4
  4015f8:	487b      	ldr	r0, [pc, #492]	; (4017e8 <m2m_wifi_connect_sc+0x214>)
  4015fa:	47a0      	blx	r4
  4015fc:	487b      	ldr	r0, [pc, #492]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  4015fe:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401600:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401604:	e0e7      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401606:	2a02      	cmp	r2, #2
  401608:	d135      	bne.n	401676 <m2m_wifi_connect_sc+0xa2>
  40160a:	4618      	mov	r0, r3
  40160c:	4b78      	ldr	r3, [pc, #480]	; (4017f0 <m2m_wifi_connect_sc+0x21c>)
  40160e:	4798      	blx	r3
  401610:	2840      	cmp	r0, #64	; 0x40
  401612:	d130      	bne.n	401676 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401614:	7833      	ldrb	r3, [r6, #0]
  401616:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40161a:	b2d2      	uxtb	r2, r2
  40161c:	2a36      	cmp	r2, #54	; 0x36
  40161e:	d81b      	bhi.n	401658 <m2m_wifi_connect_sc+0x84>
  401620:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401624:	b2d2      	uxtb	r2, r2
  401626:	2a06      	cmp	r2, #6
  401628:	d916      	bls.n	401658 <m2m_wifi_connect_sc+0x84>
  40162a:	3b47      	subs	r3, #71	; 0x47
  40162c:	b2db      	uxtb	r3, r3
  40162e:	2b19      	cmp	r3, #25
  401630:	d912      	bls.n	401658 <m2m_wifi_connect_sc+0x84>
  401632:	4631      	mov	r1, r6
  401634:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  401638:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40163c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401640:	b2d2      	uxtb	r2, r2
  401642:	2a06      	cmp	r2, #6
  401644:	d908      	bls.n	401658 <m2m_wifi_connect_sc+0x84>
  401646:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40164a:	b2d2      	uxtb	r2, r2
  40164c:	2a36      	cmp	r2, #54	; 0x36
  40164e:	d803      	bhi.n	401658 <m2m_wifi_connect_sc+0x84>
  401650:	3b47      	subs	r3, #71	; 0x47
  401652:	b2db      	uxtb	r3, r3
  401654:	2b19      	cmp	r3, #25
  401656:	d80c      	bhi.n	401672 <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  401658:	f240 220f 	movw	r2, #527	; 0x20f
  40165c:	495f      	ldr	r1, [pc, #380]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  40165e:	4860      	ldr	r0, [pc, #384]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  401660:	4c60      	ldr	r4, [pc, #384]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  401662:	47a0      	blx	r4
  401664:	4863      	ldr	r0, [pc, #396]	; (4017f4 <m2m_wifi_connect_sc+0x220>)
  401666:	47a0      	blx	r4
  401668:	4860      	ldr	r0, [pc, #384]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  40166a:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  40166c:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  401670:	e0b1      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  401672:	4288      	cmp	r0, r1
  401674:	d1e0      	bne.n	401638 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  401676:	1e6b      	subs	r3, r5, #1
  401678:	b2db      	uxtb	r3, r3
  40167a:	2b1f      	cmp	r3, #31
  40167c:	d90c      	bls.n	401698 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  40167e:	f240 2219 	movw	r2, #537	; 0x219
  401682:	4956      	ldr	r1, [pc, #344]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  401684:	4856      	ldr	r0, [pc, #344]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  401686:	4c57      	ldr	r4, [pc, #348]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  401688:	47a0      	blx	r4
  40168a:	485b      	ldr	r0, [pc, #364]	; (4017f8 <m2m_wifi_connect_sc+0x224>)
  40168c:	47a0      	blx	r4
  40168e:	4857      	ldr	r0, [pc, #348]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  401690:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401692:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401696:	e09e      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401698:	2fff      	cmp	r7, #255	; 0xff
  40169a:	d00e      	beq.n	4016ba <m2m_wifi_connect_sc+0xe6>
  40169c:	2f0d      	cmp	r7, #13
  40169e:	d90c      	bls.n	4016ba <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  4016a0:	f240 2222 	movw	r2, #546	; 0x222
  4016a4:	494d      	ldr	r1, [pc, #308]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  4016a6:	484e      	ldr	r0, [pc, #312]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  4016a8:	4c4e      	ldr	r4, [pc, #312]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  4016aa:	47a0      	blx	r4
  4016ac:	4853      	ldr	r0, [pc, #332]	; (4017fc <m2m_wifi_connect_sc+0x228>)
  4016ae:	47a0      	blx	r4
  4016b0:	484e      	ldr	r0, [pc, #312]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  4016b2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4016b4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4016b8:	e08d      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4016ba:	462a      	mov	r2, r5
  4016bc:	4641      	mov	r1, r8
  4016be:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4016c2:	4b4f      	ldr	r3, [pc, #316]	; (401800 <m2m_wifi_connect_sc+0x22c>)
  4016c4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4016c6:	ab20      	add	r3, sp, #128	; 0x80
  4016c8:	441d      	add	r5, r3
  4016ca:	2300      	movs	r3, #0
  4016cc:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4016d0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4016d4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4016d8:	3300      	adds	r3, #0
  4016da:	bf18      	it	ne
  4016dc:	2301      	movne	r3, #1
  4016de:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4016e2:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4016e6:	2c03      	cmp	r4, #3
  4016e8:	d138      	bne.n	40175c <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4016ea:	7833      	ldrb	r3, [r6, #0]
  4016ec:	3b01      	subs	r3, #1
  4016ee:	b2db      	uxtb	r3, r3
  4016f0:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4016f4:	2b03      	cmp	r3, #3
  4016f6:	d90e      	bls.n	401716 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4016f8:	f240 2239 	movw	r2, #569	; 0x239
  4016fc:	4937      	ldr	r1, [pc, #220]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  4016fe:	4838      	ldr	r0, [pc, #224]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  401700:	4c38      	ldr	r4, [pc, #224]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  401702:	47a0      	blx	r4
  401704:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401708:	483e      	ldr	r0, [pc, #248]	; (401804 <m2m_wifi_connect_sc+0x230>)
  40170a:	47a0      	blx	r4
  40170c:	4837      	ldr	r0, [pc, #220]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  40170e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401710:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401714:	e05f      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401716:	7872      	ldrb	r2, [r6, #1]
  401718:	1e53      	subs	r3, r2, #1
  40171a:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40171e:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  401722:	2b0b      	cmp	r3, #11
  401724:	d00e      	beq.n	401744 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401726:	f44f 7210 	mov.w	r2, #576	; 0x240
  40172a:	492c      	ldr	r1, [pc, #176]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  40172c:	482c      	ldr	r0, [pc, #176]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  40172e:	4c2d      	ldr	r4, [pc, #180]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  401730:	47a0      	blx	r4
  401732:	f89d 1015 	ldrb.w	r1, [sp, #21]
  401736:	4834      	ldr	r0, [pc, #208]	; (401808 <m2m_wifi_connect_sc+0x234>)
  401738:	47a0      	blx	r4
  40173a:	482c      	ldr	r0, [pc, #176]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  40173c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40173e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401742:	e048      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  401744:	1cb1      	adds	r1, r6, #2
  401746:	f10d 0016 	add.w	r0, sp, #22
  40174a:	4b2d      	ldr	r3, [pc, #180]	; (401800 <m2m_wifi_connect_sc+0x22c>)
  40174c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40174e:	7873      	ldrb	r3, [r6, #1]
  401750:	aa20      	add	r2, sp, #128	; 0x80
  401752:	4413      	add	r3, r2
  401754:	2200      	movs	r2, #0
  401756:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40175a:	e032      	b.n	4017c2 <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40175c:	2c02      	cmp	r4, #2
  40175e:	d119      	bne.n	401794 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401760:	4630      	mov	r0, r6
  401762:	4b23      	ldr	r3, [pc, #140]	; (4017f0 <m2m_wifi_connect_sc+0x21c>)
  401764:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  401766:	1e43      	subs	r3, r0, #1
  401768:	b29b      	uxth	r3, r3
  40176a:	2b3f      	cmp	r3, #63	; 0x3f
  40176c:	d90c      	bls.n	401788 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  40176e:	f240 224f 	movw	r2, #591	; 0x24f
  401772:	491a      	ldr	r1, [pc, #104]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  401774:	481a      	ldr	r0, [pc, #104]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  401776:	4c1b      	ldr	r4, [pc, #108]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  401778:	47a0      	blx	r4
  40177a:	4824      	ldr	r0, [pc, #144]	; (40180c <m2m_wifi_connect_sc+0x238>)
  40177c:	47a0      	blx	r4
  40177e:	481b      	ldr	r0, [pc, #108]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  401780:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401782:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401786:	e026      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  401788:	1c42      	adds	r2, r0, #1
  40178a:	4631      	mov	r1, r6
  40178c:	a805      	add	r0, sp, #20
  40178e:	4b1c      	ldr	r3, [pc, #112]	; (401800 <m2m_wifi_connect_sc+0x22c>)
  401790:	4798      	blx	r3
  401792:	e016      	b.n	4017c2 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401794:	2c04      	cmp	r4, #4
  401796:	d105      	bne.n	4017a4 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401798:	223e      	movs	r2, #62	; 0x3e
  40179a:	4631      	mov	r1, r6
  40179c:	a805      	add	r0, sp, #20
  40179e:	4b18      	ldr	r3, [pc, #96]	; (401800 <m2m_wifi_connect_sc+0x22c>)
  4017a0:	4798      	blx	r3
  4017a2:	e00e      	b.n	4017c2 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4017a4:	2c01      	cmp	r4, #1
  4017a6:	d00c      	beq.n	4017c2 <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  4017a8:	f240 225f 	movw	r2, #607	; 0x25f
  4017ac:	490b      	ldr	r1, [pc, #44]	; (4017dc <m2m_wifi_connect_sc+0x208>)
  4017ae:	480c      	ldr	r0, [pc, #48]	; (4017e0 <m2m_wifi_connect_sc+0x20c>)
  4017b0:	4c0c      	ldr	r4, [pc, #48]	; (4017e4 <m2m_wifi_connect_sc+0x210>)
  4017b2:	47a0      	blx	r4
  4017b4:	4816      	ldr	r0, [pc, #88]	; (401810 <m2m_wifi_connect_sc+0x23c>)
  4017b6:	47a0      	blx	r4
  4017b8:	480c      	ldr	r0, [pc, #48]	; (4017ec <m2m_wifi_connect_sc+0x218>)
  4017ba:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4017bc:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4017c0:	e009      	b.n	4017d6 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4017c2:	2300      	movs	r3, #0
  4017c4:	9302      	str	r3, [sp, #8]
  4017c6:	9301      	str	r3, [sp, #4]
  4017c8:	9300      	str	r3, [sp, #0]
  4017ca:	236c      	movs	r3, #108	; 0x6c
  4017cc:	aa05      	add	r2, sp, #20
  4017ce:	2128      	movs	r1, #40	; 0x28
  4017d0:	2001      	movs	r0, #1
  4017d2:	4c10      	ldr	r4, [pc, #64]	; (401814 <m2m_wifi_connect_sc+0x240>)
  4017d4:	47a0      	blx	r4

ERR1:
	return ret;
}
  4017d6:	b020      	add	sp, #128	; 0x80
  4017d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017dc:	00408274 	.word	0x00408274
  4017e0:	00407fd0 	.word	0x00407fd0
  4017e4:	0040458d 	.word	0x0040458d
  4017e8:	004083e8 	.word	0x004083e8
  4017ec:	00407ffc 	.word	0x00407ffc
  4017f0:	00400a0d 	.word	0x00400a0d
  4017f4:	004083fc 	.word	0x004083fc
  4017f8:	0040840c 	.word	0x0040840c
  4017fc:	00408420 	.word	0x00408420
  401800:	004009e9 	.word	0x004009e9
  401804:	0040842c 	.word	0x0040842c
  401808:	00408448 	.word	0x00408448
  40180c:	00408464 	.word	0x00408464
  401810:	00408480 	.word	0x00408480
  401814:	00400b61 	.word	0x00400b61

00401818 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401818:	b510      	push	{r4, lr}
  40181a:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  40181c:	2400      	movs	r4, #0
  40181e:	9401      	str	r4, [sp, #4]
  401820:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401824:	9400      	str	r4, [sp, #0]
  401826:	4c02      	ldr	r4, [pc, #8]	; (401830 <m2m_wifi_connect+0x18>)
  401828:	47a0      	blx	r4
}
  40182a:	b002      	add	sp, #8
  40182c:	bd10      	pop	{r4, pc}
  40182e:	bf00      	nop
  401830:	004015d5 	.word	0x004015d5

00401834 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  401834:	2000      	movs	r0, #0
  401836:	4770      	bx	lr

00401838 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  401838:	b5f0      	push	{r4, r5, r6, r7, lr}
  40183a:	b083      	sub	sp, #12
  40183c:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40183e:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  401842:	4e0a      	ldr	r6, [pc, #40]	; (40186c <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401844:	4f0a      	ldr	r7, [pc, #40]	; (401870 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401846:	4621      	mov	r1, r4
  401848:	4628      	mov	r0, r5
  40184a:	47b0      	blx	r6
		if(val32 != 0) {		
  40184c:	b154      	cbz	r4, 401864 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40184e:	a902      	add	r1, sp, #8
  401850:	2300      	movs	r3, #0
  401852:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401856:	4628      	mov	r0, r5
  401858:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40185a:	2800      	cmp	r0, #0
  40185c:	d1f3      	bne.n	401846 <chip_apply_conf+0xe>
				if(reg == val32)
  40185e:	9b01      	ldr	r3, [sp, #4]
  401860:	429c      	cmp	r4, r3
  401862:	d1f0      	bne.n	401846 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401864:	2000      	movs	r0, #0
  401866:	b003      	add	sp, #12
  401868:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40186a:	bf00      	nop
  40186c:	00401d11 	.word	0x00401d11
  401870:	00401d05 	.word	0x00401d05

00401874 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  401874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401878:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40187a:	2001      	movs	r0, #1
  40187c:	4b3d      	ldr	r3, [pc, #244]	; (401974 <nm_clkless_wake+0x100>)
  40187e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401880:	a901      	add	r1, sp, #4
  401882:	2001      	movs	r0, #1
  401884:	4b3c      	ldr	r3, [pc, #240]	; (401978 <nm_clkless_wake+0x104>)
  401886:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  401888:	4682      	mov	sl, r0
  40188a:	b148      	cbz	r0, 4018a0 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  40188c:	2272      	movs	r2, #114	; 0x72
  40188e:	493b      	ldr	r1, [pc, #236]	; (40197c <nm_clkless_wake+0x108>)
  401890:	483b      	ldr	r0, [pc, #236]	; (401980 <nm_clkless_wake+0x10c>)
  401892:	4c3c      	ldr	r4, [pc, #240]	; (401984 <nm_clkless_wake+0x110>)
  401894:	47a0      	blx	r4
  401896:	483c      	ldr	r0, [pc, #240]	; (401988 <nm_clkless_wake+0x114>)
  401898:	47a0      	blx	r4
  40189a:	483c      	ldr	r0, [pc, #240]	; (40198c <nm_clkless_wake+0x118>)
  40189c:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40189e:	e064      	b.n	40196a <nm_clkless_wake+0xf6>
  4018a0:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4018a2:	f04f 0801 	mov.w	r8, #1
  4018a6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4019a0 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4018aa:	4d32      	ldr	r5, [pc, #200]	; (401974 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4018ac:	4f38      	ldr	r7, [pc, #224]	; (401990 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4018ae:	9901      	ldr	r1, [sp, #4]
  4018b0:	f041 0102 	orr.w	r1, r1, #2
  4018b4:	4640      	mov	r0, r8
  4018b6:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4018b8:	4640      	mov	r0, r8
  4018ba:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4018bc:	4669      	mov	r1, sp
  4018be:	4b35      	ldr	r3, [pc, #212]	; (401994 <nm_clkless_wake+0x120>)
  4018c0:	6818      	ldr	r0, [r3, #0]
  4018c2:	4b2d      	ldr	r3, [pc, #180]	; (401978 <nm_clkless_wake+0x104>)
  4018c4:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4018c6:	b918      	cbnz	r0, 4018d0 <nm_clkless_wake+0x5c>
  4018c8:	9b00      	ldr	r3, [sp, #0]
  4018ca:	b10b      	cbz	r3, 4018d0 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4018cc:	4e31      	ldr	r6, [pc, #196]	; (401994 <nm_clkless_wake+0x120>)
  4018ce:	e037      	b.n	401940 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4018d0:	4e30      	ldr	r6, [pc, #192]	; (401994 <nm_clkless_wake+0x120>)
  4018d2:	230e      	movs	r3, #14
  4018d4:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4018d6:	4640      	mov	r0, r8
  4018d8:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4018da:	4669      	mov	r1, sp
  4018dc:	6830      	ldr	r0, [r6, #0]
  4018de:	4b26      	ldr	r3, [pc, #152]	; (401978 <nm_clkless_wake+0x104>)
  4018e0:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4018e2:	b910      	cbnz	r0, 4018ea <nm_clkless_wake+0x76>
  4018e4:	9b00      	ldr	r3, [sp, #0]
  4018e6:	2b00      	cmp	r3, #0
  4018e8:	d1f0      	bne.n	4018cc <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  4018ea:	4e2a      	ldr	r6, [pc, #168]	; (401994 <nm_clkless_wake+0x120>)
  4018ec:	2313      	movs	r3, #19
  4018ee:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4018f0:	4640      	mov	r0, r8
  4018f2:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4018f4:	4669      	mov	r1, sp
  4018f6:	6830      	ldr	r0, [r6, #0]
  4018f8:	4b1f      	ldr	r3, [pc, #124]	; (401978 <nm_clkless_wake+0x104>)
  4018fa:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  4018fc:	4606      	mov	r6, r0
  4018fe:	2800      	cmp	r0, #0
  401900:	d0e4      	beq.n	4018cc <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  401902:	2296      	movs	r2, #150	; 0x96
  401904:	491d      	ldr	r1, [pc, #116]	; (40197c <nm_clkless_wake+0x108>)
  401906:	481e      	ldr	r0, [pc, #120]	; (401980 <nm_clkless_wake+0x10c>)
  401908:	4c1e      	ldr	r4, [pc, #120]	; (401984 <nm_clkless_wake+0x110>)
  40190a:	47a0      	blx	r4
  40190c:	4822      	ldr	r0, [pc, #136]	; (401998 <nm_clkless_wake+0x124>)
  40190e:	47a0      	blx	r4
  401910:	481e      	ldr	r0, [pc, #120]	; (40198c <nm_clkless_wake+0x118>)
  401912:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401914:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  401916:	e028      	b.n	40196a <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  401918:	2002      	movs	r0, #2
  40191a:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40191c:	4669      	mov	r1, sp
  40191e:	6830      	ldr	r0, [r6, #0]
  401920:	4b15      	ldr	r3, [pc, #84]	; (401978 <nm_clkless_wake+0x104>)
  401922:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401924:	9b00      	ldr	r3, [sp, #0]
  401926:	f013 0f04 	tst.w	r3, #4
  40192a:	d109      	bne.n	401940 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40192c:	22aa      	movs	r2, #170	; 0xaa
  40192e:	4913      	ldr	r1, [pc, #76]	; (40197c <nm_clkless_wake+0x108>)
  401930:	4813      	ldr	r0, [pc, #76]	; (401980 <nm_clkless_wake+0x10c>)
  401932:	f8df b050 	ldr.w	fp, [pc, #80]	; 401984 <nm_clkless_wake+0x110>
  401936:	47d8      	blx	fp
  401938:	4818      	ldr	r0, [pc, #96]	; (40199c <nm_clkless_wake+0x128>)
  40193a:	47d8      	blx	fp
  40193c:	4813      	ldr	r0, [pc, #76]	; (40198c <nm_clkless_wake+0x118>)
  40193e:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401940:	9b00      	ldr	r3, [sp, #0]
  401942:	f013 0f04 	tst.w	r3, #4
  401946:	d110      	bne.n	40196a <nm_clkless_wake+0xf6>
  401948:	3401      	adds	r4, #1
  40194a:	fba7 2304 	umull	r2, r3, r7, r4
  40194e:	085b      	lsrs	r3, r3, #1
  401950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401954:	429c      	cmp	r4, r3
  401956:	d0df      	beq.n	401918 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  401958:	9901      	ldr	r1, [sp, #4]
  40195a:	f041 0102 	orr.w	r1, r1, #2
  40195e:	4640      	mov	r0, r8
  401960:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  401962:	9b00      	ldr	r3, [sp, #0]
  401964:	f013 0f04 	tst.w	r3, #4
  401968:	d0a1      	beq.n	4018ae <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  40196a:	4650      	mov	r0, sl
  40196c:	b003      	add	sp, #12
  40196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401972:	bf00      	nop
  401974:	0040064d 	.word	0x0040064d
  401978:	00401d05 	.word	0x00401d05
  40197c:	004085d8 	.word	0x004085d8
  401980:	00407fd0 	.word	0x00407fd0
  401984:	0040458d 	.word	0x0040458d
  401988:	004085e8 	.word	0x004085e8
  40198c:	00407ffc 	.word	0x00407ffc
  401990:	aaaaaaab 	.word	0xaaaaaaab
  401994:	20400010 	.word	0x20400010
  401998:	00408608 	.word	0x00408608
  40199c:	00408628 	.word	0x00408628
  4019a0:	00401d11 	.word	0x00401d11

004019a4 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4019a4:	b500      	push	{lr}
  4019a6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4019a8:	a901      	add	r1, sp, #4
  4019aa:	f241 4008 	movw	r0, #5128	; 0x1408
  4019ae:	4b15      	ldr	r3, [pc, #84]	; (401a04 <enable_interrupts+0x60>)
  4019b0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4019b2:	b9e0      	cbnz	r0, 4019ee <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4019b4:	9901      	ldr	r1, [sp, #4]
  4019b6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4019ba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4019bc:	f241 4008 	movw	r0, #5128	; 0x1408
  4019c0:	4b11      	ldr	r3, [pc, #68]	; (401a08 <enable_interrupts+0x64>)
  4019c2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4019c4:	b9b0      	cbnz	r0, 4019f4 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4019c6:	a901      	add	r1, sp, #4
  4019c8:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4019cc:	4b0d      	ldr	r3, [pc, #52]	; (401a04 <enable_interrupts+0x60>)
  4019ce:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4019d0:	b998      	cbnz	r0, 4019fa <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4019d2:	9901      	ldr	r1, [sp, #4]
  4019d4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4019d8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4019da:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4019de:	4b0a      	ldr	r3, [pc, #40]	; (401a08 <enable_interrupts+0x64>)
  4019e0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4019e2:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  4019e4:	bf14      	ite	ne
  4019e6:	f06f 0005 	mvnne.w	r0, #5
  4019ea:	2000      	moveq	r0, #0
  4019ec:	e007      	b.n	4019fe <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4019ee:	f06f 0005 	mvn.w	r0, #5
  4019f2:	e004      	b.n	4019fe <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4019f4:	f06f 0005 	mvn.w	r0, #5
  4019f8:	e001      	b.n	4019fe <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4019fa:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  4019fe:	b003      	add	sp, #12
  401a00:	f85d fb04 	ldr.w	pc, [sp], #4
  401a04:	00401d05 	.word	0x00401d05
  401a08:	00401d11 	.word	0x00401d11

00401a0c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401a0c:	b510      	push	{r4, lr}
  401a0e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  401a10:	4b24      	ldr	r3, [pc, #144]	; (401aa4 <nmi_get_chipid+0x98>)
  401a12:	681c      	ldr	r4, [r3, #0]
  401a14:	2c00      	cmp	r4, #0
  401a16:	d140      	bne.n	401a9a <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  401a18:	4619      	mov	r1, r3
  401a1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  401a1e:	4b22      	ldr	r3, [pc, #136]	; (401aa8 <nmi_get_chipid+0x9c>)
  401a20:	4798      	blx	r3
  401a22:	b118      	cbz	r0, 401a2c <nmi_get_chipid+0x20>
			chipid = 0;
  401a24:	2200      	movs	r2, #0
  401a26:	4b1f      	ldr	r3, [pc, #124]	; (401aa4 <nmi_get_chipid+0x98>)
  401a28:	601a      	str	r2, [r3, #0]
			return 0;
  401a2a:	e038      	b.n	401a9e <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401a2c:	a901      	add	r1, sp, #4
  401a2e:	f241 30f4 	movw	r0, #5108	; 0x13f4
  401a32:	4b1d      	ldr	r3, [pc, #116]	; (401aa8 <nmi_get_chipid+0x9c>)
  401a34:	4798      	blx	r3
  401a36:	b118      	cbz	r0, 401a40 <nmi_get_chipid+0x34>
			chipid = 0;
  401a38:	2200      	movs	r2, #0
  401a3a:	4b1a      	ldr	r3, [pc, #104]	; (401aa4 <nmi_get_chipid+0x98>)
  401a3c:	601a      	str	r2, [r3, #0]
			return 0;
  401a3e:	e02e      	b.n	401a9e <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  401a40:	4b18      	ldr	r3, [pc, #96]	; (401aa4 <nmi_get_chipid+0x98>)
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	4a19      	ldr	r2, [pc, #100]	; (401aac <nmi_get_chipid+0xa0>)
  401a46:	4293      	cmp	r3, r2
  401a48:	d106      	bne.n	401a58 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  401a4a:	9b01      	ldr	r3, [sp, #4]
  401a4c:	2b01      	cmp	r3, #1
  401a4e:	d01d      	beq.n	401a8c <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  401a50:	3201      	adds	r2, #1
  401a52:	4b14      	ldr	r3, [pc, #80]	; (401aa4 <nmi_get_chipid+0x98>)
  401a54:	601a      	str	r2, [r3, #0]
  401a56:	e019      	b.n	401a8c <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  401a58:	4a15      	ldr	r2, [pc, #84]	; (401ab0 <nmi_get_chipid+0xa4>)
  401a5a:	4293      	cmp	r3, r2
  401a5c:	d109      	bne.n	401a72 <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  401a5e:	9b01      	ldr	r3, [sp, #4]
  401a60:	2b03      	cmp	r3, #3
  401a62:	d013      	beq.n	401a8c <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  401a64:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  401a66:	bf0c      	ite	eq
  401a68:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  401a6a:	4a12      	ldrne	r2, [pc, #72]	; (401ab4 <nmi_get_chipid+0xa8>)
  401a6c:	4b0d      	ldr	r3, [pc, #52]	; (401aa4 <nmi_get_chipid+0x98>)
  401a6e:	601a      	str	r2, [r3, #0]
  401a70:	e00c      	b.n	401a8c <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  401a72:	4a11      	ldr	r2, [pc, #68]	; (401ab8 <nmi_get_chipid+0xac>)
  401a74:	4293      	cmp	r3, r2
  401a76:	d109      	bne.n	401a8c <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401a78:	490a      	ldr	r1, [pc, #40]	; (401aa4 <nmi_get_chipid+0x98>)
  401a7a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401a7e:	4b0a      	ldr	r3, [pc, #40]	; (401aa8 <nmi_get_chipid+0x9c>)
  401a80:	4798      	blx	r3
  401a82:	b118      	cbz	r0, 401a8c <nmi_get_chipid+0x80>
			chipid = 0;
  401a84:	2200      	movs	r2, #0
  401a86:	4b07      	ldr	r3, [pc, #28]	; (401aa4 <nmi_get_chipid+0x98>)
  401a88:	601a      	str	r2, [r3, #0]
			return 0;
  401a8a:	e008      	b.n	401a9e <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  401a8c:	4a05      	ldr	r2, [pc, #20]	; (401aa4 <nmi_get_chipid+0x98>)
  401a8e:	6813      	ldr	r3, [r2, #0]
  401a90:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401a94:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401a98:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  401a9a:	4b02      	ldr	r3, [pc, #8]	; (401aa4 <nmi_get_chipid+0x98>)
  401a9c:	681c      	ldr	r4, [r3, #0]
}
  401a9e:	4620      	mov	r0, r4
  401aa0:	b002      	add	sp, #8
  401aa2:	bd10      	pop	{r4, pc}
  401aa4:	204008d4 	.word	0x204008d4
  401aa8:	00401d05 	.word	0x00401d05
  401aac:	001002a0 	.word	0x001002a0
  401ab0:	001002b0 	.word	0x001002b0
  401ab4:	001002b2 	.word	0x001002b2
  401ab8:	001000f0 	.word	0x001000f0

00401abc <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ac0:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401ac2:	f241 0514 	movw	r5, #4116	; 0x1014
  401ac6:	4c28      	ldr	r4, [pc, #160]	; (401b68 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401ac8:	4e28      	ldr	r6, [pc, #160]	; (401b6c <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401aca:	4628      	mov	r0, r5
  401acc:	47a0      	blx	r4
		if (reg & 0x80000000) {
  401ace:	2800      	cmp	r0, #0
  401ad0:	db02      	blt.n	401ad8 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401ad2:	2001      	movs	r0, #1
  401ad4:	47b0      	blx	r6
	}
  401ad6:	e7f8      	b.n	401aca <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401ad8:	4825      	ldr	r0, [pc, #148]	; (401b70 <wait_for_bootrom+0xb4>)
  401ada:	4b23      	ldr	r3, [pc, #140]	; (401b68 <wait_for_bootrom+0xac>)
  401adc:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  401ade:	f010 0f01 	tst.w	r0, #1
  401ae2:	d110      	bne.n	401b06 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401ae4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 401b6c <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  401ae8:	4e1f      	ldr	r6, [pc, #124]	; (401b68 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401aea:	4d22      	ldr	r5, [pc, #136]	; (401b74 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401aec:	2001      	movs	r0, #1
  401aee:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  401af0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401af4:	47b0      	blx	r6
  401af6:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401af8:	462a      	mov	r2, r5
  401afa:	4601      	mov	r1, r0
  401afc:	481e      	ldr	r0, [pc, #120]	; (401b78 <wait_for_bootrom+0xbc>)
  401afe:	4b1f      	ldr	r3, [pc, #124]	; (401b7c <wait_for_bootrom+0xc0>)
  401b00:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  401b02:	42ac      	cmp	r4, r5
  401b04:	d1f2      	bne.n	401aec <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  401b06:	2f02      	cmp	r7, #2
  401b08:	d10a      	bne.n	401b20 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401b0a:	491d      	ldr	r1, [pc, #116]	; (401b80 <wait_for_bootrom+0xc4>)
  401b0c:	481d      	ldr	r0, [pc, #116]	; (401b84 <wait_for_bootrom+0xc8>)
  401b0e:	4c1e      	ldr	r4, [pc, #120]	; (401b88 <wait_for_bootrom+0xcc>)
  401b10:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  401b12:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401b16:	f241 008c 	movw	r0, #4236	; 0x108c
  401b1a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401b1c:	2400      	movs	r4, #0
  401b1e:	e00f      	b.n	401b40 <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  401b20:	2f03      	cmp	r7, #3
  401b22:	d109      	bne.n	401b38 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401b24:	4916      	ldr	r1, [pc, #88]	; (401b80 <wait_for_bootrom+0xc4>)
  401b26:	4817      	ldr	r0, [pc, #92]	; (401b84 <wait_for_bootrom+0xc8>)
  401b28:	4c17      	ldr	r4, [pc, #92]	; (401b88 <wait_for_bootrom+0xcc>)
  401b2a:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401b2c:	2100      	movs	r1, #0
  401b2e:	f241 008c 	movw	r0, #4236	; 0x108c
  401b32:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401b34:	2400      	movs	r4, #0
  401b36:	e003      	b.n	401b40 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  401b38:	2f04      	cmp	r7, #4
  401b3a:	bf14      	ite	ne
  401b3c:	2400      	movne	r4, #0
  401b3e:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  401b40:	4b12      	ldr	r3, [pc, #72]	; (401b8c <wait_for_bootrom+0xd0>)
  401b42:	4798      	blx	r3
  401b44:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401b48:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  401b4c:	bf0c      	ite	eq
  401b4e:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  401b52:	4620      	movne	r0, r4
  401b54:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <wait_for_bootrom+0xd4>)
  401b56:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  401b58:	490e      	ldr	r1, [pc, #56]	; (401b94 <wait_for_bootrom+0xd8>)
  401b5a:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401b5e:	4b0a      	ldr	r3, [pc, #40]	; (401b88 <wait_for_bootrom+0xcc>)
  401b60:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  401b62:	2000      	movs	r0, #0
  401b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b68:	00401cf9 	.word	0x00401cf9
  401b6c:	0040064d 	.word	0x0040064d
  401b70:	000207bc 	.word	0x000207bc
  401b74:	10add09e 	.word	0x10add09e
  401b78:	00408674 	.word	0x00408674
  401b7c:	0040458d 	.word	0x0040458d
  401b80:	3c1cd57d 	.word	0x3c1cd57d
  401b84:	000207ac 	.word	0x000207ac
  401b88:	00401d11 	.word	0x00401d11
  401b8c:	00401a0d 	.word	0x00401a0d
  401b90:	00401839 	.word	0x00401839
  401b94:	ef522f61 	.word	0xef522f61

00401b98 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b9a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401b9c:	f241 038c 	movw	r3, #4236	; 0x108c
  401ba0:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  401ba2:	4b18      	ldr	r3, [pc, #96]	; (401c04 <wait_for_firmware_start+0x6c>)
  401ba4:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  401ba6:	3802      	subs	r0, #2
  401ba8:	b2c0      	uxtb	r0, r0
  401baa:	2801      	cmp	r0, #1
  401bac:	d810      	bhi.n	401bd0 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  401bae:	4b16      	ldr	r3, [pc, #88]	; (401c08 <wait_for_firmware_start+0x70>)
  401bb0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  401bb2:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401bb6:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401bba:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401bbe:	9300      	str	r3, [sp, #0]
  401bc0:	e006      	b.n	401bd0 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401bc2:	4638      	mov	r0, r7
  401bc4:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401bc6:	9801      	ldr	r0, [sp, #4]
  401bc8:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401bca:	3c01      	subs	r4, #1
  401bcc:	d106      	bne.n	401bdc <wait_for_firmware_start+0x44>
  401bce:	e013      	b.n	401bf8 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  401bd0:	f04f 34ff 	mov.w	r4, #4294967295
  401bd4:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401bd6:	2702      	movs	r7, #2
  401bd8:	4e0c      	ldr	r6, [pc, #48]	; (401c0c <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401bda:	4d0d      	ldr	r5, [pc, #52]	; (401c10 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  401bdc:	9b00      	ldr	r3, [sp, #0]
  401bde:	4298      	cmp	r0, r3
  401be0:	d1ef      	bne.n	401bc2 <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  401be2:	9a00      	ldr	r2, [sp, #0]
  401be4:	4b07      	ldr	r3, [pc, #28]	; (401c04 <wait_for_firmware_start+0x6c>)
  401be6:	429a      	cmp	r2, r3
  401be8:	d109      	bne.n	401bfe <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  401bea:	2100      	movs	r1, #0
  401bec:	f241 008c 	movw	r0, #4236	; 0x108c
  401bf0:	4b08      	ldr	r3, [pc, #32]	; (401c14 <wait_for_firmware_start+0x7c>)
  401bf2:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401bf4:	2000      	movs	r0, #0
  401bf6:	e003      	b.n	401c00 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401bf8:	f06f 0004 	mvn.w	r0, #4
  401bfc:	e000      	b.n	401c00 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401bfe:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  401c00:	b003      	add	sp, #12
  401c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c04:	02532636 	.word	0x02532636
  401c08:	000207ac 	.word	0x000207ac
  401c0c:	0040064d 	.word	0x0040064d
  401c10:	00401cf9 	.word	0x00401cf9
  401c14:	00401d11 	.word	0x00401d11

00401c18 <chip_deinit>:

sint8 chip_deinit(void)
{
  401c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c1a:	b083      	sub	sp, #12
	uint32 reg = 0;
  401c1c:	a902      	add	r1, sp, #8
  401c1e:	2300      	movs	r3, #0
  401c20:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401c24:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401c28:	4b24      	ldr	r3, [pc, #144]	; (401cbc <chip_deinit+0xa4>)
  401c2a:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401c2c:	b148      	cbz	r0, 401c42 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  401c2e:	f240 2231 	movw	r2, #561	; 0x231
  401c32:	4923      	ldr	r1, [pc, #140]	; (401cc0 <chip_deinit+0xa8>)
  401c34:	4823      	ldr	r0, [pc, #140]	; (401cc4 <chip_deinit+0xac>)
  401c36:	4c24      	ldr	r4, [pc, #144]	; (401cc8 <chip_deinit+0xb0>)
  401c38:	47a0      	blx	r4
  401c3a:	4824      	ldr	r0, [pc, #144]	; (401ccc <chip_deinit+0xb4>)
  401c3c:	47a0      	blx	r4
  401c3e:	4824      	ldr	r0, [pc, #144]	; (401cd0 <chip_deinit+0xb8>)
  401c40:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  401c42:	9901      	ldr	r1, [sp, #4]
  401c44:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401c48:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401c4a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401c4e:	4b21      	ldr	r3, [pc, #132]	; (401cd4 <chip_deinit+0xbc>)
  401c50:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  401c52:	4605      	mov	r5, r0
  401c54:	b158      	cbz	r0, 401c6e <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  401c56:	f240 2237 	movw	r2, #567	; 0x237
  401c5a:	4919      	ldr	r1, [pc, #100]	; (401cc0 <chip_deinit+0xa8>)
  401c5c:	4819      	ldr	r0, [pc, #100]	; (401cc4 <chip_deinit+0xac>)
  401c5e:	4c1a      	ldr	r4, [pc, #104]	; (401cc8 <chip_deinit+0xb0>)
  401c60:	47a0      	blx	r4
  401c62:	481d      	ldr	r0, [pc, #116]	; (401cd8 <chip_deinit+0xc0>)
  401c64:	47a0      	blx	r4
  401c66:	481a      	ldr	r0, [pc, #104]	; (401cd0 <chip_deinit+0xb8>)
  401c68:	47a0      	blx	r4
		return ret;
  401c6a:	4628      	mov	r0, r5
  401c6c:	e024      	b.n	401cb8 <chip_deinit+0xa0>
  401c6e:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401c70:	4e12      	ldr	r6, [pc, #72]	; (401cbc <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401c72:	4f18      	ldr	r7, [pc, #96]	; (401cd4 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401c74:	a901      	add	r1, sp, #4
  401c76:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401c7a:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  401c7c:	4605      	mov	r5, r0
  401c7e:	b158      	cbz	r0, 401c98 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  401c80:	f240 223e 	movw	r2, #574	; 0x23e
  401c84:	490e      	ldr	r1, [pc, #56]	; (401cc0 <chip_deinit+0xa8>)
  401c86:	480f      	ldr	r0, [pc, #60]	; (401cc4 <chip_deinit+0xac>)
  401c88:	4c0f      	ldr	r4, [pc, #60]	; (401cc8 <chip_deinit+0xb0>)
  401c8a:	47a0      	blx	r4
  401c8c:	4813      	ldr	r0, [pc, #76]	; (401cdc <chip_deinit+0xc4>)
  401c8e:	47a0      	blx	r4
  401c90:	480f      	ldr	r0, [pc, #60]	; (401cd0 <chip_deinit+0xb8>)
  401c92:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401c94:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  401c96:	e00f      	b.n	401cb8 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  401c98:	9901      	ldr	r1, [sp, #4]
  401c9a:	f411 6f80 	tst.w	r1, #1024	; 0x400
  401c9e:	d00a      	beq.n	401cb6 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  401ca0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401ca4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401ca6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401caa:	47b8      	blx	r7
  401cac:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  401cae:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401cb2:	d1df      	bne.n	401c74 <chip_deinit+0x5c>
  401cb4:	e000      	b.n	401cb8 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401cb6:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  401cb8:	b003      	add	sp, #12
  401cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401cbc:	00401d05 	.word	0x00401d05
  401cc0:	004085cc 	.word	0x004085cc
  401cc4:	00407fd0 	.word	0x00407fd0
  401cc8:	0040458d 	.word	0x0040458d
  401ccc:	00408684 	.word	0x00408684
  401cd0:	00407ffc 	.word	0x00407ffc
  401cd4:	00401d11 	.word	0x00401d11
  401cd8:	004086a0 	.word	0x004086a0
  401cdc:	004086bc 	.word	0x004086bc

00401ce0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401ce0:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  401ce2:	4b01      	ldr	r3, [pc, #4]	; (401ce8 <nm_bus_iface_init+0x8>)
  401ce4:	4798      	blx	r3

	return ret;
}
  401ce6:	bd08      	pop	{r3, pc}
  401ce8:	004007bd 	.word	0x004007bd

00401cec <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401cec:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401cee:	4b01      	ldr	r3, [pc, #4]	; (401cf4 <nm_bus_iface_deinit+0x8>)
  401cf0:	4798      	blx	r3

	return ret;
}
  401cf2:	bd08      	pop	{r3, pc}
  401cf4:	004009a9 	.word	0x004009a9

00401cf8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401cf8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401cfa:	4b01      	ldr	r3, [pc, #4]	; (401d00 <nm_read_reg+0x8>)
  401cfc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  401cfe:	bd08      	pop	{r3, pc}
  401d00:	00402549 	.word	0x00402549

00401d04 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401d04:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401d06:	4b01      	ldr	r3, [pc, #4]	; (401d0c <nm_read_reg_with_ret+0x8>)
  401d08:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401d0a:	bd08      	pop	{r3, pc}
  401d0c:	00402561 	.word	0x00402561

00401d10 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  401d10:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  401d12:	4b01      	ldr	r3, [pc, #4]	; (401d18 <nm_write_reg+0x8>)
  401d14:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401d16:	bd08      	pop	{r3, pc}
  401d18:	00402579 	.word	0x00402579

00401d1c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d20:	4607      	mov	r7, r0
  401d22:	4689      	mov	r9, r1
  401d24:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401d26:	4b13      	ldr	r3, [pc, #76]	; (401d74 <nm_read_block+0x58>)
  401d28:	f8b3 8000 	ldrh.w	r8, [r3]
  401d2c:	f1a8 0808 	sub.w	r8, r8, #8
  401d30:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401d34:	4542      	cmp	r2, r8
  401d36:	d808      	bhi.n	401d4a <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401d38:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401d3a:	b2aa      	uxth	r2, r5
  401d3c:	eb09 0106 	add.w	r1, r9, r6
  401d40:	4638      	mov	r0, r7
  401d42:	4b0d      	ldr	r3, [pc, #52]	; (401d78 <nm_read_block+0x5c>)
  401d44:	4798      	blx	r3
  401d46:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401d48:	e010      	b.n	401d6c <nm_read_block+0x50>
  401d4a:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401d4c:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401d4e:	f8df a028 	ldr.w	sl, [pc, #40]	; 401d78 <nm_read_block+0x5c>
  401d52:	4642      	mov	r2, r8
  401d54:	eb09 0106 	add.w	r1, r9, r6
  401d58:	4638      	mov	r0, r7
  401d5a:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401d5c:	4603      	mov	r3, r0
  401d5e:	b928      	cbnz	r0, 401d6c <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401d60:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401d62:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401d64:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401d66:	42a5      	cmp	r5, r4
  401d68:	d8f3      	bhi.n	401d52 <nm_read_block+0x36>
  401d6a:	e7e6      	b.n	401d3a <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401d6c:	4618      	mov	r0, r3
  401d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d72:	bf00      	nop
  401d74:	2040000c 	.word	0x2040000c
  401d78:	0040269d 	.word	0x0040269d

00401d7c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d80:	4607      	mov	r7, r0
  401d82:	4689      	mov	r9, r1
  401d84:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401d86:	4b13      	ldr	r3, [pc, #76]	; (401dd4 <nm_write_block+0x58>)
  401d88:	f8b3 8000 	ldrh.w	r8, [r3]
  401d8c:	f1a8 0808 	sub.w	r8, r8, #8
  401d90:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401d94:	4542      	cmp	r2, r8
  401d96:	d808      	bhi.n	401daa <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401d98:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401d9a:	b2aa      	uxth	r2, r5
  401d9c:	eb09 0106 	add.w	r1, r9, r6
  401da0:	4638      	mov	r0, r7
  401da2:	4b0d      	ldr	r3, [pc, #52]	; (401dd8 <nm_write_block+0x5c>)
  401da4:	4798      	blx	r3
  401da6:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401da8:	e010      	b.n	401dcc <nm_write_block+0x50>
  401daa:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401dac:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401dae:	f8df a028 	ldr.w	sl, [pc, #40]	; 401dd8 <nm_write_block+0x5c>
  401db2:	4642      	mov	r2, r8
  401db4:	eb09 0106 	add.w	r1, r9, r6
  401db8:	4638      	mov	r0, r7
  401dba:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401dbc:	4603      	mov	r3, r0
  401dbe:	b928      	cbnz	r0, 401dcc <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401dc0:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401dc2:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401dc4:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401dc6:	42a5      	cmp	r5, r4
  401dc8:	d8f3      	bhi.n	401db2 <nm_write_block+0x36>
  401dca:	e7e6      	b.n	401d9a <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401dcc:	4618      	mov	r0, r3
  401dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401dd2:	bf00      	nop
  401dd4:	2040000c 	.word	0x2040000c
  401dd8:	00402769 	.word	0x00402769

00401ddc <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401ddc:	b530      	push	{r4, r5, lr}
  401dde:	b083      	sub	sp, #12
  401de0:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  401de2:	a902      	add	r1, sp, #8
  401de4:	2300      	movs	r3, #0
  401de6:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401dea:	4823      	ldr	r0, [pc, #140]	; (401e78 <nm_get_firmware_info+0x9c>)
  401dec:	4b23      	ldr	r3, [pc, #140]	; (401e7c <nm_get_firmware_info+0xa0>)
  401dee:	4798      	blx	r3
  401df0:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  401df2:	9a01      	ldr	r2, [sp, #4]
  401df4:	4b22      	ldr	r3, [pc, #136]	; (401e80 <nm_get_firmware_info+0xa4>)
  401df6:	429a      	cmp	r2, r3
  401df8:	d105      	bne.n	401e06 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401dfa:	a901      	add	r1, sp, #4
  401dfc:	f241 0048 	movw	r0, #4168	; 0x1048
  401e00:	4b1e      	ldr	r3, [pc, #120]	; (401e7c <nm_get_firmware_info+0xa0>)
  401e02:	4798      	blx	r3
  401e04:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401e06:	9b01      	ldr	r3, [sp, #4]
  401e08:	0c1a      	lsrs	r2, r3, #16
  401e0a:	1211      	asrs	r1, r2, #8
  401e0c:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  401e0e:	f3c2 1103 	ubfx	r1, r2, #4, #4
  401e12:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401e14:	f002 020f 	and.w	r2, r2, #15
  401e18:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401e1a:	121a      	asrs	r2, r3, #8
  401e1c:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  401e1e:	f3c3 1203 	ubfx	r2, r3, #4, #4
  401e22:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401e24:	f003 030f 	and.w	r3, r3, #15
  401e28:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401e2a:	4b16      	ldr	r3, [pc, #88]	; (401e84 <nm_get_firmware_info+0xa8>)
  401e2c:	4798      	blx	r3
  401e2e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  401e30:	7922      	ldrb	r2, [r4, #4]
  401e32:	79a3      	ldrb	r3, [r4, #6]
  401e34:	f003 030f 	and.w	r3, r3, #15
  401e38:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401e3c:	7963      	ldrb	r3, [r4, #5]
  401e3e:	011b      	lsls	r3, r3, #4
  401e40:	b2db      	uxtb	r3, r3
  401e42:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  401e44:	79e1      	ldrb	r1, [r4, #7]
  401e46:	7a62      	ldrb	r2, [r4, #9]
  401e48:	f002 020f 	and.w	r2, r2, #15
  401e4c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  401e50:	7a22      	ldrb	r2, [r4, #8]
  401e52:	0112      	lsls	r2, r2, #4
  401e54:	b2d2      	uxtb	r2, r2
  401e56:	430a      	orrs	r2, r1
  401e58:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  401e5c:	428a      	cmp	r2, r1
  401e5e:	bf88      	it	hi
  401e60:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  401e64:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  401e68:	4293      	cmp	r3, r2
	}
	return ret;
}
  401e6a:	bf8c      	ite	hi
  401e6c:	4628      	movhi	r0, r5
  401e6e:	f06f 000c 	mvnls.w	r0, #12
  401e72:	b003      	add	sp, #12
  401e74:	bd30      	pop	{r4, r5, pc}
  401e76:	bf00      	nop
  401e78:	000207ac 	.word	0x000207ac
  401e7c:	00401d05 	.word	0x00401d05
  401e80:	d75dc1c3 	.word	0xd75dc1c3
  401e84:	00401a0d 	.word	0x00401a0d

00401e88 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401e88:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401e8a:	b130      	cbz	r0, 401e9a <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  401e8c:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401e8e:	1e63      	subs	r3, r4, #1
  401e90:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401e92:	2b04      	cmp	r3, #4
  401e94:	bf28      	it	cs
  401e96:	2401      	movcs	r4, #1
  401e98:	e000      	b.n	401e9c <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401e9a:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401e9c:	2000      	movs	r0, #0
  401e9e:	4b1d      	ldr	r3, [pc, #116]	; (401f14 <nm_drv_init+0x8c>)
  401ea0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ea2:	4605      	mov	r5, r0
  401ea4:	b150      	cbz	r0, 401ebc <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401ea6:	f44f 7292 	mov.w	r2, #292	; 0x124
  401eaa:	491b      	ldr	r1, [pc, #108]	; (401f18 <nm_drv_init+0x90>)
  401eac:	481b      	ldr	r0, [pc, #108]	; (401f1c <nm_drv_init+0x94>)
  401eae:	4c1c      	ldr	r4, [pc, #112]	; (401f20 <nm_drv_init+0x98>)
  401eb0:	47a0      	blx	r4
  401eb2:	481c      	ldr	r0, [pc, #112]	; (401f24 <nm_drv_init+0x9c>)
  401eb4:	47a0      	blx	r4
  401eb6:	481c      	ldr	r0, [pc, #112]	; (401f28 <nm_drv_init+0xa0>)
  401eb8:	47a0      	blx	r4
		goto ERR1;
  401eba:	e029      	b.n	401f10 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401ebc:	481b      	ldr	r0, [pc, #108]	; (401f2c <nm_drv_init+0xa4>)
  401ebe:	4d18      	ldr	r5, [pc, #96]	; (401f20 <nm_drv_init+0x98>)
  401ec0:	47a8      	blx	r5
  401ec2:	4b1b      	ldr	r3, [pc, #108]	; (401f30 <nm_drv_init+0xa8>)
  401ec4:	4798      	blx	r3
  401ec6:	4601      	mov	r1, r0
  401ec8:	481a      	ldr	r0, [pc, #104]	; (401f34 <nm_drv_init+0xac>)
  401eca:	47a8      	blx	r5
  401ecc:	4816      	ldr	r0, [pc, #88]	; (401f28 <nm_drv_init+0xa0>)
  401ece:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401ed0:	4b19      	ldr	r3, [pc, #100]	; (401f38 <nm_drv_init+0xb0>)
  401ed2:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401ed4:	4620      	mov	r0, r4
  401ed6:	4b19      	ldr	r3, [pc, #100]	; (401f3c <nm_drv_init+0xb4>)
  401ed8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401eda:	4605      	mov	r5, r0
  401edc:	b9b0      	cbnz	r0, 401f0c <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401ede:	4620      	mov	r0, r4
  401ee0:	4b17      	ldr	r3, [pc, #92]	; (401f40 <nm_drv_init+0xb8>)
  401ee2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ee4:	4605      	mov	r5, r0
  401ee6:	b988      	cbnz	r0, 401f0c <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401ee8:	3c02      	subs	r4, #2
  401eea:	b2e4      	uxtb	r4, r4
  401eec:	2c01      	cmp	r4, #1
  401eee:	d90f      	bls.n	401f10 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401ef0:	4b14      	ldr	r3, [pc, #80]	; (401f44 <nm_drv_init+0xbc>)
  401ef2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ef4:	4605      	mov	r5, r0
  401ef6:	b158      	cbz	r0, 401f10 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401ef8:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401efc:	4906      	ldr	r1, [pc, #24]	; (401f18 <nm_drv_init+0x90>)
  401efe:	4807      	ldr	r0, [pc, #28]	; (401f1c <nm_drv_init+0x94>)
  401f00:	4c07      	ldr	r4, [pc, #28]	; (401f20 <nm_drv_init+0x98>)
  401f02:	47a0      	blx	r4
  401f04:	4810      	ldr	r0, [pc, #64]	; (401f48 <nm_drv_init+0xc0>)
  401f06:	47a0      	blx	r4
  401f08:	4807      	ldr	r0, [pc, #28]	; (401f28 <nm_drv_init+0xa0>)
  401f0a:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401f0c:	4b0f      	ldr	r3, [pc, #60]	; (401f4c <nm_drv_init+0xc4>)
  401f0e:	4798      	blx	r3
ERR1:
	return ret;
}
  401f10:	4628      	mov	r0, r5
  401f12:	bd38      	pop	{r3, r4, r5, pc}
  401f14:	00401ce1 	.word	0x00401ce1
  401f18:	004087c4 	.word	0x004087c4
  401f1c:	00407fd0 	.word	0x00407fd0
  401f20:	0040458d 	.word	0x0040458d
  401f24:	00408718 	.word	0x00408718
  401f28:	00407ffc 	.word	0x00407ffc
  401f2c:	00408294 	.word	0x00408294
  401f30:	00401a0d 	.word	0x00401a0d
  401f34:	00408734 	.word	0x00408734
  401f38:	00402591 	.word	0x00402591
  401f3c:	00401abd 	.word	0x00401abd
  401f40:	00401b99 	.word	0x00401b99
  401f44:	004019a5 	.word	0x004019a5
  401f48:	00408744 	.word	0x00408744
  401f4c:	00401ced 	.word	0x00401ced

00401f50 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401f50:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401f52:	4b19      	ldr	r3, [pc, #100]	; (401fb8 <nm_drv_deinit+0x68>)
  401f54:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401f56:	b158      	cbz	r0, 401f70 <nm_drv_deinit+0x20>
  401f58:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401f5a:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401f5e:	4917      	ldr	r1, [pc, #92]	; (401fbc <nm_drv_deinit+0x6c>)
  401f60:	4817      	ldr	r0, [pc, #92]	; (401fc0 <nm_drv_deinit+0x70>)
  401f62:	4d18      	ldr	r5, [pc, #96]	; (401fc4 <nm_drv_deinit+0x74>)
  401f64:	47a8      	blx	r5
  401f66:	4818      	ldr	r0, [pc, #96]	; (401fc8 <nm_drv_deinit+0x78>)
  401f68:	47a8      	blx	r5
  401f6a:	4818      	ldr	r0, [pc, #96]	; (401fcc <nm_drv_deinit+0x7c>)
  401f6c:	47a8      	blx	r5
		goto ERR1;
  401f6e:	e020      	b.n	401fb2 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401f70:	2000      	movs	r0, #0
  401f72:	4b17      	ldr	r3, [pc, #92]	; (401fd0 <nm_drv_deinit+0x80>)
  401f74:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401f76:	4604      	mov	r4, r0
  401f78:	b150      	cbz	r0, 401f90 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401f7a:	f240 127b 	movw	r2, #379	; 0x17b
  401f7e:	490f      	ldr	r1, [pc, #60]	; (401fbc <nm_drv_deinit+0x6c>)
  401f80:	480f      	ldr	r0, [pc, #60]	; (401fc0 <nm_drv_deinit+0x70>)
  401f82:	4d10      	ldr	r5, [pc, #64]	; (401fc4 <nm_drv_deinit+0x74>)
  401f84:	47a8      	blx	r5
  401f86:	4813      	ldr	r0, [pc, #76]	; (401fd4 <nm_drv_deinit+0x84>)
  401f88:	47a8      	blx	r5
  401f8a:	4810      	ldr	r0, [pc, #64]	; (401fcc <nm_drv_deinit+0x7c>)
  401f8c:	47a8      	blx	r5
		goto ERR1;
  401f8e:	e010      	b.n	401fb2 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401f90:	4b11      	ldr	r3, [pc, #68]	; (401fd8 <nm_drv_deinit+0x88>)
  401f92:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401f94:	4604      	mov	r4, r0
  401f96:	b150      	cbz	r0, 401fae <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401f98:	f240 1281 	movw	r2, #385	; 0x181
  401f9c:	4907      	ldr	r1, [pc, #28]	; (401fbc <nm_drv_deinit+0x6c>)
  401f9e:	4808      	ldr	r0, [pc, #32]	; (401fc0 <nm_drv_deinit+0x70>)
  401fa0:	4d08      	ldr	r5, [pc, #32]	; (401fc4 <nm_drv_deinit+0x74>)
  401fa2:	47a8      	blx	r5
  401fa4:	480d      	ldr	r0, [pc, #52]	; (401fdc <nm_drv_deinit+0x8c>)
  401fa6:	47a8      	blx	r5
  401fa8:	4808      	ldr	r0, [pc, #32]	; (401fcc <nm_drv_deinit+0x7c>)
  401faa:	47a8      	blx	r5
		goto ERR1;
  401fac:	e001      	b.n	401fb2 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401fae:	4b0c      	ldr	r3, [pc, #48]	; (401fe0 <nm_drv_deinit+0x90>)
  401fb0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401fb2:	4620      	mov	r0, r4
  401fb4:	bd38      	pop	{r3, r4, r5, pc}
  401fb6:	bf00      	nop
  401fb8:	00401c19 	.word	0x00401c19
  401fbc:	004087d0 	.word	0x004087d0
  401fc0:	00407fd0 	.word	0x00407fd0
  401fc4:	0040458d 	.word	0x0040458d
  401fc8:	00408764 	.word	0x00408764
  401fcc:	00407ffc 	.word	0x00407ffc
  401fd0:	0040305d 	.word	0x0040305d
  401fd4:	00408784 	.word	0x00408784
  401fd8:	00401ced 	.word	0x00401ced
  401fdc:	004087a8 	.word	0x004087a8
  401fe0:	0040253d 	.word	0x0040253d

00401fe4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401fe4:	b500      	push	{lr}
  401fe6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401fe8:	2300      	movs	r3, #0
  401fea:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401fec:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401fee:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401ff2:	a901      	add	r1, sp, #4
  401ff4:	2003      	movs	r0, #3
  401ff6:	4b02      	ldr	r3, [pc, #8]	; (402000 <nmi_spi_read+0x1c>)
  401ff8:	4798      	blx	r3
}
  401ffa:	b005      	add	sp, #20
  401ffc:	f85d fb04 	ldr.w	pc, [sp], #4
  402000:	004008d9 	.word	0x004008d9

00402004 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402004:	b5f0      	push	{r4, r5, r6, r7, lr}
  402006:	b083      	sub	sp, #12
  402008:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  40200a:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  40200e:	b2db      	uxtb	r3, r3
  402010:	2b01      	cmp	r3, #1
  402012:	d901      	bls.n	402018 <spi_cmd_rsp+0x14>
  402014:	28cf      	cmp	r0, #207	; 0xcf
  402016:	d106      	bne.n	402026 <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402018:	2101      	movs	r1, #1
  40201a:	f10d 0007 	add.w	r0, sp, #7
  40201e:	4b22      	ldr	r3, [pc, #136]	; (4020a8 <spi_cmd_rsp+0xa4>)
  402020:	4798      	blx	r3
  402022:	2800      	cmp	r0, #0
  402024:	d13a      	bne.n	40209c <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402026:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402028:	2701      	movs	r7, #1
  40202a:	4e1f      	ldr	r6, [pc, #124]	; (4020a8 <spi_cmd_rsp+0xa4>)
  40202c:	4639      	mov	r1, r7
  40202e:	f10d 0007 	add.w	r0, sp, #7
  402032:	47b0      	blx	r6
  402034:	b158      	cbz	r0, 40204e <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402036:	f240 1227 	movw	r2, #295	; 0x127
  40203a:	491c      	ldr	r1, [pc, #112]	; (4020ac <spi_cmd_rsp+0xa8>)
  40203c:	481c      	ldr	r0, [pc, #112]	; (4020b0 <spi_cmd_rsp+0xac>)
  40203e:	4c1d      	ldr	r4, [pc, #116]	; (4020b4 <spi_cmd_rsp+0xb0>)
  402040:	47a0      	blx	r4
  402042:	481d      	ldr	r0, [pc, #116]	; (4020b8 <spi_cmd_rsp+0xb4>)
  402044:	47a0      	blx	r4
  402046:	481d      	ldr	r0, [pc, #116]	; (4020bc <spi_cmd_rsp+0xb8>)
  402048:	47a0      	blx	r4
			result = N_FAIL;
  40204a:	2000      	movs	r0, #0
			goto _fail_;
  40204c:	e029      	b.n	4020a2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  40204e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402052:	42ab      	cmp	r3, r5
  402054:	d005      	beq.n	402062 <spi_cmd_rsp+0x5e>
  402056:	1e63      	subs	r3, r4, #1
  402058:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40205c:	d1e6      	bne.n	40202c <spi_cmd_rsp+0x28>
  40205e:	240b      	movs	r4, #11
  402060:	e000      	b.n	402064 <spi_cmd_rsp+0x60>
  402062:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402064:	2601      	movs	r6, #1
  402066:	4d10      	ldr	r5, [pc, #64]	; (4020a8 <spi_cmd_rsp+0xa4>)
  402068:	4631      	mov	r1, r6
  40206a:	f10d 0007 	add.w	r0, sp, #7
  40206e:	47a8      	blx	r5
  402070:	b158      	cbz	r0, 40208a <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402072:	f240 1235 	movw	r2, #309	; 0x135
  402076:	490d      	ldr	r1, [pc, #52]	; (4020ac <spi_cmd_rsp+0xa8>)
  402078:	480d      	ldr	r0, [pc, #52]	; (4020b0 <spi_cmd_rsp+0xac>)
  40207a:	4c0e      	ldr	r4, [pc, #56]	; (4020b4 <spi_cmd_rsp+0xb0>)
  40207c:	47a0      	blx	r4
  40207e:	480e      	ldr	r0, [pc, #56]	; (4020b8 <spi_cmd_rsp+0xb4>)
  402080:	47a0      	blx	r4
  402082:	480e      	ldr	r0, [pc, #56]	; (4020bc <spi_cmd_rsp+0xb8>)
  402084:	47a0      	blx	r4
			result = N_FAIL;
  402086:	2000      	movs	r0, #0
			goto _fail_;
  402088:	e00b      	b.n	4020a2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  40208a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40208e:	b13b      	cbz	r3, 4020a0 <spi_cmd_rsp+0x9c>
  402090:	1e63      	subs	r3, r4, #1
  402092:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402096:	d1e7      	bne.n	402068 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  402098:	2001      	movs	r0, #1
  40209a:	e002      	b.n	4020a2 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  40209c:	2000      	movs	r0, #0
  40209e:	e000      	b.n	4020a2 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  4020a0:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  4020a2:	b003      	add	sp, #12
  4020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4020a6:	bf00      	nop
  4020a8:	00401fe5 	.word	0x00401fe5
  4020ac:	00408df4 	.word	0x00408df4
  4020b0:	00407fd0 	.word	0x00407fd0
  4020b4:	0040458d 	.word	0x0040458d
  4020b8:	00408918 	.word	0x00408918
  4020bc:	00407ffc 	.word	0x00407ffc

004020c0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  4020c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020c4:	b083      	sub	sp, #12
  4020c6:	4682      	mov	sl, r0
  4020c8:	4689      	mov	r9, r1
  4020ca:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  4020cc:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4020d0:	4d35      	ldr	r5, [pc, #212]	; (4021a8 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  4020d2:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  4020d6:	bf94      	ite	ls
  4020d8:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  4020dc:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  4020e0:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4020e2:	2601      	movs	r6, #1
  4020e4:	4631      	mov	r1, r6
  4020e6:	f10d 0003 	add.w	r0, sp, #3
  4020ea:	47a8      	blx	r5
  4020ec:	b158      	cbz	r0, 402106 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  4020ee:	f240 1257 	movw	r2, #343	; 0x157
  4020f2:	492e      	ldr	r1, [pc, #184]	; (4021ac <spi_data_read+0xec>)
  4020f4:	482e      	ldr	r0, [pc, #184]	; (4021b0 <spi_data_read+0xf0>)
  4020f6:	4c2f      	ldr	r4, [pc, #188]	; (4021b4 <spi_data_read+0xf4>)
  4020f8:	47a0      	blx	r4
  4020fa:	482f      	ldr	r0, [pc, #188]	; (4021b8 <spi_data_read+0xf8>)
  4020fc:	47a0      	blx	r4
  4020fe:	482f      	ldr	r0, [pc, #188]	; (4021bc <spi_data_read+0xfc>)
  402100:	47a0      	blx	r4
  402102:	2000      	movs	r0, #0
  402104:	e04d      	b.n	4021a2 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  402106:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40210a:	091b      	lsrs	r3, r3, #4
  40210c:	2b0f      	cmp	r3, #15
  40210e:	d005      	beq.n	40211c <spi_data_read+0x5c>
  402110:	3c01      	subs	r4, #1
  402112:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  402114:	f1b4 3fff 	cmp.w	r4, #4294967295
  402118:	d1e4      	bne.n	4020e4 <spi_data_read+0x24>
  40211a:	e001      	b.n	402120 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  40211c:	2c00      	cmp	r4, #0
  40211e:	dc0d      	bgt.n	40213c <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402120:	f240 1263 	movw	r2, #355	; 0x163
  402124:	4921      	ldr	r1, [pc, #132]	; (4021ac <spi_data_read+0xec>)
  402126:	4822      	ldr	r0, [pc, #136]	; (4021b0 <spi_data_read+0xf0>)
  402128:	4c22      	ldr	r4, [pc, #136]	; (4021b4 <spi_data_read+0xf4>)
  40212a:	47a0      	blx	r4
  40212c:	f89d 1003 	ldrb.w	r1, [sp, #3]
  402130:	4823      	ldr	r0, [pc, #140]	; (4021c0 <spi_data_read+0x100>)
  402132:	47a0      	blx	r4
  402134:	4821      	ldr	r0, [pc, #132]	; (4021bc <spi_data_read+0xfc>)
  402136:	47a0      	blx	r4
			result = N_FAIL;
  402138:	2000      	movs	r0, #0
			break;
  40213a:	e032      	b.n	4021a2 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  40213c:	b2bf      	uxth	r7, r7
  40213e:	4639      	mov	r1, r7
  402140:	eb0a 0008 	add.w	r0, sl, r8
  402144:	47a8      	blx	r5
  402146:	b158      	cbz	r0, 402160 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402148:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  40214c:	4917      	ldr	r1, [pc, #92]	; (4021ac <spi_data_read+0xec>)
  40214e:	4818      	ldr	r0, [pc, #96]	; (4021b0 <spi_data_read+0xf0>)
  402150:	4c18      	ldr	r4, [pc, #96]	; (4021b4 <spi_data_read+0xf4>)
  402152:	47a0      	blx	r4
  402154:	481b      	ldr	r0, [pc, #108]	; (4021c4 <spi_data_read+0x104>)
  402156:	47a0      	blx	r4
  402158:	4818      	ldr	r0, [pc, #96]	; (4021bc <spi_data_read+0xfc>)
  40215a:	47a0      	blx	r4
			result = N_FAIL;
  40215c:	2000      	movs	r0, #0
			break;
  40215e:	e020      	b.n	4021a2 <spi_data_read+0xe2>
		}
		if(!clockless)
  402160:	f1bb 0f00 	cmp.w	fp, #0
  402164:	d112      	bne.n	40218c <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  402166:	4b18      	ldr	r3, [pc, #96]	; (4021c8 <spi_data_read+0x108>)
  402168:	781b      	ldrb	r3, [r3, #0]
  40216a:	b97b      	cbnz	r3, 40218c <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  40216c:	2102      	movs	r1, #2
  40216e:	a801      	add	r0, sp, #4
  402170:	47a8      	blx	r5
  402172:	b158      	cbz	r0, 40218c <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  402174:	f240 1277 	movw	r2, #375	; 0x177
  402178:	490c      	ldr	r1, [pc, #48]	; (4021ac <spi_data_read+0xec>)
  40217a:	480d      	ldr	r0, [pc, #52]	; (4021b0 <spi_data_read+0xf0>)
  40217c:	4c0d      	ldr	r4, [pc, #52]	; (4021b4 <spi_data_read+0xf4>)
  40217e:	47a0      	blx	r4
  402180:	4812      	ldr	r0, [pc, #72]	; (4021cc <spi_data_read+0x10c>)
  402182:	47a0      	blx	r4
  402184:	480d      	ldr	r0, [pc, #52]	; (4021bc <spi_data_read+0xfc>)
  402186:	47a0      	blx	r4
					result = N_FAIL;
  402188:	2000      	movs	r0, #0
					break;
  40218a:	e00a      	b.n	4021a2 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  40218c:	44b8      	add	r8, r7
  40218e:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  402192:	ebc7 0709 	rsb	r7, r7, r9
  402196:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  40219a:	f1b9 0f00 	cmp.w	r9, #0
  40219e:	d198      	bne.n	4020d2 <spi_data_read+0x12>
  4021a0:	2001      	movs	r0, #1

	return result;
}
  4021a2:	b003      	add	sp, #12
  4021a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021a8:	00401fe5 	.word	0x00401fe5
  4021ac:	004087e0 	.word	0x004087e0
  4021b0:	00407fd0 	.word	0x00407fd0
  4021b4:	0040458d 	.word	0x0040458d
  4021b8:	0040894c 	.word	0x0040894c
  4021bc:	00407ffc 	.word	0x00407ffc
  4021c0:	00408980 	.word	0x00408980
  4021c4:	004089b0 	.word	0x004089b0
  4021c8:	204008d8 	.word	0x204008d8
  4021cc:	004089e4 	.word	0x004089e4

004021d0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  4021d0:	b500      	push	{lr}
  4021d2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  4021d4:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  4021d6:	2300      	movs	r3, #0
  4021d8:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  4021da:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  4021de:	a901      	add	r1, sp, #4
  4021e0:	2003      	movs	r0, #3
  4021e2:	4b02      	ldr	r3, [pc, #8]	; (4021ec <nmi_spi_write+0x1c>)
  4021e4:	4798      	blx	r3
}
  4021e6:	b005      	add	sp, #20
  4021e8:	f85d fb04 	ldr.w	pc, [sp], #4
  4021ec:	004008d9 	.word	0x004008d9

004021f0 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  4021f0:	b570      	push	{r4, r5, r6, lr}
  4021f2:	b084      	sub	sp, #16
  4021f4:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  4021f8:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  4021fc:	38c1      	subs	r0, #193	; 0xc1
  4021fe:	280e      	cmp	r0, #14
  402200:	f200 80ae 	bhi.w	402360 <spi_cmd+0x170>
  402204:	e8df f000 	tbb	[pc, r0]
  402208:	125f3e3e 	.word	0x125f3e3e
  40220c:	4d4d2c23 	.word	0x4d4d2c23
  402210:	acac0878 	.word	0xacac0878
  402214:	acac      	.short	0xacac
  402216:	35          	.byte	0x35
  402217:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402218:	0c0b      	lsrs	r3, r1, #16
  40221a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40221e:	0a0b      	lsrs	r3, r1, #8
  402220:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402224:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402228:	2105      	movs	r1, #5
		break;
  40222a:	e0a4      	b.n	402376 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  40222c:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402230:	b914      	cbnz	r4, 402238 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402232:	f88d 3005 	strb.w	r3, [sp, #5]
  402236:	e003      	b.n	402240 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  402238:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40223c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402240:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402244:	2300      	movs	r3, #0
  402246:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40224a:	2105      	movs	r1, #5
		break;
  40224c:	e093      	b.n	402376 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  40224e:	2300      	movs	r3, #0
  402250:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402254:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402258:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40225c:	2105      	movs	r1, #5
		break;
  40225e:	e08a      	b.n	402376 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  402260:	2300      	movs	r3, #0
  402262:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402266:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  40226a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40226e:	2105      	movs	r1, #5
		break;
  402270:	e081      	b.n	402376 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  402272:	23ff      	movs	r3, #255	; 0xff
  402274:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  402278:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  40227c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402280:	2105      	movs	r1, #5
		break;
  402282:	e078      	b.n	402376 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  402284:	0c0a      	lsrs	r2, r1, #16
  402286:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40228a:	0a0a      	lsrs	r2, r1, #8
  40228c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402290:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  402294:	0a1a      	lsrs	r2, r3, #8
  402296:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  40229a:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  40229e:	2107      	movs	r1, #7
		break;
  4022a0:	e069      	b.n	402376 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  4022a2:	0c0a      	lsrs	r2, r1, #16
  4022a4:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4022a8:	0a0a      	lsrs	r2, r1, #8
  4022aa:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4022ae:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  4022b2:	0c1a      	lsrs	r2, r3, #16
  4022b4:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  4022b8:	0a1a      	lsrs	r2, r3, #8
  4022ba:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  4022be:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  4022c2:	2108      	movs	r1, #8
		break;
  4022c4:	e057      	b.n	402376 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  4022c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  4022ca:	b914      	cbnz	r4, 4022d2 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  4022cc:	f88d 3005 	strb.w	r3, [sp, #5]
  4022d0:	e003      	b.n	4022da <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  4022d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4022d6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  4022da:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  4022de:	0e13      	lsrs	r3, r2, #24
  4022e0:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  4022e4:	0c13      	lsrs	r3, r2, #16
  4022e6:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  4022ea:	0a13      	lsrs	r3, r2, #8
  4022ec:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  4022f0:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  4022f4:	2108      	movs	r1, #8
		break;
  4022f6:	e03e      	b.n	402376 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  4022f8:	0c0b      	lsrs	r3, r1, #16
  4022fa:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4022fe:	0a0b      	lsrs	r3, r1, #8
  402300:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402304:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402308:	0e13      	lsrs	r3, r2, #24
  40230a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  40230e:	0c13      	lsrs	r3, r2, #16
  402310:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402314:	0a13      	lsrs	r3, r2, #8
  402316:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  40231a:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  40231e:	2109      	movs	r1, #9
		break;
  402320:	e029      	b.n	402376 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402322:	f812 3b01 	ldrb.w	r3, [r2], #1
  402326:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  40232a:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  40232c:	4295      	cmp	r5, r2
  40232e:	d1f8      	bne.n	402322 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402330:	ab04      	add	r3, sp, #16
  402332:	441e      	add	r6, r3
  402334:	0043      	lsls	r3, r0, #1
  402336:	f806 3c0c 	strb.w	r3, [r6, #-12]
  40233a:	e001      	b.n	402340 <spi_cmd+0x150>
		else
			len-=1;
  40233c:	3901      	subs	r1, #1
  40233e:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402340:	a801      	add	r0, sp, #4
  402342:	4b10      	ldr	r3, [pc, #64]	; (402384 <spi_cmd+0x194>)
  402344:	4798      	blx	r3
  402346:	b168      	cbz	r0, 402364 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402348:	f44f 7284 	mov.w	r2, #264	; 0x108
  40234c:	490e      	ldr	r1, [pc, #56]	; (402388 <spi_cmd+0x198>)
  40234e:	480f      	ldr	r0, [pc, #60]	; (40238c <spi_cmd+0x19c>)
  402350:	4c0f      	ldr	r4, [pc, #60]	; (402390 <spi_cmd+0x1a0>)
  402352:	47a0      	blx	r4
  402354:	480f      	ldr	r0, [pc, #60]	; (402394 <spi_cmd+0x1a4>)
  402356:	47a0      	blx	r4
  402358:	480f      	ldr	r0, [pc, #60]	; (402398 <spi_cmd+0x1a8>)
  40235a:	47a0      	blx	r4
			result = N_FAIL;
  40235c:	2000      	movs	r0, #0
  40235e:	e00f      	b.n	402380 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  402360:	2000      	movs	r0, #0
  402362:	e00d      	b.n	402380 <spi_cmd+0x190>
  402364:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  402366:	e00b      	b.n	402380 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402368:	1e4e      	subs	r6, r1, #1
  40236a:	ab01      	add	r3, sp, #4
  40236c:	199d      	adds	r5, r3, r6
  40236e:	207f      	movs	r0, #127	; 0x7f
  402370:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402372:	4c0a      	ldr	r4, [pc, #40]	; (40239c <spi_cmd+0x1ac>)
  402374:	e7d5      	b.n	402322 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  402376:	4b0a      	ldr	r3, [pc, #40]	; (4023a0 <spi_cmd+0x1b0>)
  402378:	781b      	ldrb	r3, [r3, #0]
  40237a:	2b00      	cmp	r3, #0
  40237c:	d1de      	bne.n	40233c <spi_cmd+0x14c>
  40237e:	e7f3      	b.n	402368 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  402380:	b004      	add	sp, #16
  402382:	bd70      	pop	{r4, r5, r6, pc}
  402384:	004021d1 	.word	0x004021d1
  402388:	00408ddc 	.word	0x00408ddc
  40238c:	00407fd0 	.word	0x00407fd0
  402390:	0040458d 	.word	0x0040458d
  402394:	00408a1c 	.word	0x00408a1c
  402398:	00407ffc 	.word	0x00407ffc
  40239c:	004087f0 	.word	0x004087f0
  4023a0:	204008d8 	.word	0x204008d8

004023a4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  4023a4:	b570      	push	{r4, r5, r6, lr}
  4023a6:	b082      	sub	sp, #8
  4023a8:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  4023aa:	2831      	cmp	r0, #49	; 0x31
  4023ac:	bf35      	itete	cc
  4023ae:	2301      	movcc	r3, #1
  4023b0:	2300      	movcs	r3, #0
  4023b2:	25c3      	movcc	r5, #195	; 0xc3
  4023b4:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4023b6:	9300      	str	r3, [sp, #0]
  4023b8:	2304      	movs	r3, #4
  4023ba:	460a      	mov	r2, r1
  4023bc:	4601      	mov	r1, r0
  4023be:	4628      	mov	r0, r5
  4023c0:	4e16      	ldr	r6, [pc, #88]	; (40241c <spi_write_reg+0x78>)
  4023c2:	47b0      	blx	r6
	if (result != N_OK) {
  4023c4:	2801      	cmp	r0, #1
  4023c6:	d00c      	beq.n	4023e2 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  4023c8:	f240 12eb 	movw	r2, #491	; 0x1eb
  4023cc:	4914      	ldr	r1, [pc, #80]	; (402420 <spi_write_reg+0x7c>)
  4023ce:	4815      	ldr	r0, [pc, #84]	; (402424 <spi_write_reg+0x80>)
  4023d0:	4d15      	ldr	r5, [pc, #84]	; (402428 <spi_write_reg+0x84>)
  4023d2:	47a8      	blx	r5
  4023d4:	4621      	mov	r1, r4
  4023d6:	4815      	ldr	r0, [pc, #84]	; (40242c <spi_write_reg+0x88>)
  4023d8:	47a8      	blx	r5
  4023da:	4815      	ldr	r0, [pc, #84]	; (402430 <spi_write_reg+0x8c>)
  4023dc:	47a8      	blx	r5
		return N_FAIL;
  4023de:	2000      	movs	r0, #0
  4023e0:	e01a      	b.n	402418 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  4023e2:	4628      	mov	r0, r5
  4023e4:	4b13      	ldr	r3, [pc, #76]	; (402434 <spi_write_reg+0x90>)
  4023e6:	4798      	blx	r3
	if (result != N_OK) {
  4023e8:	2801      	cmp	r0, #1
  4023ea:	d014      	beq.n	402416 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  4023ec:	f240 12f1 	movw	r2, #497	; 0x1f1
  4023f0:	490b      	ldr	r1, [pc, #44]	; (402420 <spi_write_reg+0x7c>)
  4023f2:	480c      	ldr	r0, [pc, #48]	; (402424 <spi_write_reg+0x80>)
  4023f4:	4d0c      	ldr	r5, [pc, #48]	; (402428 <spi_write_reg+0x84>)
  4023f6:	47a8      	blx	r5
  4023f8:	4621      	mov	r1, r4
  4023fa:	480f      	ldr	r0, [pc, #60]	; (402438 <spi_write_reg+0x94>)
  4023fc:	47a8      	blx	r5
  4023fe:	480c      	ldr	r0, [pc, #48]	; (402430 <spi_write_reg+0x8c>)
  402400:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402402:	2400      	movs	r4, #0
  402404:	9400      	str	r4, [sp, #0]
  402406:	4623      	mov	r3, r4
  402408:	4622      	mov	r2, r4
  40240a:	4621      	mov	r1, r4
  40240c:	20cf      	movs	r0, #207	; 0xcf
  40240e:	4d03      	ldr	r5, [pc, #12]	; (40241c <spi_write_reg+0x78>)
  402410:	47a8      	blx	r5
		return N_FAIL;
  402412:	4620      	mov	r0, r4
  402414:	e000      	b.n	402418 <spi_write_reg+0x74>
	}

	return N_OK;
  402416:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  402418:	b002      	add	sp, #8
  40241a:	bd70      	pop	{r4, r5, r6, pc}
  40241c:	004021f1 	.word	0x004021f1
  402420:	00408dcc 	.word	0x00408dcc
  402424:	00407fd0 	.word	0x00407fd0
  402428:	0040458d 	.word	0x0040458d
  40242c:	00408a48 	.word	0x00408a48
  402430:	00407ffc 	.word	0x00407ffc
  402434:	00402005 	.word	0x00402005
  402438:	00408a74 	.word	0x00408a74

0040243c <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  40243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402440:	b084      	sub	sp, #16
  402442:	4604      	mov	r4, r0
  402444:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402446:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40244a:	bf35      	itete	cc
  40244c:	2601      	movcc	r6, #1
  40244e:	2600      	movcs	r6, #0
  402450:	25c4      	movcc	r5, #196	; 0xc4
  402452:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402454:	9600      	str	r6, [sp, #0]
  402456:	2304      	movs	r3, #4
  402458:	2200      	movs	r2, #0
  40245a:	4601      	mov	r1, r0
  40245c:	4628      	mov	r0, r5
  40245e:	4f2d      	ldr	r7, [pc, #180]	; (402514 <spi_read_reg+0xd8>)
  402460:	47b8      	blx	r7
	if (result != N_OK) {
  402462:	2801      	cmp	r0, #1
  402464:	d00c      	beq.n	402480 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  402466:	f240 2245 	movw	r2, #581	; 0x245
  40246a:	492b      	ldr	r1, [pc, #172]	; (402518 <spi_read_reg+0xdc>)
  40246c:	482b      	ldr	r0, [pc, #172]	; (40251c <spi_read_reg+0xe0>)
  40246e:	4d2c      	ldr	r5, [pc, #176]	; (402520 <spi_read_reg+0xe4>)
  402470:	47a8      	blx	r5
  402472:	4621      	mov	r1, r4
  402474:	482b      	ldr	r0, [pc, #172]	; (402524 <spi_read_reg+0xe8>)
  402476:	47a8      	blx	r5
  402478:	482b      	ldr	r0, [pc, #172]	; (402528 <spi_read_reg+0xec>)
  40247a:	47a8      	blx	r5
		return N_FAIL;
  40247c:	2000      	movs	r0, #0
  40247e:	e045      	b.n	40250c <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  402480:	4628      	mov	r0, r5
  402482:	4b2a      	ldr	r3, [pc, #168]	; (40252c <spi_read_reg+0xf0>)
  402484:	4798      	blx	r3
	if (result != N_OK) {
  402486:	2801      	cmp	r0, #1
  402488:	d014      	beq.n	4024b4 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40248a:	f240 224b 	movw	r2, #587	; 0x24b
  40248e:	4922      	ldr	r1, [pc, #136]	; (402518 <spi_read_reg+0xdc>)
  402490:	4822      	ldr	r0, [pc, #136]	; (40251c <spi_read_reg+0xe0>)
  402492:	4d23      	ldr	r5, [pc, #140]	; (402520 <spi_read_reg+0xe4>)
  402494:	47a8      	blx	r5
  402496:	4621      	mov	r1, r4
  402498:	4825      	ldr	r0, [pc, #148]	; (402530 <spi_read_reg+0xf4>)
  40249a:	47a8      	blx	r5
  40249c:	4822      	ldr	r0, [pc, #136]	; (402528 <spi_read_reg+0xec>)
  40249e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4024a0:	2400      	movs	r4, #0
  4024a2:	9400      	str	r4, [sp, #0]
  4024a4:	4623      	mov	r3, r4
  4024a6:	4622      	mov	r2, r4
  4024a8:	4621      	mov	r1, r4
  4024aa:	20cf      	movs	r0, #207	; 0xcf
  4024ac:	4d19      	ldr	r5, [pc, #100]	; (402514 <spi_read_reg+0xd8>)
  4024ae:	47a8      	blx	r5
		return N_FAIL;
  4024b0:	4620      	mov	r0, r4
  4024b2:	e02b      	b.n	40250c <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  4024b4:	4632      	mov	r2, r6
  4024b6:	2104      	movs	r1, #4
  4024b8:	a803      	add	r0, sp, #12
  4024ba:	4b1e      	ldr	r3, [pc, #120]	; (402534 <spi_read_reg+0xf8>)
  4024bc:	4798      	blx	r3
	if (result != N_OK) {
  4024be:	2801      	cmp	r0, #1
  4024c0:	d013      	beq.n	4024ea <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  4024c2:	f240 2253 	movw	r2, #595	; 0x253
  4024c6:	4914      	ldr	r1, [pc, #80]	; (402518 <spi_read_reg+0xdc>)
  4024c8:	4814      	ldr	r0, [pc, #80]	; (40251c <spi_read_reg+0xe0>)
  4024ca:	4c15      	ldr	r4, [pc, #84]	; (402520 <spi_read_reg+0xe4>)
  4024cc:	47a0      	blx	r4
  4024ce:	481a      	ldr	r0, [pc, #104]	; (402538 <spi_read_reg+0xfc>)
  4024d0:	47a0      	blx	r4
  4024d2:	4815      	ldr	r0, [pc, #84]	; (402528 <spi_read_reg+0xec>)
  4024d4:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4024d6:	2400      	movs	r4, #0
  4024d8:	9400      	str	r4, [sp, #0]
  4024da:	4623      	mov	r3, r4
  4024dc:	4622      	mov	r2, r4
  4024de:	4621      	mov	r1, r4
  4024e0:	20cf      	movs	r0, #207	; 0xcf
  4024e2:	4d0c      	ldr	r5, [pc, #48]	; (402514 <spi_read_reg+0xd8>)
  4024e4:	47a8      	blx	r5
		return N_FAIL;
  4024e6:	4620      	mov	r0, r4
  4024e8:	e010      	b.n	40250c <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  4024ea:	f89d 100d 	ldrb.w	r1, [sp, #13]
  4024ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
  4024f2:	0413      	lsls	r3, r2, #16
  4024f4:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  4024f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
  4024fc:	4313      	orrs	r3, r2
  4024fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
  402502:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402506:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40250a:	2001      	movs	r0, #1
}
  40250c:	b004      	add	sp, #16
  40250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402512:	bf00      	nop
  402514:	004021f1 	.word	0x004021f1
  402518:	00408e00 	.word	0x00408e00
  40251c:	00407fd0 	.word	0x00407fd0
  402520:	0040458d 	.word	0x0040458d
  402524:	00408aac 	.word	0x00408aac
  402528:	00407ffc 	.word	0x00407ffc
  40252c:	00402005 	.word	0x00402005
  402530:	00408ad8 	.word	0x00408ad8
  402534:	004020c1 	.word	0x004020c1
  402538:	00408b0c 	.word	0x00408b0c

0040253c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  40253c:	2000      	movs	r0, #0
  40253e:	4b01      	ldr	r3, [pc, #4]	; (402544 <nm_spi_deinit+0x8>)
  402540:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  402542:	4770      	bx	lr
  402544:	204008d8 	.word	0x204008d8

00402548 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  402548:	b500      	push	{lr}
  40254a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  40254c:	a901      	add	r1, sp, #4
  40254e:	4b03      	ldr	r3, [pc, #12]	; (40255c <nm_spi_read_reg+0x14>)
  402550:	4798      	blx	r3

	return u32Val;
}
  402552:	9801      	ldr	r0, [sp, #4]
  402554:	b003      	add	sp, #12
  402556:	f85d fb04 	ldr.w	pc, [sp], #4
  40255a:	bf00      	nop
  40255c:	0040243d 	.word	0x0040243d

00402560 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402560:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  402562:	4b04      	ldr	r3, [pc, #16]	; (402574 <nm_spi_read_reg_with_ret+0x14>)
  402564:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402566:	2801      	cmp	r0, #1

	return s8Ret;
}
  402568:	bf0c      	ite	eq
  40256a:	2000      	moveq	r0, #0
  40256c:	f06f 0005 	mvnne.w	r0, #5
  402570:	bd08      	pop	{r3, pc}
  402572:	bf00      	nop
  402574:	0040243d 	.word	0x0040243d

00402578 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402578:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40257a:	4b04      	ldr	r3, [pc, #16]	; (40258c <nm_spi_write_reg+0x14>)
  40257c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40257e:	2801      	cmp	r0, #1

	return s8Ret;
}
  402580:	bf0c      	ite	eq
  402582:	2000      	moveq	r0, #0
  402584:	f06f 0005 	mvnne.w	r0, #5
  402588:	bd08      	pop	{r3, pc}
  40258a:	bf00      	nop
  40258c:	004023a5 	.word	0x004023a5

00402590 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  402590:	b530      	push	{r4, r5, lr}
  402592:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  402594:	2300      	movs	r3, #0
  402596:	a902      	add	r1, sp, #8
  402598:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  40259c:	4a32      	ldr	r2, [pc, #200]	; (402668 <nm_spi_init+0xd8>)
  40259e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4025a0:	f64e 0024 	movw	r0, #59428	; 0xe824
  4025a4:	4b31      	ldr	r3, [pc, #196]	; (40266c <nm_spi_init+0xdc>)
  4025a6:	4798      	blx	r3
  4025a8:	b9f0      	cbnz	r0, 4025e8 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4025aa:	2201      	movs	r2, #1
  4025ac:	4b2e      	ldr	r3, [pc, #184]	; (402668 <nm_spi_init+0xd8>)
  4025ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4025b0:	f240 22c5 	movw	r2, #709	; 0x2c5
  4025b4:	492e      	ldr	r1, [pc, #184]	; (402670 <nm_spi_init+0xe0>)
  4025b6:	482f      	ldr	r0, [pc, #188]	; (402674 <nm_spi_init+0xe4>)
  4025b8:	4c2f      	ldr	r4, [pc, #188]	; (402678 <nm_spi_init+0xe8>)
  4025ba:	47a0      	blx	r4
  4025bc:	482f      	ldr	r0, [pc, #188]	; (40267c <nm_spi_init+0xec>)
  4025be:	47a0      	blx	r4
  4025c0:	482f      	ldr	r0, [pc, #188]	; (402680 <nm_spi_init+0xf0>)
  4025c2:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4025c4:	4669      	mov	r1, sp
  4025c6:	f64e 0024 	movw	r0, #59428	; 0xe824
  4025ca:	4b28      	ldr	r3, [pc, #160]	; (40266c <nm_spi_init+0xdc>)
  4025cc:	4798      	blx	r3
  4025ce:	4604      	mov	r4, r0
  4025d0:	b950      	cbnz	r0, 4025e8 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4025d2:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4025d6:	4926      	ldr	r1, [pc, #152]	; (402670 <nm_spi_init+0xe0>)
  4025d8:	4826      	ldr	r0, [pc, #152]	; (402674 <nm_spi_init+0xe4>)
  4025da:	4d27      	ldr	r5, [pc, #156]	; (402678 <nm_spi_init+0xe8>)
  4025dc:	47a8      	blx	r5
  4025de:	4829      	ldr	r0, [pc, #164]	; (402684 <nm_spi_init+0xf4>)
  4025e0:	47a8      	blx	r5
  4025e2:	4827      	ldr	r0, [pc, #156]	; (402680 <nm_spi_init+0xf0>)
  4025e4:	47a8      	blx	r5
			return 0;
  4025e6:	e03c      	b.n	402662 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  4025e8:	4b1f      	ldr	r3, [pc, #124]	; (402668 <nm_spi_init+0xd8>)
  4025ea:	781b      	ldrb	r3, [r3, #0]
  4025ec:	b9cb      	cbnz	r3, 402622 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  4025ee:	9900      	ldr	r1, [sp, #0]
  4025f0:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  4025f4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4025f8:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4025fa:	f64e 0024 	movw	r0, #59428	; 0xe824
  4025fe:	4b22      	ldr	r3, [pc, #136]	; (402688 <nm_spi_init+0xf8>)
  402600:	4798      	blx	r3
  402602:	4604      	mov	r4, r0
  402604:	b950      	cbnz	r0, 40261c <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402606:	f240 22d2 	movw	r2, #722	; 0x2d2
  40260a:	4919      	ldr	r1, [pc, #100]	; (402670 <nm_spi_init+0xe0>)
  40260c:	4819      	ldr	r0, [pc, #100]	; (402674 <nm_spi_init+0xe4>)
  40260e:	4d1a      	ldr	r5, [pc, #104]	; (402678 <nm_spi_init+0xe8>)
  402610:	47a8      	blx	r5
  402612:	481e      	ldr	r0, [pc, #120]	; (40268c <nm_spi_init+0xfc>)
  402614:	47a8      	blx	r5
  402616:	481a      	ldr	r0, [pc, #104]	; (402680 <nm_spi_init+0xf0>)
  402618:	47a8      	blx	r5
			return 0;
  40261a:	e022      	b.n	402662 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  40261c:	2201      	movs	r2, #1
  40261e:	4b12      	ldr	r3, [pc, #72]	; (402668 <nm_spi_init+0xd8>)
  402620:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  402622:	a901      	add	r1, sp, #4
  402624:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402628:	4b10      	ldr	r3, [pc, #64]	; (40266c <nm_spi_init+0xdc>)
  40262a:	4798      	blx	r3
  40262c:	b960      	cbnz	r0, 402648 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40262e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402632:	490f      	ldr	r1, [pc, #60]	; (402670 <nm_spi_init+0xe0>)
  402634:	480f      	ldr	r0, [pc, #60]	; (402674 <nm_spi_init+0xe4>)
  402636:	4c10      	ldr	r4, [pc, #64]	; (402678 <nm_spi_init+0xe8>)
  402638:	47a0      	blx	r4
  40263a:	4815      	ldr	r0, [pc, #84]	; (402690 <nm_spi_init+0x100>)
  40263c:	47a0      	blx	r4
  40263e:	4810      	ldr	r0, [pc, #64]	; (402680 <nm_spi_init+0xf0>)
  402640:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402642:	f06f 0405 	mvn.w	r4, #5
  402646:	e00c      	b.n	402662 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402648:	f64e 0024 	movw	r0, #59428	; 0xe824
  40264c:	4b11      	ldr	r3, [pc, #68]	; (402694 <nm_spi_init+0x104>)
  40264e:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  402650:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402654:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402658:	f64e 0024 	movw	r0, #59428	; 0xe824
  40265c:	4b0e      	ldr	r3, [pc, #56]	; (402698 <nm_spi_init+0x108>)
  40265e:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  402660:	2400      	movs	r4, #0
}
  402662:	4620      	mov	r0, r4
  402664:	b003      	add	sp, #12
  402666:	bd30      	pop	{r4, r5, pc}
  402668:	204008d8 	.word	0x204008d8
  40266c:	0040243d 	.word	0x0040243d
  402670:	004088f0 	.word	0x004088f0
  402674:	00407fd0 	.word	0x00407fd0
  402678:	0040458d 	.word	0x0040458d
  40267c:	00408b2c 	.word	0x00408b2c
  402680:	00407ffc 	.word	0x00407ffc
  402684:	00408b7c 	.word	0x00408b7c
  402688:	004023a5 	.word	0x004023a5
  40268c:	00408bac 	.word	0x00408bac
  402690:	00408be0 	.word	0x00408be0
  402694:	00402549 	.word	0x00402549
  402698:	00402579 	.word	0x00402579

0040269c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40269c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40269e:	b083      	sub	sp, #12
  4026a0:	4604      	mov	r4, r0
  4026a2:	460f      	mov	r7, r1
  4026a4:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4026a6:	2200      	movs	r2, #0
  4026a8:	9200      	str	r2, [sp, #0]
  4026aa:	462b      	mov	r3, r5
  4026ac:	4601      	mov	r1, r0
  4026ae:	20c8      	movs	r0, #200	; 0xc8
  4026b0:	4e23      	ldr	r6, [pc, #140]	; (402740 <nm_spi_read_block+0xa4>)
  4026b2:	47b0      	blx	r6
	if (result != N_OK) {
  4026b4:	2801      	cmp	r0, #1
  4026b6:	d00b      	beq.n	4026d0 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4026b8:	f44f 721d 	mov.w	r2, #628	; 0x274
  4026bc:	4921      	ldr	r1, [pc, #132]	; (402744 <nm_spi_read_block+0xa8>)
  4026be:	4822      	ldr	r0, [pc, #136]	; (402748 <nm_spi_read_block+0xac>)
  4026c0:	4d22      	ldr	r5, [pc, #136]	; (40274c <nm_spi_read_block+0xb0>)
  4026c2:	47a8      	blx	r5
  4026c4:	4621      	mov	r1, r4
  4026c6:	4822      	ldr	r0, [pc, #136]	; (402750 <nm_spi_read_block+0xb4>)
  4026c8:	47a8      	blx	r5
  4026ca:	4822      	ldr	r0, [pc, #136]	; (402754 <nm_spi_read_block+0xb8>)
  4026cc:	47a8      	blx	r5
  4026ce:	e032      	b.n	402736 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4026d0:	20c8      	movs	r0, #200	; 0xc8
  4026d2:	4b21      	ldr	r3, [pc, #132]	; (402758 <nm_spi_read_block+0xbc>)
  4026d4:	4798      	blx	r3
	if (result != N_OK) {
  4026d6:	2801      	cmp	r0, #1
  4026d8:	d012      	beq.n	402700 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4026da:	f240 227a 	movw	r2, #634	; 0x27a
  4026de:	4919      	ldr	r1, [pc, #100]	; (402744 <nm_spi_read_block+0xa8>)
  4026e0:	4819      	ldr	r0, [pc, #100]	; (402748 <nm_spi_read_block+0xac>)
  4026e2:	4d1a      	ldr	r5, [pc, #104]	; (40274c <nm_spi_read_block+0xb0>)
  4026e4:	47a8      	blx	r5
  4026e6:	4621      	mov	r1, r4
  4026e8:	481c      	ldr	r0, [pc, #112]	; (40275c <nm_spi_read_block+0xc0>)
  4026ea:	47a8      	blx	r5
  4026ec:	4819      	ldr	r0, [pc, #100]	; (402754 <nm_spi_read_block+0xb8>)
  4026ee:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4026f0:	2100      	movs	r1, #0
  4026f2:	9100      	str	r1, [sp, #0]
  4026f4:	460b      	mov	r3, r1
  4026f6:	460a      	mov	r2, r1
  4026f8:	20cf      	movs	r0, #207	; 0xcf
  4026fa:	4c11      	ldr	r4, [pc, #68]	; (402740 <nm_spi_read_block+0xa4>)
  4026fc:	47a0      	blx	r4
  4026fe:	e01a      	b.n	402736 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  402700:	2200      	movs	r2, #0
  402702:	4629      	mov	r1, r5
  402704:	4638      	mov	r0, r7
  402706:	4b16      	ldr	r3, [pc, #88]	; (402760 <nm_spi_read_block+0xc4>)
  402708:	4798      	blx	r3
	if (result != N_OK) {
  40270a:	2801      	cmp	r0, #1
  40270c:	d011      	beq.n	402732 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40270e:	f44f 7221 	mov.w	r2, #644	; 0x284
  402712:	490c      	ldr	r1, [pc, #48]	; (402744 <nm_spi_read_block+0xa8>)
  402714:	480c      	ldr	r0, [pc, #48]	; (402748 <nm_spi_read_block+0xac>)
  402716:	4c0d      	ldr	r4, [pc, #52]	; (40274c <nm_spi_read_block+0xb0>)
  402718:	47a0      	blx	r4
  40271a:	4812      	ldr	r0, [pc, #72]	; (402764 <nm_spi_read_block+0xc8>)
  40271c:	47a0      	blx	r4
  40271e:	480d      	ldr	r0, [pc, #52]	; (402754 <nm_spi_read_block+0xb8>)
  402720:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402722:	2100      	movs	r1, #0
  402724:	9100      	str	r1, [sp, #0]
  402726:	460b      	mov	r3, r1
  402728:	460a      	mov	r2, r1
  40272a:	20cf      	movs	r0, #207	; 0xcf
  40272c:	4c04      	ldr	r4, [pc, #16]	; (402740 <nm_spi_read_block+0xa4>)
  40272e:	47a0      	blx	r4
  402730:	e001      	b.n	402736 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402732:	2000      	movs	r0, #0
  402734:	e001      	b.n	40273a <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402736:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40273a:	b003      	add	sp, #12
  40273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40273e:	bf00      	nop
  402740:	004021f1 	.word	0x004021f1
  402744:	0040890c 	.word	0x0040890c
  402748:	00407fd0 	.word	0x00407fd0
  40274c:	0040458d 	.word	0x0040458d
  402750:	00408c08 	.word	0x00408c08
  402754:	00407ffc 	.word	0x00407ffc
  402758:	00402005 	.word	0x00402005
  40275c:	00408c38 	.word	0x00408c38
  402760:	004020c1 	.word	0x004020c1
  402764:	00408c70 	.word	0x00408c70

00402768 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40276c:	b085      	sub	sp, #20
  40276e:	4604      	mov	r4, r0
  402770:	4688      	mov	r8, r1
  402772:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402774:	2200      	movs	r2, #0
  402776:	9200      	str	r2, [sp, #0]
  402778:	462b      	mov	r3, r5
  40277a:	4601      	mov	r1, r0
  40277c:	20c7      	movs	r0, #199	; 0xc7
  40277e:	4e4c      	ldr	r6, [pc, #304]	; (4028b0 <nm_spi_write_block+0x148>)
  402780:	47b0      	blx	r6
	if (result != N_OK) {
  402782:	2801      	cmp	r0, #1
  402784:	d00b      	beq.n	40279e <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  402786:	f240 220f 	movw	r2, #527	; 0x20f
  40278a:	494a      	ldr	r1, [pc, #296]	; (4028b4 <nm_spi_write_block+0x14c>)
  40278c:	484a      	ldr	r0, [pc, #296]	; (4028b8 <nm_spi_write_block+0x150>)
  40278e:	4d4b      	ldr	r5, [pc, #300]	; (4028bc <nm_spi_write_block+0x154>)
  402790:	47a8      	blx	r5
  402792:	4621      	mov	r1, r4
  402794:	484a      	ldr	r0, [pc, #296]	; (4028c0 <nm_spi_write_block+0x158>)
  402796:	47a8      	blx	r5
  402798:	484a      	ldr	r0, [pc, #296]	; (4028c4 <nm_spi_write_block+0x15c>)
  40279a:	47a8      	blx	r5
  40279c:	e082      	b.n	4028a4 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40279e:	20c7      	movs	r0, #199	; 0xc7
  4027a0:	4b49      	ldr	r3, [pc, #292]	; (4028c8 <nm_spi_write_block+0x160>)
  4027a2:	4798      	blx	r3
	if (result != N_OK) {
  4027a4:	2801      	cmp	r0, #1
  4027a6:	d012      	beq.n	4027ce <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4027a8:	f240 2215 	movw	r2, #533	; 0x215
  4027ac:	4941      	ldr	r1, [pc, #260]	; (4028b4 <nm_spi_write_block+0x14c>)
  4027ae:	4842      	ldr	r0, [pc, #264]	; (4028b8 <nm_spi_write_block+0x150>)
  4027b0:	4d42      	ldr	r5, [pc, #264]	; (4028bc <nm_spi_write_block+0x154>)
  4027b2:	47a8      	blx	r5
  4027b4:	4621      	mov	r1, r4
  4027b6:	4845      	ldr	r0, [pc, #276]	; (4028cc <nm_spi_write_block+0x164>)
  4027b8:	47a8      	blx	r5
  4027ba:	4842      	ldr	r0, [pc, #264]	; (4028c4 <nm_spi_write_block+0x15c>)
  4027bc:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4027be:	2100      	movs	r1, #0
  4027c0:	9100      	str	r1, [sp, #0]
  4027c2:	460b      	mov	r3, r1
  4027c4:	460a      	mov	r2, r1
  4027c6:	20cf      	movs	r0, #207	; 0xcf
  4027c8:	4c39      	ldr	r4, [pc, #228]	; (4028b0 <nm_spi_write_block+0x148>)
  4027ca:	47a0      	blx	r4
  4027cc:	e06a      	b.n	4028a4 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  4027ce:	2400      	movs	r4, #0
  4027d0:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4027d4:	4f3e      	ldr	r7, [pc, #248]	; (4028d0 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4027d6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4028e8 <nm_spi_write_block+0x180>
  4027da:	462e      	mov	r6, r5
  4027dc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4027e0:	bf28      	it	cs
  4027e2:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  4027e6:	b92c      	cbnz	r4, 4027f4 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  4027e8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4027ec:	bf94      	ite	ls
  4027ee:	2303      	movls	r3, #3
  4027f0:	2301      	movhi	r3, #1
  4027f2:	e004      	b.n	4027fe <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  4027f4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4027f8:	bf94      	ite	ls
  4027fa:	2303      	movls	r3, #3
  4027fc:	2302      	movhi	r3, #2
		}
		cmd |= order;
  4027fe:	f063 030f 	orn	r3, r3, #15
  402802:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402806:	2101      	movs	r1, #1
  402808:	f10d 000b 	add.w	r0, sp, #11
  40280c:	47b8      	blx	r7
  40280e:	b150      	cbz	r0, 402826 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  402810:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402814:	492f      	ldr	r1, [pc, #188]	; (4028d4 <nm_spi_write_block+0x16c>)
  402816:	4828      	ldr	r0, [pc, #160]	; (4028b8 <nm_spi_write_block+0x150>)
  402818:	4c28      	ldr	r4, [pc, #160]	; (4028bc <nm_spi_write_block+0x154>)
  40281a:	47a0      	blx	r4
  40281c:	482e      	ldr	r0, [pc, #184]	; (4028d8 <nm_spi_write_block+0x170>)
  40281e:	47a0      	blx	r4
  402820:	4828      	ldr	r0, [pc, #160]	; (4028c4 <nm_spi_write_block+0x15c>)
  402822:	47a0      	blx	r4
  402824:	e028      	b.n	402878 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  402826:	4631      	mov	r1, r6
  402828:	eb08 0004 	add.w	r0, r8, r4
  40282c:	47b8      	blx	r7
  40282e:	b150      	cbz	r0, 402846 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402830:	f240 12b1 	movw	r2, #433	; 0x1b1
  402834:	4927      	ldr	r1, [pc, #156]	; (4028d4 <nm_spi_write_block+0x16c>)
  402836:	4820      	ldr	r0, [pc, #128]	; (4028b8 <nm_spi_write_block+0x150>)
  402838:	4c20      	ldr	r4, [pc, #128]	; (4028bc <nm_spi_write_block+0x154>)
  40283a:	47a0      	blx	r4
  40283c:	4827      	ldr	r0, [pc, #156]	; (4028dc <nm_spi_write_block+0x174>)
  40283e:	47a0      	blx	r4
  402840:	4820      	ldr	r0, [pc, #128]	; (4028c4 <nm_spi_write_block+0x15c>)
  402842:	47a0      	blx	r4
  402844:	e018      	b.n	402878 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402846:	f899 3000 	ldrb.w	r3, [r9]
  40284a:	b973      	cbnz	r3, 40286a <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40284c:	2102      	movs	r1, #2
  40284e:	a803      	add	r0, sp, #12
  402850:	47b8      	blx	r7
  402852:	b150      	cbz	r0, 40286a <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402854:	f240 12bb 	movw	r2, #443	; 0x1bb
  402858:	491e      	ldr	r1, [pc, #120]	; (4028d4 <nm_spi_write_block+0x16c>)
  40285a:	4817      	ldr	r0, [pc, #92]	; (4028b8 <nm_spi_write_block+0x150>)
  40285c:	4c17      	ldr	r4, [pc, #92]	; (4028bc <nm_spi_write_block+0x154>)
  40285e:	47a0      	blx	r4
  402860:	481f      	ldr	r0, [pc, #124]	; (4028e0 <nm_spi_write_block+0x178>)
  402862:	47a0      	blx	r4
  402864:	4817      	ldr	r0, [pc, #92]	; (4028c4 <nm_spi_write_block+0x15c>)
  402866:	47a0      	blx	r4
  402868:	e006      	b.n	402878 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  40286a:	4434      	add	r4, r6
  40286c:	b224      	sxth	r4, r4
		sz -= nbytes;
  40286e:	1bad      	subs	r5, r5, r6
  402870:	b2ad      	uxth	r5, r5
	} while (sz);
  402872:	2d00      	cmp	r5, #0
  402874:	d1b1      	bne.n	4027da <nm_spi_write_block+0x72>
  402876:	e013      	b.n	4028a0 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  402878:	f240 2226 	movw	r2, #550	; 0x226
  40287c:	490d      	ldr	r1, [pc, #52]	; (4028b4 <nm_spi_write_block+0x14c>)
  40287e:	480e      	ldr	r0, [pc, #56]	; (4028b8 <nm_spi_write_block+0x150>)
  402880:	4c0e      	ldr	r4, [pc, #56]	; (4028bc <nm_spi_write_block+0x154>)
  402882:	47a0      	blx	r4
  402884:	4817      	ldr	r0, [pc, #92]	; (4028e4 <nm_spi_write_block+0x17c>)
  402886:	47a0      	blx	r4
  402888:	480e      	ldr	r0, [pc, #56]	; (4028c4 <nm_spi_write_block+0x15c>)
  40288a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40288c:	2400      	movs	r4, #0
  40288e:	9400      	str	r4, [sp, #0]
  402890:	4623      	mov	r3, r4
  402892:	4622      	mov	r2, r4
  402894:	4621      	mov	r1, r4
  402896:	20cf      	movs	r0, #207	; 0xcf
  402898:	4d05      	ldr	r5, [pc, #20]	; (4028b0 <nm_spi_write_block+0x148>)
  40289a:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40289c:	4620      	mov	r0, r4
  40289e:	e003      	b.n	4028a8 <nm_spi_write_block+0x140>
  4028a0:	2000      	movs	r0, #0
  4028a2:	e001      	b.n	4028a8 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4028a4:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4028a8:	b005      	add	sp, #20
  4028aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4028ae:	bf00      	nop
  4028b0:	004021f1 	.word	0x004021f1
  4028b4:	00408de4 	.word	0x00408de4
  4028b8:	00407fd0 	.word	0x00407fd0
  4028bc:	0040458d 	.word	0x0040458d
  4028c0:	00408c98 	.word	0x00408c98
  4028c4:	00407ffc 	.word	0x00407ffc
  4028c8:	00402005 	.word	0x00402005
  4028cc:	00408cc8 	.word	0x00408cc8
  4028d0:	004021d1 	.word	0x004021d1
  4028d4:	004088fc 	.word	0x004088fc
  4028d8:	00408d00 	.word	0x00408d00
  4028dc:	00408d38 	.word	0x00408d38
  4028e0:	00408d6c 	.word	0x00408d6c
  4028e4:	00408da4 	.word	0x00408da4
  4028e8:	204008d8 	.word	0x204008d8

004028ec <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  4028ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028f0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4028f4:	2c00      	cmp	r4, #0
  4028f6:	d047      	beq.n	402988 <Socket_ReadSocketData+0x9c>
  4028f8:	4681      	mov	r9, r0
  4028fa:	460e      	mov	r6, r1
  4028fc:	4692      	mov	sl, r2
  4028fe:	4698      	mov	r8, r3
  402900:	0103      	lsls	r3, r0, #4
  402902:	4922      	ldr	r1, [pc, #136]	; (40298c <Socket_ReadSocketData+0xa0>)
  402904:	58cb      	ldr	r3, [r1, r3]
  402906:	2b00      	cmp	r3, #0
  402908:	d03e      	beq.n	402988 <Socket_ReadSocketData+0x9c>
  40290a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40290e:	889b      	ldrh	r3, [r3, #4]
  402910:	b29b      	uxth	r3, r3
  402912:	2b00      	cmp	r3, #0
  402914:	d038      	beq.n	402988 <Socket_ReadSocketData+0x9c>
  402916:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40291a:	7a9b      	ldrb	r3, [r3, #10]
  40291c:	b2db      	uxtb	r3, r3
  40291e:	2b01      	cmp	r3, #1
  402920:	d132      	bne.n	402988 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  402922:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402924:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402928:	f8df b078 	ldr.w	fp, [pc, #120]	; 4029a4 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40292c:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  40292e:	1ae3      	subs	r3, r4, r3
  402930:	b21b      	sxth	r3, r3
  402932:	2b00      	cmp	r3, #0
  402934:	dd03      	ble.n	40293e <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  402936:	88bd      	ldrh	r5, [r7, #4]
  402938:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  40293a:	2300      	movs	r3, #0
  40293c:	e001      	b.n	402942 <Socket_ReadSocketData+0x56>
  40293e:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  402940:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402942:	6839      	ldr	r1, [r7, #0]
  402944:	462a      	mov	r2, r5
  402946:	4640      	mov	r0, r8
  402948:	47d8      	blx	fp
  40294a:	b9a8      	cbnz	r0, 402978 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  40294c:	683b      	ldr	r3, [r7, #0]
  40294e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  402950:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  402952:	88f3      	ldrh	r3, [r6, #6]
  402954:	1b5b      	subs	r3, r3, r5
  402956:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  402958:	4b0d      	ldr	r3, [pc, #52]	; (402990 <Socket_ReadSocketData+0xa4>)
  40295a:	681b      	ldr	r3, [r3, #0]
  40295c:	b12b      	cbz	r3, 40296a <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  40295e:	4b0c      	ldr	r3, [pc, #48]	; (402990 <Socket_ReadSocketData+0xa4>)
  402960:	681b      	ldr	r3, [r3, #0]
  402962:	4632      	mov	r2, r6
  402964:	4651      	mov	r1, sl
  402966:	4648      	mov	r0, r9
  402968:	4798      	blx	r3

				u16ReadCount -= u16Read;
  40296a:	1b64      	subs	r4, r4, r5
  40296c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  40296e:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  402970:	2c00      	cmp	r4, #0
  402972:	d1db      	bne.n	40292c <Socket_ReadSocketData+0x40>
  402974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  402978:	4806      	ldr	r0, [pc, #24]	; (402994 <Socket_ReadSocketData+0xa8>)
  40297a:	4d07      	ldr	r5, [pc, #28]	; (402998 <Socket_ReadSocketData+0xac>)
  40297c:	47a8      	blx	r5
  40297e:	4621      	mov	r1, r4
  402980:	4806      	ldr	r0, [pc, #24]	; (40299c <Socket_ReadSocketData+0xb0>)
  402982:	47a8      	blx	r5
  402984:	4806      	ldr	r0, [pc, #24]	; (4029a0 <Socket_ReadSocketData+0xb4>)
  402986:	47a8      	blx	r5
  402988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40298c:	20400f4c 	.word	0x20400f4c
  402990:	20400ffc 	.word	0x20400ffc
  402994:	00408294 	.word	0x00408294
  402998:	0040458d 	.word	0x0040458d
  40299c:	00408e10 	.word	0x00408e10
  4029a0:	00407ffc 	.word	0x00407ffc
  4029a4:	00401059 	.word	0x00401059

004029a8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4029aa:	b099      	sub	sp, #100	; 0x64
  4029ac:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4029ae:	2841      	cmp	r0, #65	; 0x41
  4029b0:	d119      	bne.n	4029e6 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4029b2:	2300      	movs	r3, #0
  4029b4:	2204      	movs	r2, #4
  4029b6:	a907      	add	r1, sp, #28
  4029b8:	4620      	mov	r0, r4
  4029ba:	4ca4      	ldr	r4, [pc, #656]	; (402c4c <m2m_ip_cb+0x2a4>)
  4029bc:	47a0      	blx	r4
  4029be:	2800      	cmp	r0, #0
  4029c0:	f040 8141 	bne.w	402c46 <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  4029c4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4029c8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4029cc:	4ba0      	ldr	r3, [pc, #640]	; (402c50 <m2m_ip_cb+0x2a8>)
  4029ce:	681b      	ldr	r3, [r3, #0]
  4029d0:	2b00      	cmp	r3, #0
  4029d2:	f000 8138 	beq.w	402c46 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4029d6:	4b9e      	ldr	r3, [pc, #632]	; (402c50 <m2m_ip_cb+0x2a8>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	aa03      	add	r2, sp, #12
  4029dc:	2101      	movs	r1, #1
  4029de:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4029e2:	4798      	blx	r3
  4029e4:	e12f      	b.n	402c46 <m2m_ip_cb+0x29e>
  4029e6:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  4029e8:	2842      	cmp	r0, #66	; 0x42
  4029ea:	d119      	bne.n	402a20 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4029ec:	2300      	movs	r3, #0
  4029ee:	2204      	movs	r2, #4
  4029f0:	a907      	add	r1, sp, #28
  4029f2:	4620      	mov	r0, r4
  4029f4:	4c95      	ldr	r4, [pc, #596]	; (402c4c <m2m_ip_cb+0x2a4>)
  4029f6:	47a0      	blx	r4
  4029f8:	2800      	cmp	r0, #0
  4029fa:	f040 8124 	bne.w	402c46 <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  4029fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402a02:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402a06:	4b92      	ldr	r3, [pc, #584]	; (402c50 <m2m_ip_cb+0x2a8>)
  402a08:	681b      	ldr	r3, [r3, #0]
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	f000 811b 	beq.w	402c46 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402a10:	4b8f      	ldr	r3, [pc, #572]	; (402c50 <m2m_ip_cb+0x2a8>)
  402a12:	681b      	ldr	r3, [r3, #0]
  402a14:	aa03      	add	r2, sp, #12
  402a16:	2102      	movs	r1, #2
  402a18:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402a1c:	4798      	blx	r3
  402a1e:	e112      	b.n	402c46 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402a20:	2843      	cmp	r0, #67	; 0x43
  402a22:	d13f      	bne.n	402aa4 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402a24:	2300      	movs	r3, #0
  402a26:	220c      	movs	r2, #12
  402a28:	eb0d 0102 	add.w	r1, sp, r2
  402a2c:	4620      	mov	r0, r4
  402a2e:	4c87      	ldr	r4, [pc, #540]	; (402c4c <m2m_ip_cb+0x2a4>)
  402a30:	47a0      	blx	r4
  402a32:	2800      	cmp	r0, #0
  402a34:	f040 8107 	bne.w	402c46 <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  402a38:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  402a3c:	2b00      	cmp	r3, #0
  402a3e:	db19      	blt.n	402a74 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  402a40:	4a84      	ldr	r2, [pc, #528]	; (402c54 <m2m_ip_cb+0x2ac>)
  402a42:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402a46:	2100      	movs	r1, #0
  402a48:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  402a4a:	2101      	movs	r1, #1
  402a4c:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  402a4e:	4982      	ldr	r1, [pc, #520]	; (402c58 <m2m_ip_cb+0x2b0>)
  402a50:	880a      	ldrh	r2, [r1, #0]
  402a52:	3201      	adds	r2, #1
  402a54:	b292      	uxth	r2, r2
  402a56:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  402a58:	880a      	ldrh	r2, [r1, #0]
  402a5a:	b292      	uxth	r2, r2
  402a5c:	b91a      	cbnz	r2, 402a66 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  402a5e:	880a      	ldrh	r2, [r1, #0]
  402a60:	3201      	adds	r2, #1
  402a62:	b292      	uxth	r2, r2
  402a64:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  402a66:	4a7c      	ldr	r2, [pc, #496]	; (402c58 <m2m_ip_cb+0x2b0>)
  402a68:	8811      	ldrh	r1, [r2, #0]
  402a6a:	b289      	uxth	r1, r1
  402a6c:	4a79      	ldr	r2, [pc, #484]	; (402c54 <m2m_ip_cb+0x2ac>)
  402a6e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402a72:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  402a74:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  402a78:	2302      	movs	r3, #2
  402a7a:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  402a7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  402a82:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  402a86:	9b04      	ldr	r3, [sp, #16]
  402a88:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  402a8a:	4b71      	ldr	r3, [pc, #452]	; (402c50 <m2m_ip_cb+0x2a8>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	2b00      	cmp	r3, #0
  402a90:	f000 80d9 	beq.w	402c46 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  402a94:	4b6e      	ldr	r3, [pc, #440]	; (402c50 <m2m_ip_cb+0x2a8>)
  402a96:	681b      	ldr	r3, [r3, #0]
  402a98:	aa07      	add	r2, sp, #28
  402a9a:	2104      	movs	r1, #4
  402a9c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  402aa0:	4798      	blx	r3
  402aa2:	e0d0      	b.n	402c46 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  402aa4:	2844      	cmp	r0, #68	; 0x44
  402aa6:	d001      	beq.n	402aac <m2m_ip_cb+0x104>
  402aa8:	284b      	cmp	r0, #75	; 0x4b
  402aaa:	d124      	bne.n	402af6 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  402aac:	2300      	movs	r3, #0
  402aae:	2204      	movs	r2, #4
  402ab0:	a907      	add	r1, sp, #28
  402ab2:	4620      	mov	r0, r4
  402ab4:	4c65      	ldr	r4, [pc, #404]	; (402c4c <m2m_ip_cb+0x2a4>)
  402ab6:	47a0      	blx	r4
  402ab8:	2800      	cmp	r0, #0
  402aba:	f040 80c4 	bne.w	402c46 <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  402abe:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402ac2:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402ac6:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402aca:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  402ace:	b93b      	cbnz	r3, 402ae0 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  402ad0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402ad4:	3b08      	subs	r3, #8
  402ad6:	b29b      	uxth	r3, r3
  402ad8:	4a5e      	ldr	r2, [pc, #376]	; (402c54 <m2m_ip_cb+0x2ac>)
  402ada:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402ade:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  402ae0:	4b5b      	ldr	r3, [pc, #364]	; (402c50 <m2m_ip_cb+0x2a8>)
  402ae2:	681b      	ldr	r3, [r3, #0]
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	f000 80ae 	beq.w	402c46 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402aea:	4b59      	ldr	r3, [pc, #356]	; (402c50 <m2m_ip_cb+0x2a8>)
  402aec:	681b      	ldr	r3, [r3, #0]
  402aee:	aa03      	add	r2, sp, #12
  402af0:	2105      	movs	r1, #5
  402af2:	4798      	blx	r3
  402af4:	e0a7      	b.n	402c46 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402af6:	284a      	cmp	r0, #74	; 0x4a
  402af8:	d113      	bne.n	402b22 <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402afa:	2300      	movs	r3, #0
  402afc:	2244      	movs	r2, #68	; 0x44
  402afe:	a907      	add	r1, sp, #28
  402b00:	4620      	mov	r0, r4
  402b02:	4c52      	ldr	r4, [pc, #328]	; (402c4c <m2m_ip_cb+0x2a4>)
  402b04:	47a0      	blx	r4
  402b06:	2800      	cmp	r0, #0
  402b08:	f040 809d 	bne.w	402c46 <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  402b0c:	4b53      	ldr	r3, [pc, #332]	; (402c5c <m2m_ip_cb+0x2b4>)
  402b0e:	681b      	ldr	r3, [r3, #0]
  402b10:	2b00      	cmp	r3, #0
  402b12:	f000 8098 	beq.w	402c46 <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402b16:	4b51      	ldr	r3, [pc, #324]	; (402c5c <m2m_ip_cb+0x2b4>)
  402b18:	681b      	ldr	r3, [r3, #0]
  402b1a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402b1c:	a807      	add	r0, sp, #28
  402b1e:	4798      	blx	r3
  402b20:	e091      	b.n	402c46 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  402b22:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402b26:	b2db      	uxtb	r3, r3
  402b28:	2b07      	cmp	r3, #7
  402b2a:	d84d      	bhi.n	402bc8 <m2m_ip_cb+0x220>
  402b2c:	2285      	movs	r2, #133	; 0x85
  402b2e:	fa22 f303 	lsr.w	r3, r2, r3
  402b32:	f013 0f01 	tst.w	r3, #1
  402b36:	d047      	beq.n	402bc8 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402b38:	2848      	cmp	r0, #72	; 0x48
  402b3a:	bf14      	ite	ne
  402b3c:	2706      	movne	r7, #6
  402b3e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  402b40:	2300      	movs	r3, #0
  402b42:	2210      	movs	r2, #16
  402b44:	a903      	add	r1, sp, #12
  402b46:	4620      	mov	r0, r4
  402b48:	4e40      	ldr	r6, [pc, #256]	; (402c4c <m2m_ip_cb+0x2a4>)
  402b4a:	47b0      	blx	r6
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d17a      	bne.n	402c46 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  402b50:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  402b54:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  402b58:	4a3e      	ldr	r2, [pc, #248]	; (402c54 <m2m_ip_cb+0x2ac>)
  402b5a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402b5e:	2300      	movs	r3, #0
  402b60:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  402b62:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  402b66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  402b6a:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  402b6e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  402b72:	9e04      	ldr	r6, [sp, #16]
  402b74:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402b76:	88d2      	ldrh	r2, [r2, #6]
  402b78:	b292      	uxth	r2, r2
  402b7a:	4291      	cmp	r1, r2
  402b7c:	d11b      	bne.n	402bb6 <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  402b7e:	f1be 0f00 	cmp.w	lr, #0
  402b82:	dd0a      	ble.n	402b9a <m2m_ip_cb+0x1f2>
  402b84:	45ae      	cmp	lr, r5
  402b86:	da08      	bge.n	402b9a <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402b88:	fa1f f28e 	uxth.w	r2, lr
  402b8c:	9200      	str	r2, [sp, #0]
  402b8e:	4423      	add	r3, r4
  402b90:	463a      	mov	r2, r7
  402b92:	a907      	add	r1, sp, #28
  402b94:	4c32      	ldr	r4, [pc, #200]	; (402c60 <m2m_ip_cb+0x2b8>)
  402b96:	47a0      	blx	r4
  402b98:	e055      	b.n	402c46 <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402b9a:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402b9e:	2300      	movs	r3, #0
  402ba0:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  402ba2:	4b2b      	ldr	r3, [pc, #172]	; (402c50 <m2m_ip_cb+0x2a8>)
  402ba4:	681b      	ldr	r3, [r3, #0]
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	d04d      	beq.n	402c46 <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402baa:	4b29      	ldr	r3, [pc, #164]	; (402c50 <m2m_ip_cb+0x2a8>)
  402bac:	681b      	ldr	r3, [r3, #0]
  402bae:	aa07      	add	r2, sp, #28
  402bb0:	4639      	mov	r1, r7
  402bb2:	4798      	blx	r3
  402bb4:	e047      	b.n	402c46 <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  402bb6:	2d10      	cmp	r5, #16
  402bb8:	d945      	bls.n	402c46 <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  402bba:	2301      	movs	r3, #1
  402bbc:	2200      	movs	r2, #0
  402bbe:	4611      	mov	r1, r2
  402bc0:	4610      	mov	r0, r2
  402bc2:	4c22      	ldr	r4, [pc, #136]	; (402c4c <m2m_ip_cb+0x2a4>)
  402bc4:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  402bc6:	e03e      	b.n	402c46 <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402bc8:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402bcc:	2b45      	cmp	r3, #69	; 0x45
  402bce:	d001      	beq.n	402bd4 <m2m_ip_cb+0x22c>
  402bd0:	284c      	cmp	r0, #76	; 0x4c
  402bd2:	d123      	bne.n	402c1c <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402bd4:	2847      	cmp	r0, #71	; 0x47
  402bd6:	bf14      	ite	ne
  402bd8:	2507      	movne	r5, #7
  402bda:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402bdc:	2300      	movs	r3, #0
  402bde:	2208      	movs	r2, #8
  402be0:	a907      	add	r1, sp, #28
  402be2:	4620      	mov	r0, r4
  402be4:	4c19      	ldr	r4, [pc, #100]	; (402c4c <m2m_ip_cb+0x2a4>)
  402be6:	47a0      	blx	r4
  402be8:	2800      	cmp	r0, #0
  402bea:	d12c      	bne.n	402c46 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  402bec:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  402bf0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402bf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402bf8:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402bfc:	4b15      	ldr	r3, [pc, #84]	; (402c54 <m2m_ip_cb+0x2ac>)
  402bfe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402c02:	88db      	ldrh	r3, [r3, #6]
  402c04:	b29b      	uxth	r3, r3
  402c06:	429a      	cmp	r2, r3
  402c08:	d11d      	bne.n	402c46 <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  402c0a:	4b11      	ldr	r3, [pc, #68]	; (402c50 <m2m_ip_cb+0x2a8>)
  402c0c:	681b      	ldr	r3, [r3, #0]
  402c0e:	b1d3      	cbz	r3, 402c46 <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  402c10:	4b0f      	ldr	r3, [pc, #60]	; (402c50 <m2m_ip_cb+0x2a8>)
  402c12:	681b      	ldr	r3, [r3, #0]
  402c14:	aa03      	add	r2, sp, #12
  402c16:	4629      	mov	r1, r5
  402c18:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  402c1a:	e014      	b.n	402c46 <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  402c1c:	2852      	cmp	r0, #82	; 0x52
  402c1e:	d112      	bne.n	402c46 <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  402c20:	2301      	movs	r3, #1
  402c22:	2214      	movs	r2, #20
  402c24:	a907      	add	r1, sp, #28
  402c26:	4620      	mov	r0, r4
  402c28:	4c08      	ldr	r4, [pc, #32]	; (402c4c <m2m_ip_cb+0x2a4>)
  402c2a:	47a0      	blx	r4
  402c2c:	b958      	cbnz	r0, 402c46 <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  402c2e:	4b0d      	ldr	r3, [pc, #52]	; (402c64 <m2m_ip_cb+0x2bc>)
  402c30:	9a08      	ldr	r2, [sp, #32]
  402c32:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  402c34:	681b      	ldr	r3, [r3, #0]
  402c36:	b133      	cbz	r3, 402c46 <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  402c38:	4b0a      	ldr	r3, [pc, #40]	; (402c64 <m2m_ip_cb+0x2bc>)
  402c3a:	681b      	ldr	r3, [r3, #0]
  402c3c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  402c40:	9909      	ldr	r1, [sp, #36]	; 0x24
  402c42:	9807      	ldr	r0, [sp, #28]
  402c44:	4798      	blx	r3
			}
		}
	}
}
  402c46:	b019      	add	sp, #100	; 0x64
  402c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c4a:	bf00      	nop
  402c4c:	00401059 	.word	0x00401059
  402c50:	20400ffc 	.word	0x20400ffc
  402c54:	20400f4c 	.word	0x20400f4c
  402c58:	204008da 	.word	0x204008da
  402c5c:	20401004 	.word	0x20401004
  402c60:	004028ed 	.word	0x004028ed
  402c64:	20401000 	.word	0x20401000

00402c68 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  402c68:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  402c6a:	4b0a      	ldr	r3, [pc, #40]	; (402c94 <socketInit+0x2c>)
  402c6c:	781b      	ldrb	r3, [r3, #0]
  402c6e:	f013 0fff 	tst.w	r3, #255	; 0xff
  402c72:	d10e      	bne.n	402c92 <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  402c74:	22b0      	movs	r2, #176	; 0xb0
  402c76:	2100      	movs	r1, #0
  402c78:	4807      	ldr	r0, [pc, #28]	; (402c98 <socketInit+0x30>)
  402c7a:	4b08      	ldr	r3, [pc, #32]	; (402c9c <socketInit+0x34>)
  402c7c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  402c7e:	4908      	ldr	r1, [pc, #32]	; (402ca0 <socketInit+0x38>)
  402c80:	2002      	movs	r0, #2
  402c82:	4b08      	ldr	r3, [pc, #32]	; (402ca4 <socketInit+0x3c>)
  402c84:	4798      	blx	r3
		gbSocketInit=1;
  402c86:	2201      	movs	r2, #1
  402c88:	4b02      	ldr	r3, [pc, #8]	; (402c94 <socketInit+0x2c>)
  402c8a:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  402c8c:	2200      	movs	r2, #0
  402c8e:	4b06      	ldr	r3, [pc, #24]	; (402ca8 <socketInit+0x40>)
  402c90:	801a      	strh	r2, [r3, #0]
  402c92:	bd08      	pop	{r3, pc}
  402c94:	204008d9 	.word	0x204008d9
  402c98:	20400f4c 	.word	0x20400f4c
  402c9c:	004009fd 	.word	0x004009fd
  402ca0:	004029a9 	.word	0x004029a9
  402ca4:	00401169 	.word	0x00401169
  402ca8:	204008da 	.word	0x204008da

00402cac <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402cac:	4b02      	ldr	r3, [pc, #8]	; (402cb8 <registerSocketCallback+0xc>)
  402cae:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  402cb0:	4b02      	ldr	r3, [pc, #8]	; (402cbc <registerSocketCallback+0x10>)
  402cb2:	6019      	str	r1, [r3, #0]
  402cb4:	4770      	bx	lr
  402cb6:	bf00      	nop
  402cb8:	20400ffc 	.word	0x20400ffc
  402cbc:	20401004 	.word	0x20401004

00402cc0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  402cc0:	b570      	push	{r4, r5, r6, lr}
  402cc2:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402cc4:	2802      	cmp	r0, #2
  402cc6:	d14b      	bne.n	402d60 <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  402cc8:	2901      	cmp	r1, #1
  402cca:	d04c      	beq.n	402d66 <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402ccc:	2902      	cmp	r1, #2
  402cce:	d04d      	beq.n	402d6c <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  402cd0:	f04f 34ff 	mov.w	r4, #4294967295
  402cd4:	e058      	b.n	402d88 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402cd6:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402cd8:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  402cdc:	7a9b      	ldrb	r3, [r3, #10]
  402cde:	f013 0fff 	tst.w	r3, #255	; 0xff
  402ce2:	d136      	bne.n	402d52 <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402ce4:	482a      	ldr	r0, [pc, #168]	; (402d90 <socket+0xd0>)
  402ce6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402cea:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402cec:	2210      	movs	r2, #16
  402cee:	2100      	movs	r1, #0
  402cf0:	4b28      	ldr	r3, [pc, #160]	; (402d94 <socket+0xd4>)
  402cf2:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  402cf4:	4b26      	ldr	r3, [pc, #152]	; (402d90 <socket+0xd0>)
  402cf6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402cfa:	2201      	movs	r2, #1
  402cfc:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  402cfe:	4a26      	ldr	r2, [pc, #152]	; (402d98 <socket+0xd8>)
  402d00:	8813      	ldrh	r3, [r2, #0]
  402d02:	3301      	adds	r3, #1
  402d04:	b29b      	uxth	r3, r3
  402d06:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  402d08:	8813      	ldrh	r3, [r2, #0]
  402d0a:	b29b      	uxth	r3, r3
  402d0c:	b91b      	cbnz	r3, 402d16 <socket+0x56>
					++gu16SessionID;
  402d0e:	8813      	ldrh	r3, [r2, #0]
  402d10:	3301      	adds	r3, #1
  402d12:	b29b      	uxth	r3, r3
  402d14:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  402d16:	4b20      	ldr	r3, [pc, #128]	; (402d98 <socket+0xd8>)
  402d18:	881a      	ldrh	r2, [r3, #0]
  402d1a:	b292      	uxth	r2, r2
  402d1c:	4b1c      	ldr	r3, [pc, #112]	; (402d90 <socket+0xd0>)
  402d1e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402d22:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  402d24:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  402d26:	f016 0f01 	tst.w	r6, #1
  402d2a:	d02d      	beq.n	402d88 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  402d2c:	aa06      	add	r2, sp, #24
  402d2e:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  402d32:	4b17      	ldr	r3, [pc, #92]	; (402d90 <socket+0xd0>)
  402d34:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  402d38:	2321      	movs	r3, #33	; 0x21
  402d3a:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  402d3c:	2300      	movs	r3, #0
  402d3e:	9302      	str	r3, [sp, #8]
  402d40:	9301      	str	r3, [sp, #4]
  402d42:	9300      	str	r3, [sp, #0]
  402d44:	2304      	movs	r3, #4
  402d46:	2150      	movs	r1, #80	; 0x50
  402d48:	2002      	movs	r0, #2
  402d4a:	4d14      	ldr	r5, [pc, #80]	; (402d9c <socket+0xdc>)
  402d4c:	47a8      	blx	r5
  402d4e:	e01b      	b.n	402d88 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  402d50:	480f      	ldr	r0, [pc, #60]	; (402d90 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  402d52:	3401      	adds	r4, #1
  402d54:	b2e4      	uxtb	r4, r4
  402d56:	428c      	cmp	r4, r1
  402d58:	d3bd      	bcc.n	402cd6 <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  402d5a:	f04f 34ff 	mov.w	r4, #4294967295
  402d5e:	e013      	b.n	402d88 <socket+0xc8>
  402d60:	f04f 34ff 	mov.w	r4, #4294967295
  402d64:	e010      	b.n	402d88 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  402d66:	2107      	movs	r1, #7
			u8Count = 0;
  402d68:	2400      	movs	r4, #0
  402d6a:	e001      	b.n	402d70 <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  402d6c:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  402d6e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402d70:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402d72:	4b07      	ldr	r3, [pc, #28]	; (402d90 <socket+0xd0>)
  402d74:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402d78:	7a9b      	ldrb	r3, [r3, #10]
  402d7a:	f013 0fff 	tst.w	r3, #255	; 0xff
  402d7e:	d1e7      	bne.n	402d50 <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402d80:	4803      	ldr	r0, [pc, #12]	; (402d90 <socket+0xd0>)
  402d82:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402d86:	e7b0      	b.n	402cea <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  402d88:	4620      	mov	r0, r4
  402d8a:	b006      	add	sp, #24
  402d8c:	bd70      	pop	{r4, r5, r6, pc}
  402d8e:	bf00      	nop
  402d90:	20400f4c 	.word	0x20400f4c
  402d94:	004009fd 	.word	0x004009fd
  402d98:	204008da 	.word	0x204008da
  402d9c:	00400b61 	.word	0x00400b61

00402da0 <bind>:
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402da0:	2900      	cmp	r1, #0
  402da2:	d02e      	beq.n	402e02 <bind+0x62>

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402da4:	b510      	push	{r4, lr}
  402da6:	b088      	sub	sp, #32
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402da8:	2800      	cmp	r0, #0
  402daa:	db23      	blt.n	402df4 <bind+0x54>
  402dac:	4b16      	ldr	r3, [pc, #88]	; (402e08 <bind+0x68>)
  402dae:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402db2:	7a9b      	ldrb	r3, [r3, #10]
  402db4:	b2db      	uxtb	r3, r3
  402db6:	b302      	cbz	r2, 402dfa <bind+0x5a>
  402db8:	2b01      	cmp	r3, #1
  402dba:	d11e      	bne.n	402dfa <bind+0x5a>
  402dbc:	4604      	mov	r4, r0
	{
		tstrBindCmd			strBind;

		/* Build the bind request. */
		strBind.sock = sock;
  402dbe:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402dc2:	2208      	movs	r2, #8
  402dc4:	a805      	add	r0, sp, #20
  402dc6:	4b11      	ldr	r3, [pc, #68]	; (402e0c <bind+0x6c>)
  402dc8:	4798      	blx	r3

		strBind.strAddr.u16Family	= strBind.strAddr.u16Family;
		strBind.strAddr.u16Port		= strBind.strAddr.u16Port;
		strBind.strAddr.u32IPAddr	= strBind.strAddr.u32IPAddr;
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
  402dca:	480f      	ldr	r0, [pc, #60]	; (402e08 <bind+0x68>)
  402dcc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402dd0:	88c3      	ldrh	r3, [r0, #6]
  402dd2:	f8ad 301e 	strh.w	r3, [sp, #30]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_BIND, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
  402dd6:	2300      	movs	r3, #0
  402dd8:	9302      	str	r3, [sp, #8]
  402dda:	9301      	str	r3, [sp, #4]
  402ddc:	9300      	str	r3, [sp, #0]
  402dde:	230c      	movs	r3, #12
  402de0:	aa05      	add	r2, sp, #20
  402de2:	2141      	movs	r1, #65	; 0x41
  402de4:	2002      	movs	r0, #2
  402de6:	4c0a      	ldr	r4, [pc, #40]	; (402e10 <bind+0x70>)
  402de8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402dea:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402dec:	bf18      	it	ne
  402dee:	f06f 0008 	mvnne.w	r0, #8
  402df2:	e004      	b.n	402dfe <bind+0x5e>
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402df4:	f06f 0005 	mvn.w	r0, #5
  402df8:	e001      	b.n	402dfe <bind+0x5e>
  402dfa:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  402dfe:	b008      	add	sp, #32
  402e00:	bd10      	pop	{r4, pc}
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402e02:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  402e06:	4770      	bx	lr
  402e08:	20400f4c 	.word	0x20400f4c
  402e0c:	004009e9 	.word	0x004009e9
  402e10:	00400b61 	.word	0x00400b61

00402e14 <listen>:
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402e14:	2800      	cmp	r0, #0
  402e16:	db21      	blt.n	402e5c <listen+0x48>
  402e18:	4b14      	ldr	r3, [pc, #80]	; (402e6c <listen+0x58>)
  402e1a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402e1e:	7a9b      	ldrb	r3, [r3, #10]
  402e20:	b2db      	uxtb	r3, r3
  402e22:	2b01      	cmp	r3, #1
  402e24:	d11d      	bne.n	402e62 <listen+0x4e>

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
  402e26:	b510      	push	{r4, lr}
  402e28:	b086      	sub	sp, #24
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
  402e2a:	f88d 0014 	strb.w	r0, [sp, #20]
		strListen.u8BackLog = backlog;
  402e2e:	f88d 1015 	strb.w	r1, [sp, #21]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
  402e32:	4b0e      	ldr	r3, [pc, #56]	; (402e6c <listen+0x58>)
  402e34:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402e38:	88c3      	ldrh	r3, [r0, #6]
  402e3a:	f8ad 3016 	strh.w	r3, [sp, #22]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
  402e3e:	2300      	movs	r3, #0
  402e40:	9302      	str	r3, [sp, #8]
  402e42:	9301      	str	r3, [sp, #4]
  402e44:	9300      	str	r3, [sp, #0]
  402e46:	2304      	movs	r3, #4
  402e48:	aa05      	add	r2, sp, #20
  402e4a:	2142      	movs	r1, #66	; 0x42
  402e4c:	2002      	movs	r0, #2
  402e4e:	4c08      	ldr	r4, [pc, #32]	; (402e70 <listen+0x5c>)
  402e50:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402e52:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402e54:	bf18      	it	ne
  402e56:	f06f 0008 	mvnne.w	r0, #8
  402e5a:	e005      	b.n	402e68 <listen+0x54>
Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402e5c:	f06f 0005 	mvn.w	r0, #5
  402e60:	4770      	bx	lr
  402e62:	f06f 0005 	mvn.w	r0, #5
  402e66:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  402e68:	b006      	add	sp, #24
  402e6a:	bd10      	pop	{r4, pc}
  402e6c:	20400f4c 	.word	0x20400f4c
  402e70:	00400b61 	.word	0x00400b61

00402e74 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
  402e74:	2800      	cmp	r0, #0
  402e76:	db0a      	blt.n	402e8e <accept+0x1a>
  402e78:	4b06      	ldr	r3, [pc, #24]	; (402e94 <accept+0x20>)
  402e7a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402e7e:	7a83      	ldrb	r3, [r0, #10]
  402e80:	b2db      	uxtb	r3, r3
	{
		s8Ret = SOCK_ERR_NO_ERROR;
  402e82:	2b01      	cmp	r3, #1
  402e84:	bf14      	ite	ne
  402e86:	f06f 0005 	mvnne.w	r0, #5
  402e8a:	2000      	moveq	r0, #0
  402e8c:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402e8e:	f06f 0005 	mvn.w	r0, #5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
	{
		s8Ret = SOCK_ERR_NO_ERROR;
	}
	return s8Ret;
}
  402e92:	4770      	bx	lr
  402e94:	20400f4c 	.word	0x20400f4c

00402e98 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  402e98:	b530      	push	{r4, r5, lr}
  402e9a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  402e9c:	460c      	mov	r4, r1
  402e9e:	3100      	adds	r1, #0
  402ea0:	bf18      	it	ne
  402ea2:	2101      	movne	r1, #1
  402ea4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  402ea8:	bf88      	it	hi
  402eaa:	2100      	movhi	r1, #0
  402eac:	2900      	cmp	r1, #0
  402eae:	d036      	beq.n	402f1e <send+0x86>
  402eb0:	2800      	cmp	r0, #0
  402eb2:	db34      	blt.n	402f1e <send+0x86>
  402eb4:	4b1d      	ldr	r3, [pc, #116]	; (402f2c <send+0x94>)
  402eb6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402eba:	7a9b      	ldrb	r3, [r3, #10]
  402ebc:	b2db      	uxtb	r3, r3
  402ebe:	2b01      	cmp	r3, #1
  402ec0:	d130      	bne.n	402f24 <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  402ec2:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  402ec6:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  402eca:	4b18      	ldr	r3, [pc, #96]	; (402f2c <send+0x94>)
  402ecc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ed0:	88db      	ldrh	r3, [r3, #6]
  402ed2:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  402ed6:	2807      	cmp	r0, #7
  402ed8:	bfb4      	ite	lt
  402eda:	2550      	movlt	r5, #80	; 0x50
  402edc:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402ede:	4b13      	ldr	r3, [pc, #76]	; (402f2c <send+0x94>)
  402ee0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ee4:	7adb      	ldrb	r3, [r3, #11]
  402ee6:	f013 0f01 	tst.w	r3, #1
  402eea:	d006      	beq.n	402efa <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  402eec:	4b0f      	ldr	r3, [pc, #60]	; (402f2c <send+0x94>)
  402eee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402ef2:	8905      	ldrh	r5, [r0, #8]
  402ef4:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  402ef6:	214c      	movs	r1, #76	; 0x4c
  402ef8:	e000      	b.n	402efc <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  402efa:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402efc:	9502      	str	r5, [sp, #8]
  402efe:	9201      	str	r2, [sp, #4]
  402f00:	9400      	str	r4, [sp, #0]
  402f02:	2310      	movs	r3, #16
  402f04:	eb0d 0203 	add.w	r2, sp, r3
  402f08:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402f0c:	2002      	movs	r0, #2
  402f0e:	4c08      	ldr	r4, [pc, #32]	; (402f30 <send+0x98>)
  402f10:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402f12:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402f14:	bf0c      	ite	eq
  402f16:	2000      	moveq	r0, #0
  402f18:	f06f 000d 	mvnne.w	r0, #13
  402f1c:	e004      	b.n	402f28 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402f1e:	f06f 0005 	mvn.w	r0, #5
  402f22:	e001      	b.n	402f28 <send+0x90>
  402f24:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  402f28:	b009      	add	sp, #36	; 0x24
  402f2a:	bd30      	pop	{r4, r5, pc}
  402f2c:	20400f4c 	.word	0x20400f4c
  402f30:	00400b61 	.word	0x00400b61

00402f34 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402f34:	2900      	cmp	r1, #0
  402f36:	bf18      	it	ne
  402f38:	2a00      	cmpne	r2, #0
  402f3a:	d045      	beq.n	402fc8 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  402f3c:	b570      	push	{r4, r5, r6, lr}
  402f3e:	b086      	sub	sp, #24
  402f40:	460e      	mov	r6, r1
  402f42:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402f44:	2800      	cmp	r0, #0
  402f46:	db36      	blt.n	402fb6 <recv+0x82>
  402f48:	4a21      	ldr	r2, [pc, #132]	; (402fd0 <recv+0x9c>)
  402f4a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402f4e:	7a92      	ldrb	r2, [r2, #10]
  402f50:	b2d2      	uxtb	r2, r2
  402f52:	2a01      	cmp	r2, #1
  402f54:	d132      	bne.n	402fbc <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402f56:	4c1e      	ldr	r4, [pc, #120]	; (402fd0 <recv+0x9c>)
  402f58:	0101      	lsls	r1, r0, #4
  402f5a:	1862      	adds	r2, r4, r1
  402f5c:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402f5e:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402f60:	7b12      	ldrb	r2, [r2, #12]
  402f62:	f012 0fff 	tst.w	r2, #255	; 0xff
  402f66:	d12c      	bne.n	402fc2 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402f68:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402f6c:	2101      	movs	r1, #1
  402f6e:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402f70:	7ad2      	ldrb	r2, [r2, #11]
  402f72:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402f74:	2a00      	cmp	r2, #0
  402f76:	bf0c      	ite	eq
  402f78:	2146      	moveq	r1, #70	; 0x46
  402f7a:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402f7c:	b91b      	cbnz	r3, 402f86 <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402f7e:	f04f 33ff 	mov.w	r3, #4294967295
  402f82:	9304      	str	r3, [sp, #16]
  402f84:	e000      	b.n	402f88 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402f86:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  402f88:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402f8c:	4b10      	ldr	r3, [pc, #64]	; (402fd0 <recv+0x9c>)
  402f8e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402f92:	88c3      	ldrh	r3, [r0, #6]
  402f94:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402f98:	2300      	movs	r3, #0
  402f9a:	9302      	str	r3, [sp, #8]
  402f9c:	9301      	str	r3, [sp, #4]
  402f9e:	9300      	str	r3, [sp, #0]
  402fa0:	2308      	movs	r3, #8
  402fa2:	aa04      	add	r2, sp, #16
  402fa4:	2002      	movs	r0, #2
  402fa6:	4c0b      	ldr	r4, [pc, #44]	; (402fd4 <recv+0xa0>)
  402fa8:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402faa:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402fac:	bf0c      	ite	eq
  402fae:	2000      	moveq	r0, #0
  402fb0:	f06f 000d 	mvnne.w	r0, #13
  402fb4:	e006      	b.n	402fc4 <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402fb6:	f06f 0005 	mvn.w	r0, #5
  402fba:	e003      	b.n	402fc4 <recv+0x90>
  402fbc:	f06f 0005 	mvn.w	r0, #5
  402fc0:	e000      	b.n	402fc4 <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  402fc2:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402fc4:	b006      	add	sp, #24
  402fc6:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402fc8:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402fcc:	4770      	bx	lr
  402fce:	bf00      	nop
  402fd0:	20400f4c 	.word	0x20400f4c
  402fd4:	00400b61 	.word	0x00400b61

00402fd8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402fd8:	b530      	push	{r4, r5, lr}
  402fda:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402fdc:	2800      	cmp	r0, #0
  402fde:	db2e      	blt.n	40303e <close+0x66>
  402fe0:	4b1b      	ldr	r3, [pc, #108]	; (403050 <close+0x78>)
  402fe2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402fe6:	7a9b      	ldrb	r3, [r3, #10]
  402fe8:	b2db      	uxtb	r3, r3
  402fea:	2b01      	cmp	r3, #1
  402fec:	d12a      	bne.n	403044 <close+0x6c>
  402fee:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402ff0:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402ff4:	4b16      	ldr	r3, [pc, #88]	; (403050 <close+0x78>)
  402ff6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ffa:	88da      	ldrh	r2, [r3, #6]
  402ffc:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403000:	2200      	movs	r2, #0
  403002:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  403004:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403006:	7adb      	ldrb	r3, [r3, #11]
  403008:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  40300c:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  40300e:	9202      	str	r2, [sp, #8]
  403010:	9201      	str	r2, [sp, #4]
  403012:	9200      	str	r2, [sp, #0]
  403014:	f04f 0304 	mov.w	r3, #4
  403018:	aa05      	add	r2, sp, #20
  40301a:	bf0c      	ite	eq
  40301c:	2149      	moveq	r1, #73	; 0x49
  40301e:	214e      	movne	r1, #78	; 0x4e
  403020:	2002      	movs	r0, #2
  403022:	4d0c      	ldr	r5, [pc, #48]	; (403054 <close+0x7c>)
  403024:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403026:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403028:	bf18      	it	ne
  40302a:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  40302e:	2210      	movs	r2, #16
  403030:	2100      	movs	r1, #0
  403032:	4807      	ldr	r0, [pc, #28]	; (403050 <close+0x78>)
  403034:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403038:	4b07      	ldr	r3, [pc, #28]	; (403058 <close+0x80>)
  40303a:	4798      	blx	r3
  40303c:	e004      	b.n	403048 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40303e:	f06f 0505 	mvn.w	r5, #5
  403042:	e001      	b.n	403048 <close+0x70>
  403044:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  403048:	4628      	mov	r0, r5
  40304a:	b007      	add	sp, #28
  40304c:	bd30      	pop	{r4, r5, pc}
  40304e:	bf00      	nop
  403050:	20400f4c 	.word	0x20400f4c
  403054:	00400b61 	.word	0x00400b61
  403058:	004009fd 	.word	0x004009fd

0040305c <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  40305c:	b570      	push	{r4, r5, r6, lr}
  40305e:	b082      	sub	sp, #8
  403060:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  403062:	4b2b      	ldr	r3, [pc, #172]	; (403110 <spi_flash_enable+0xb4>)
  403064:	4798      	blx	r3
  403066:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40306a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  40306e:	d34a      	bcc.n	403106 <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  403070:	a901      	add	r1, sp, #4
  403072:	f241 4010 	movw	r0, #5136	; 0x1410
  403076:	4b27      	ldr	r3, [pc, #156]	; (403114 <spi_flash_enable+0xb8>)
  403078:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  40307a:	4604      	mov	r4, r0
  40307c:	2800      	cmp	r0, #0
  40307e:	d143      	bne.n	403108 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  403080:	4b25      	ldr	r3, [pc, #148]	; (403118 <spi_flash_enable+0xbc>)
  403082:	9a01      	ldr	r2, [sp, #4]
  403084:	4013      	ands	r3, r2
  403086:	4925      	ldr	r1, [pc, #148]	; (40311c <spi_flash_enable+0xc0>)
  403088:	4319      	orrs	r1, r3
  40308a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  40308c:	f241 4010 	movw	r0, #5136	; 0x1410
  403090:	4b23      	ldr	r3, [pc, #140]	; (403120 <spi_flash_enable+0xc4>)
  403092:	4798      	blx	r3
		if(enable) {
  403094:	b1b5      	cbz	r5, 4030c4 <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403096:	2100      	movs	r1, #0
  403098:	4822      	ldr	r0, [pc, #136]	; (403124 <spi_flash_enable+0xc8>)
  40309a:	4d21      	ldr	r5, [pc, #132]	; (403120 <spi_flash_enable+0xc4>)
  40309c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  40309e:	21ab      	movs	r1, #171	; 0xab
  4030a0:	4821      	ldr	r0, [pc, #132]	; (403128 <spi_flash_enable+0xcc>)
  4030a2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4030a4:	2101      	movs	r1, #1
  4030a6:	4821      	ldr	r0, [pc, #132]	; (40312c <spi_flash_enable+0xd0>)
  4030a8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4030aa:	2100      	movs	r1, #0
  4030ac:	4820      	ldr	r0, [pc, #128]	; (403130 <spi_flash_enable+0xd4>)
  4030ae:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  4030b0:	2181      	movs	r1, #129	; 0x81
  4030b2:	4820      	ldr	r0, [pc, #128]	; (403134 <spi_flash_enable+0xd8>)
  4030b4:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4030b6:	4e20      	ldr	r6, [pc, #128]	; (403138 <spi_flash_enable+0xdc>)
  4030b8:	4d20      	ldr	r5, [pc, #128]	; (40313c <spi_flash_enable+0xe0>)
  4030ba:	4630      	mov	r0, r6
  4030bc:	47a8      	blx	r5
  4030be:	2801      	cmp	r0, #1
  4030c0:	d1fb      	bne.n	4030ba <spi_flash_enable+0x5e>
  4030c2:	e015      	b.n	4030f0 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4030c4:	2100      	movs	r1, #0
  4030c6:	4817      	ldr	r0, [pc, #92]	; (403124 <spi_flash_enable+0xc8>)
  4030c8:	4d15      	ldr	r5, [pc, #84]	; (403120 <spi_flash_enable+0xc4>)
  4030ca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4030cc:	21b9      	movs	r1, #185	; 0xb9
  4030ce:	4816      	ldr	r0, [pc, #88]	; (403128 <spi_flash_enable+0xcc>)
  4030d0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4030d2:	2101      	movs	r1, #1
  4030d4:	4815      	ldr	r0, [pc, #84]	; (40312c <spi_flash_enable+0xd0>)
  4030d6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4030d8:	2100      	movs	r1, #0
  4030da:	4815      	ldr	r0, [pc, #84]	; (403130 <spi_flash_enable+0xd4>)
  4030dc:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  4030de:	2181      	movs	r1, #129	; 0x81
  4030e0:	4814      	ldr	r0, [pc, #80]	; (403134 <spi_flash_enable+0xd8>)
  4030e2:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4030e4:	4e14      	ldr	r6, [pc, #80]	; (403138 <spi_flash_enable+0xdc>)
  4030e6:	4d15      	ldr	r5, [pc, #84]	; (40313c <spi_flash_enable+0xe0>)
  4030e8:	4630      	mov	r0, r6
  4030ea:	47a8      	blx	r5
  4030ec:	2801      	cmp	r0, #1
  4030ee:	d1fb      	bne.n	4030e8 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  4030f0:	4909      	ldr	r1, [pc, #36]	; (403118 <spi_flash_enable+0xbc>)
  4030f2:	9b01      	ldr	r3, [sp, #4]
  4030f4:	4019      	ands	r1, r3
  4030f6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4030fa:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4030fc:	f241 4010 	movw	r0, #5136	; 0x1410
  403100:	4b07      	ldr	r3, [pc, #28]	; (403120 <spi_flash_enable+0xc4>)
  403102:	4798      	blx	r3
  403104:	e000      	b.n	403108 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  403106:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403108:	4620      	mov	r0, r4
  40310a:	b002      	add	sp, #8
  40310c:	bd70      	pop	{r4, r5, r6, pc}
  40310e:	bf00      	nop
  403110:	00401a0d 	.word	0x00401a0d
  403114:	00401d05 	.word	0x00401d05
  403118:	f8888fff 	.word	0xf8888fff
  40311c:	01111000 	.word	0x01111000
  403120:	00401d11 	.word	0x00401d11
  403124:	00010208 	.word	0x00010208
  403128:	0001020c 	.word	0x0001020c
  40312c:	00010214 	.word	0x00010214
  403130:	0001021c 	.word	0x0001021c
  403134:	00010204 	.word	0x00010204
  403138:	00010218 	.word	0x00010218
  40313c:	00401cf9 	.word	0x00401cf9

00403140 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403140:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403142:	4810      	ldr	r0, [pc, #64]	; (403184 <sysclk_init+0x44>)
  403144:	4b10      	ldr	r3, [pc, #64]	; (403188 <sysclk_init+0x48>)
  403146:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403148:	213e      	movs	r1, #62	; 0x3e
  40314a:	2000      	movs	r0, #0
  40314c:	4b0f      	ldr	r3, [pc, #60]	; (40318c <sysclk_init+0x4c>)
  40314e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403150:	4c0f      	ldr	r4, [pc, #60]	; (403190 <sysclk_init+0x50>)
  403152:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403154:	2800      	cmp	r0, #0
  403156:	d0fc      	beq.n	403152 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403158:	4b0e      	ldr	r3, [pc, #56]	; (403194 <sysclk_init+0x54>)
  40315a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40315c:	4a0e      	ldr	r2, [pc, #56]	; (403198 <sysclk_init+0x58>)
  40315e:	4b0f      	ldr	r3, [pc, #60]	; (40319c <sysclk_init+0x5c>)
  403160:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  403162:	4c0f      	ldr	r4, [pc, #60]	; (4031a0 <sysclk_init+0x60>)
  403164:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403166:	2800      	cmp	r0, #0
  403168:	d0fc      	beq.n	403164 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40316a:	2002      	movs	r0, #2
  40316c:	4b0d      	ldr	r3, [pc, #52]	; (4031a4 <sysclk_init+0x64>)
  40316e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403170:	2000      	movs	r0, #0
  403172:	4b0d      	ldr	r3, [pc, #52]	; (4031a8 <sysclk_init+0x68>)
  403174:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403176:	4b0d      	ldr	r3, [pc, #52]	; (4031ac <sysclk_init+0x6c>)
  403178:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40317a:	4802      	ldr	r0, [pc, #8]	; (403184 <sysclk_init+0x44>)
  40317c:	4b02      	ldr	r3, [pc, #8]	; (403188 <sysclk_init+0x48>)
  40317e:	4798      	blx	r3
  403180:	bd10      	pop	{r4, pc}
  403182:	bf00      	nop
  403184:	11e1a300 	.word	0x11e1a300
  403188:	00403df5 	.word	0x00403df5
  40318c:	00403881 	.word	0x00403881
  403190:	004038d5 	.word	0x004038d5
  403194:	004038e5 	.word	0x004038e5
  403198:	20183f01 	.word	0x20183f01
  40319c:	400e0600 	.word	0x400e0600
  4031a0:	004038f5 	.word	0x004038f5
  4031a4:	004037dd 	.word	0x004037dd
  4031a8:	00403819 	.word	0x00403819
  4031ac:	00403ce5 	.word	0x00403ce5

004031b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4031b0:	b990      	cbnz	r0, 4031d8 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4031b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031b6:	460c      	mov	r4, r1
  4031b8:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4031ba:	2a00      	cmp	r2, #0
  4031bc:	dd0f      	ble.n	4031de <_read+0x2e>
  4031be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4031c0:	4e08      	ldr	r6, [pc, #32]	; (4031e4 <_read+0x34>)
  4031c2:	4d09      	ldr	r5, [pc, #36]	; (4031e8 <_read+0x38>)
  4031c4:	6830      	ldr	r0, [r6, #0]
  4031c6:	4621      	mov	r1, r4
  4031c8:	682b      	ldr	r3, [r5, #0]
  4031ca:	4798      	blx	r3
		ptr++;
  4031cc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4031ce:	42a7      	cmp	r7, r4
  4031d0:	d1f8      	bne.n	4031c4 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4031d2:	4640      	mov	r0, r8
  4031d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4031d8:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4031dc:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4031de:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4031e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031e4:	20401010 	.word	0x20401010
  4031e8:	20401008 	.word	0x20401008

004031ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4031ec:	3801      	subs	r0, #1
  4031ee:	2802      	cmp	r0, #2
  4031f0:	d815      	bhi.n	40321e <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4031f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031f6:	460e      	mov	r6, r1
  4031f8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4031fa:	b19a      	cbz	r2, 403224 <_write+0x38>
  4031fc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4031fe:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403238 <_write+0x4c>
  403202:	4f0c      	ldr	r7, [pc, #48]	; (403234 <_write+0x48>)
  403204:	f8d8 0000 	ldr.w	r0, [r8]
  403208:	f815 1b01 	ldrb.w	r1, [r5], #1
  40320c:	683b      	ldr	r3, [r7, #0]
  40320e:	4798      	blx	r3
  403210:	2800      	cmp	r0, #0
  403212:	db0a      	blt.n	40322a <_write+0x3e>
  403214:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403216:	3c01      	subs	r4, #1
  403218:	d1f4      	bne.n	403204 <_write+0x18>
  40321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40321e:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  403222:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403224:	2000      	movs	r0, #0
  403226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  40322a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403232:	bf00      	nop
  403234:	2040100c 	.word	0x2040100c
  403238:	20401010 	.word	0x20401010

0040323c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40323e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403242:	4b57      	ldr	r3, [pc, #348]	; (4033a0 <board_init+0x164>)
  403244:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403246:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40324a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40324e:	4b55      	ldr	r3, [pc, #340]	; (4033a4 <board_init+0x168>)
  403250:	2200      	movs	r2, #0
  403252:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403256:	695a      	ldr	r2, [r3, #20]
  403258:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40325c:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40325e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403262:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403266:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40326a:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40326e:	f006 0707 	and.w	r7, r6, #7
  403272:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403274:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403278:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  40327c:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403280:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  403284:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  403286:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  403288:	fa05 f107 	lsl.w	r1, r5, r7
  40328c:	fa03 f200 	lsl.w	r2, r3, r0
  403290:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  403292:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  403296:	3b01      	subs	r3, #1
  403298:	f1b3 3fff 	cmp.w	r3, #4294967295
  40329c:	d1f6      	bne.n	40328c <board_init+0x50>
        } while(sets--);
  40329e:	3d01      	subs	r5, #1
  4032a0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4032a4:	d1ef      	bne.n	403286 <board_init+0x4a>
  4032a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4032aa:	4b3e      	ldr	r3, [pc, #248]	; (4033a4 <board_init+0x168>)
  4032ac:	695a      	ldr	r2, [r3, #20]
  4032ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4032b2:	615a      	str	r2, [r3, #20]
  4032b4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4032b8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4032bc:	4a3a      	ldr	r2, [pc, #232]	; (4033a8 <board_init+0x16c>)
  4032be:	493b      	ldr	r1, [pc, #236]	; (4033ac <board_init+0x170>)
  4032c0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4032c2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4032c6:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4032c8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4032cc:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4032d0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4032d4:	f022 0201 	bic.w	r2, r2, #1
  4032d8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4032dc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4032e0:	f022 0201 	bic.w	r2, r2, #1
  4032e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4032e8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4032ec:	f3bf 8f6f 	isb	sy
  4032f0:	200a      	movs	r0, #10
  4032f2:	4c2f      	ldr	r4, [pc, #188]	; (4033b0 <board_init+0x174>)
  4032f4:	47a0      	blx	r4
  4032f6:	200b      	movs	r0, #11
  4032f8:	47a0      	blx	r4
  4032fa:	200c      	movs	r0, #12
  4032fc:	47a0      	blx	r4
  4032fe:	2010      	movs	r0, #16
  403300:	47a0      	blx	r4
  403302:	2011      	movs	r0, #17
  403304:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403306:	4b2b      	ldr	r3, [pc, #172]	; (4033b4 <board_init+0x178>)
  403308:	f44f 7280 	mov.w	r2, #256	; 0x100
  40330c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40330e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403312:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403314:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  403318:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40331c:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40331e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403322:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403328:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  40332a:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40332c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403330:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403332:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  403336:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403338:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40333a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40333e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403340:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403344:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403348:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40334c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403350:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403356:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403358:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40335a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40335e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403360:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  403364:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403366:	6f59      	ldr	r1, [r3, #116]	; 0x74
  403368:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40336c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40336e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403370:	4a11      	ldr	r2, [pc, #68]	; (4033b8 <board_init+0x17c>)
  403372:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  403376:	f043 0310 	orr.w	r3, r3, #16
  40337a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40337e:	4b0f      	ldr	r3, [pc, #60]	; (4033bc <board_init+0x180>)
  403380:	2210      	movs	r2, #16
  403382:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403388:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40338a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40338c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  403390:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403392:	4311      	orrs	r1, r2
  403394:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403396:	6f59      	ldr	r1, [r3, #116]	; 0x74
  403398:	4311      	orrs	r1, r2
  40339a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40339c:	605a      	str	r2, [r3, #4]
  40339e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033a0:	400e1850 	.word	0x400e1850
  4033a4:	e000ed00 	.word	0xe000ed00
  4033a8:	400e0c00 	.word	0x400e0c00
  4033ac:	5a00080c 	.word	0x5a00080c
  4033b0:	00403905 	.word	0x00403905
  4033b4:	400e1200 	.word	0x400e1200
  4033b8:	40088000 	.word	0x40088000
  4033bc:	400e1000 	.word	0x400e1000

004033c0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4033c0:	b10a      	cbz	r2, 4033c6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4033c2:	6641      	str	r1, [r0, #100]	; 0x64
  4033c4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4033c6:	6601      	str	r1, [r0, #96]	; 0x60
  4033c8:	4770      	bx	lr
  4033ca:	bf00      	nop

004033cc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4033cc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4033ce:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4033d2:	d02f      	beq.n	403434 <pio_set_peripheral+0x68>
  4033d4:	d807      	bhi.n	4033e6 <pio_set_peripheral+0x1a>
  4033d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4033da:	d014      	beq.n	403406 <pio_set_peripheral+0x3a>
  4033dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4033e0:	d01e      	beq.n	403420 <pio_set_peripheral+0x54>
  4033e2:	b939      	cbnz	r1, 4033f4 <pio_set_peripheral+0x28>
  4033e4:	4770      	bx	lr
  4033e6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4033ea:	d037      	beq.n	40345c <pio_set_peripheral+0x90>
  4033ec:	d804      	bhi.n	4033f8 <pio_set_peripheral+0x2c>
  4033ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4033f2:	d029      	beq.n	403448 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4033f4:	6042      	str	r2, [r0, #4]
  4033f6:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4033f8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4033fc:	d02e      	beq.n	40345c <pio_set_peripheral+0x90>
  4033fe:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403402:	d02b      	beq.n	40345c <pio_set_peripheral+0x90>
  403404:	e7f6      	b.n	4033f4 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403406:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403408:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40340a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40340c:	43d3      	mvns	r3, r2
  40340e:	4021      	ands	r1, r4
  403410:	4019      	ands	r1, r3
  403412:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403414:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403416:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403418:	4021      	ands	r1, r4
  40341a:	400b      	ands	r3, r1
  40341c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40341e:	e01a      	b.n	403456 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403420:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403422:	4313      	orrs	r3, r2
  403424:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403426:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403428:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40342a:	400b      	ands	r3, r1
  40342c:	ea23 0302 	bic.w	r3, r3, r2
  403430:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403432:	e7df      	b.n	4033f4 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403434:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403436:	6f03      	ldr	r3, [r0, #112]	; 0x70
  403438:	400b      	ands	r3, r1
  40343a:	ea23 0302 	bic.w	r3, r3, r2
  40343e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403440:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403442:	4313      	orrs	r3, r2
  403444:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403446:	e7d5      	b.n	4033f4 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403448:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40344a:	4313      	orrs	r3, r2
  40344c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40344e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403450:	4313      	orrs	r3, r2
  403452:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403454:	e7ce      	b.n	4033f4 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403456:	6042      	str	r2, [r0, #4]
}
  403458:	f85d 4b04 	ldr.w	r4, [sp], #4
  40345c:	4770      	bx	lr
  40345e:	bf00      	nop

00403460 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403460:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403462:	f012 0f01 	tst.w	r2, #1
  403466:	d001      	beq.n	40346c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  403468:	6641      	str	r1, [r0, #100]	; 0x64
  40346a:	e000      	b.n	40346e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40346c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40346e:	f012 0f0a 	tst.w	r2, #10
  403472:	d001      	beq.n	403478 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  403474:	6201      	str	r1, [r0, #32]
  403476:	e000      	b.n	40347a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403478:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40347a:	f012 0f02 	tst.w	r2, #2
  40347e:	d002      	beq.n	403486 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  403480:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403484:	e004      	b.n	403490 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403486:	f012 0f08 	tst.w	r2, #8
  40348a:	d001      	beq.n	403490 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40348c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403490:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403492:	6001      	str	r1, [r0, #0]
  403494:	4770      	bx	lr
  403496:	bf00      	nop

00403498 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403498:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40349a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40349c:	9c01      	ldr	r4, [sp, #4]
  40349e:	b10c      	cbz	r4, 4034a4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4034a0:	6641      	str	r1, [r0, #100]	; 0x64
  4034a2:	e000      	b.n	4034a6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4034a4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4034a6:	b10b      	cbz	r3, 4034ac <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4034a8:	6501      	str	r1, [r0, #80]	; 0x50
  4034aa:	e000      	b.n	4034ae <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4034ac:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4034ae:	b10a      	cbz	r2, 4034b4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4034b0:	6301      	str	r1, [r0, #48]	; 0x30
  4034b2:	e000      	b.n	4034b6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4034b4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4034b6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4034b8:	6001      	str	r1, [r0, #0]
}
  4034ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034be:	4770      	bx	lr

004034c0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4034c0:	f012 0f10 	tst.w	r2, #16
  4034c4:	d012      	beq.n	4034ec <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4034c6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4034ca:	f012 0f20 	tst.w	r2, #32
  4034ce:	d002      	beq.n	4034d6 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4034d0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4034d4:	e001      	b.n	4034da <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4034d6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4034da:	f012 0f40 	tst.w	r2, #64	; 0x40
  4034de:	d002      	beq.n	4034e6 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4034e0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4034e4:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4034e6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4034ea:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4034ec:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4034f0:	4770      	bx	lr
  4034f2:	bf00      	nop

004034f4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4034f4:	6401      	str	r1, [r0, #64]	; 0x40
  4034f6:	4770      	bx	lr

004034f8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4034f8:	6441      	str	r1, [r0, #68]	; 0x44
  4034fa:	4770      	bx	lr

004034fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4034fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4034fe:	4770      	bx	lr

00403500 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403500:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403502:	4770      	bx	lr

00403504 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403504:	b570      	push	{r4, r5, r6, lr}
  403506:	b082      	sub	sp, #8
  403508:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40350a:	4c47      	ldr	r4, [pc, #284]	; (403628 <pio_configure_pin+0x124>)
  40350c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  403510:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403512:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40351a:	d04d      	beq.n	4035b8 <pio_configure_pin+0xb4>
  40351c:	d809      	bhi.n	403532 <pio_configure_pin+0x2e>
  40351e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403522:	d023      	beq.n	40356c <pio_configure_pin+0x68>
  403524:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403528:	d033      	beq.n	403592 <pio_configure_pin+0x8e>
  40352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40352e:	d177      	bne.n	403620 <pio_configure_pin+0x11c>
  403530:	e009      	b.n	403546 <pio_configure_pin+0x42>
  403532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403536:	d05d      	beq.n	4035f4 <pio_configure_pin+0xf0>
  403538:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40353c:	d05a      	beq.n	4035f4 <pio_configure_pin+0xf0>
  40353e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403542:	d04c      	beq.n	4035de <pio_configure_pin+0xda>
  403544:	e06c      	b.n	403620 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403546:	f000 001f 	and.w	r0, r0, #31
  40354a:	2601      	movs	r6, #1
  40354c:	4086      	lsls	r6, r0
  40354e:	4632      	mov	r2, r6
  403550:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403554:	4620      	mov	r0, r4
  403556:	4b35      	ldr	r3, [pc, #212]	; (40362c <pio_configure_pin+0x128>)
  403558:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40355a:	f015 0f01 	tst.w	r5, #1
  40355e:	d002      	beq.n	403566 <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  403560:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  403562:	2001      	movs	r0, #1
  403564:	e05d      	b.n	403622 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403566:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403568:	2001      	movs	r0, #1
  40356a:	e05a      	b.n	403622 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40356c:	f000 001f 	and.w	r0, r0, #31
  403570:	2601      	movs	r6, #1
  403572:	4086      	lsls	r6, r0
  403574:	4632      	mov	r2, r6
  403576:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40357a:	4620      	mov	r0, r4
  40357c:	4b2b      	ldr	r3, [pc, #172]	; (40362c <pio_configure_pin+0x128>)
  40357e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403580:	f015 0f01 	tst.w	r5, #1
  403584:	d002      	beq.n	40358c <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  403586:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  403588:	2001      	movs	r0, #1
  40358a:	e04a      	b.n	403622 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40358c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40358e:	2001      	movs	r0, #1
  403590:	e047      	b.n	403622 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403592:	f000 001f 	and.w	r0, r0, #31
  403596:	2601      	movs	r6, #1
  403598:	4086      	lsls	r6, r0
  40359a:	4632      	mov	r2, r6
  40359c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4035a0:	4620      	mov	r0, r4
  4035a2:	4b22      	ldr	r3, [pc, #136]	; (40362c <pio_configure_pin+0x128>)
  4035a4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4035a6:	f015 0f01 	tst.w	r5, #1
  4035aa:	d002      	beq.n	4035b2 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4035ac:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4035ae:	2001      	movs	r0, #1
  4035b0:	e037      	b.n	403622 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4035b2:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4035b4:	2001      	movs	r0, #1
  4035b6:	e034      	b.n	403622 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4035b8:	f000 001f 	and.w	r0, r0, #31
  4035bc:	2601      	movs	r6, #1
  4035be:	4086      	lsls	r6, r0
  4035c0:	4632      	mov	r2, r6
  4035c2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4035c6:	4620      	mov	r0, r4
  4035c8:	4b18      	ldr	r3, [pc, #96]	; (40362c <pio_configure_pin+0x128>)
  4035ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4035cc:	f015 0f01 	tst.w	r5, #1
  4035d0:	d002      	beq.n	4035d8 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4035d2:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4035d4:	2001      	movs	r0, #1
  4035d6:	e024      	b.n	403622 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4035d8:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4035da:	2001      	movs	r0, #1
  4035dc:	e021      	b.n	403622 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4035de:	f000 011f 	and.w	r1, r0, #31
  4035e2:	2601      	movs	r6, #1
  4035e4:	462a      	mov	r2, r5
  4035e6:	fa06 f101 	lsl.w	r1, r6, r1
  4035ea:	4620      	mov	r0, r4
  4035ec:	4b10      	ldr	r3, [pc, #64]	; (403630 <pio_configure_pin+0x12c>)
  4035ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4035f0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4035f2:	e016      	b.n	403622 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4035f4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4035f8:	f000 011f 	and.w	r1, r0, #31
  4035fc:	2601      	movs	r6, #1
  4035fe:	ea05 0306 	and.w	r3, r5, r6
  403602:	9300      	str	r3, [sp, #0]
  403604:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403608:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40360c:	bf14      	ite	ne
  40360e:	2200      	movne	r2, #0
  403610:	2201      	moveq	r2, #1
  403612:	fa06 f101 	lsl.w	r1, r6, r1
  403616:	4620      	mov	r0, r4
  403618:	4c06      	ldr	r4, [pc, #24]	; (403634 <pio_configure_pin+0x130>)
  40361a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40361c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40361e:	e000      	b.n	403622 <pio_configure_pin+0x11e>

	default:
		return 0;
  403620:	2000      	movs	r0, #0
	}

	return 1;
}
  403622:	b002      	add	sp, #8
  403624:	bd70      	pop	{r4, r5, r6, pc}
  403626:	bf00      	nop
  403628:	00200707 	.word	0x00200707
  40362c:	004033cd 	.word	0x004033cd
  403630:	00403461 	.word	0x00403461
  403634:	00403499 	.word	0x00403499

00403638 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40363c:	4604      	mov	r4, r0
  40363e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403640:	4b0e      	ldr	r3, [pc, #56]	; (40367c <pio_handler_process+0x44>)
  403642:	4798      	blx	r3
  403644:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403646:	4620      	mov	r0, r4
  403648:	4b0d      	ldr	r3, [pc, #52]	; (403680 <pio_handler_process+0x48>)
  40364a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40364c:	4005      	ands	r5, r0
  40364e:	d013      	beq.n	403678 <pio_handler_process+0x40>
  403650:	4c0c      	ldr	r4, [pc, #48]	; (403684 <pio_handler_process+0x4c>)
  403652:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  403656:	6823      	ldr	r3, [r4, #0]
  403658:	4543      	cmp	r3, r8
  40365a:	d108      	bne.n	40366e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40365c:	6861      	ldr	r1, [r4, #4]
  40365e:	4229      	tst	r1, r5
  403660:	d005      	beq.n	40366e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403662:	68e3      	ldr	r3, [r4, #12]
  403664:	4640      	mov	r0, r8
  403666:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403668:	6863      	ldr	r3, [r4, #4]
  40366a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40366e:	42b4      	cmp	r4, r6
  403670:	d002      	beq.n	403678 <pio_handler_process+0x40>
  403672:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  403674:	2d00      	cmp	r5, #0
  403676:	d1ee      	bne.n	403656 <pio_handler_process+0x1e>
  403678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40367c:	004034fd 	.word	0x004034fd
  403680:	00403501 	.word	0x00403501
  403684:	204008e0 	.word	0x204008e0

00403688 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  403688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40368a:	4c17      	ldr	r4, [pc, #92]	; (4036e8 <pio_handler_set+0x60>)
  40368c:	6826      	ldr	r6, [r4, #0]
  40368e:	2e06      	cmp	r6, #6
  403690:	d828      	bhi.n	4036e4 <pio_handler_set+0x5c>
  403692:	f04f 0c00 	mov.w	ip, #0
  403696:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  403698:	4f14      	ldr	r7, [pc, #80]	; (4036ec <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40369a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40369c:	0125      	lsls	r5, r4, #4
  40369e:	597d      	ldr	r5, [r7, r5]
  4036a0:	428d      	cmp	r5, r1
  4036a2:	d104      	bne.n	4036ae <pio_handler_set+0x26>
  4036a4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4036a8:	686d      	ldr	r5, [r5, #4]
  4036aa:	4295      	cmp	r5, r2
  4036ac:	d004      	beq.n	4036b8 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4036ae:	3401      	adds	r4, #1
  4036b0:	b2e4      	uxtb	r4, r4
  4036b2:	46a4      	mov	ip, r4
  4036b4:	42a6      	cmp	r6, r4
  4036b6:	d2f0      	bcs.n	40369a <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4036b8:	4d0c      	ldr	r5, [pc, #48]	; (4036ec <pio_handler_set+0x64>)
  4036ba:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4036be:	eb05 040e 	add.w	r4, r5, lr
  4036c2:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4036c6:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4036c8:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4036ca:	9906      	ldr	r1, [sp, #24]
  4036cc:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4036ce:	3601      	adds	r6, #1
  4036d0:	4566      	cmp	r6, ip
  4036d2:	d101      	bne.n	4036d8 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4036d4:	4904      	ldr	r1, [pc, #16]	; (4036e8 <pio_handler_set+0x60>)
  4036d6:	600e      	str	r6, [r1, #0]
  4036d8:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4036da:	461a      	mov	r2, r3
  4036dc:	4b04      	ldr	r3, [pc, #16]	; (4036f0 <pio_handler_set+0x68>)
  4036de:	4798      	blx	r3

	return 0;
  4036e0:	2000      	movs	r0, #0
  4036e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4036e4:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4036e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4036e8:	204008dc 	.word	0x204008dc
  4036ec:	204008e0 	.word	0x204008e0
  4036f0:	004034c1 	.word	0x004034c1

004036f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4036f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4036f6:	210a      	movs	r1, #10
  4036f8:	4801      	ldr	r0, [pc, #4]	; (403700 <PIOA_Handler+0xc>)
  4036fa:	4b02      	ldr	r3, [pc, #8]	; (403704 <PIOA_Handler+0x10>)
  4036fc:	4798      	blx	r3
  4036fe:	bd08      	pop	{r3, pc}
  403700:	400e0e00 	.word	0x400e0e00
  403704:	00403639 	.word	0x00403639

00403708 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403708:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40370a:	210b      	movs	r1, #11
  40370c:	4801      	ldr	r0, [pc, #4]	; (403714 <PIOB_Handler+0xc>)
  40370e:	4b02      	ldr	r3, [pc, #8]	; (403718 <PIOB_Handler+0x10>)
  403710:	4798      	blx	r3
  403712:	bd08      	pop	{r3, pc}
  403714:	400e1000 	.word	0x400e1000
  403718:	00403639 	.word	0x00403639

0040371c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40371c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40371e:	210c      	movs	r1, #12
  403720:	4801      	ldr	r0, [pc, #4]	; (403728 <PIOC_Handler+0xc>)
  403722:	4b02      	ldr	r3, [pc, #8]	; (40372c <PIOC_Handler+0x10>)
  403724:	4798      	blx	r3
  403726:	bd08      	pop	{r3, pc}
  403728:	400e1200 	.word	0x400e1200
  40372c:	00403639 	.word	0x00403639

00403730 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403730:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403732:	2110      	movs	r1, #16
  403734:	4801      	ldr	r0, [pc, #4]	; (40373c <PIOD_Handler+0xc>)
  403736:	4b02      	ldr	r3, [pc, #8]	; (403740 <PIOD_Handler+0x10>)
  403738:	4798      	blx	r3
  40373a:	bd08      	pop	{r3, pc}
  40373c:	400e1400 	.word	0x400e1400
  403740:	00403639 	.word	0x00403639

00403744 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403744:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403746:	2111      	movs	r1, #17
  403748:	4801      	ldr	r0, [pc, #4]	; (403750 <PIOE_Handler+0xc>)
  40374a:	4b02      	ldr	r3, [pc, #8]	; (403754 <PIOE_Handler+0x10>)
  40374c:	4798      	blx	r3
  40374e:	bd08      	pop	{r3, pc}
  403750:	400e1600 	.word	0x400e1600
  403754:	00403639 	.word	0x00403639

00403758 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40375a:	4606      	mov	r6, r0
  40375c:	460d      	mov	r5, r1
  40375e:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  403760:	4b17      	ldr	r3, [pc, #92]	; (4037c0 <pio_handler_set_priority+0x68>)
  403762:	4798      	blx	r3
  403764:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  403766:	f04f 31ff 	mov.w	r1, #4294967295
  40376a:	4630      	mov	r0, r6
  40376c:	4b15      	ldr	r3, [pc, #84]	; (4037c4 <pio_handler_set_priority+0x6c>)
  40376e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  403770:	4630      	mov	r0, r6
  403772:	4b15      	ldr	r3, [pc, #84]	; (4037c8 <pio_handler_set_priority+0x70>)
  403774:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403776:	fa5f fe85 	uxtb.w	lr, r5
  40377a:	f00e 031f 	and.w	r3, lr, #31
  40377e:	2201      	movs	r2, #1
  403780:	fa02 f303 	lsl.w	r3, r2, r3
  403784:	0968      	lsrs	r0, r5, #5
  403786:	4911      	ldr	r1, [pc, #68]	; (4037cc <pio_handler_set_priority+0x74>)
  403788:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  40378c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403790:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  403794:	2d00      	cmp	r5, #0
  403796:	da07      	bge.n	4037a8 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403798:	f00e 0e0f 	and.w	lr, lr, #15
  40379c:	0164      	lsls	r4, r4, #5
  40379e:	b2e4      	uxtb	r4, r4
  4037a0:	4a0b      	ldr	r2, [pc, #44]	; (4037d0 <pio_handler_set_priority+0x78>)
  4037a2:	f802 400e 	strb.w	r4, [r2, lr]
  4037a6:	e003      	b.n	4037b0 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4037a8:	0164      	lsls	r4, r4, #5
  4037aa:	b2e4      	uxtb	r4, r4
  4037ac:	4a09      	ldr	r2, [pc, #36]	; (4037d4 <pio_handler_set_priority+0x7c>)
  4037ae:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4037b0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4037b4:	4639      	mov	r1, r7
  4037b6:	4630      	mov	r0, r6
  4037b8:	4b07      	ldr	r3, [pc, #28]	; (4037d8 <pio_handler_set_priority+0x80>)
  4037ba:	4798      	blx	r3
  4037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037be:	bf00      	nop
  4037c0:	00403501 	.word	0x00403501
  4037c4:	004034f9 	.word	0x004034f9
  4037c8:	004034fd 	.word	0x004034fd
  4037cc:	e000e100 	.word	0xe000e100
  4037d0:	e000ed14 	.word	0xe000ed14
  4037d4:	e000e400 	.word	0xe000e400
  4037d8:	004034f5 	.word	0x004034f5

004037dc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4037dc:	2803      	cmp	r0, #3
  4037de:	d007      	beq.n	4037f0 <pmc_mck_set_division+0x14>
  4037e0:	2804      	cmp	r0, #4
  4037e2:	d008      	beq.n	4037f6 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4037e4:	2802      	cmp	r0, #2
  4037e6:	bf0c      	ite	eq
  4037e8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4037ec:	2200      	movne	r2, #0
  4037ee:	e004      	b.n	4037fa <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4037f0:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4037f4:	e001      	b.n	4037fa <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4037f6:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4037fa:	4906      	ldr	r1, [pc, #24]	; (403814 <pmc_mck_set_division+0x38>)
  4037fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4037fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403802:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  403804:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403806:	460a      	mov	r2, r1
  403808:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40380a:	f013 0f08 	tst.w	r3, #8
  40380e:	d0fb      	beq.n	403808 <pmc_mck_set_division+0x2c>
}
  403810:	4770      	bx	lr
  403812:	bf00      	nop
  403814:	400e0600 	.word	0x400e0600

00403818 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403818:	4a18      	ldr	r2, [pc, #96]	; (40387c <pmc_switch_mck_to_pllack+0x64>)
  40381a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403820:	4318      	orrs	r0, r3
  403822:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403824:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403826:	f013 0f08 	tst.w	r3, #8
  40382a:	d003      	beq.n	403834 <pmc_switch_mck_to_pllack+0x1c>
  40382c:	e009      	b.n	403842 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40382e:	3b01      	subs	r3, #1
  403830:	d103      	bne.n	40383a <pmc_switch_mck_to_pllack+0x22>
  403832:	e01e      	b.n	403872 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403838:	4910      	ldr	r1, [pc, #64]	; (40387c <pmc_switch_mck_to_pllack+0x64>)
  40383a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40383c:	f012 0f08 	tst.w	r2, #8
  403840:	d0f5      	beq.n	40382e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403842:	4a0e      	ldr	r2, [pc, #56]	; (40387c <pmc_switch_mck_to_pllack+0x64>)
  403844:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403846:	f023 0303 	bic.w	r3, r3, #3
  40384a:	f043 0302 	orr.w	r3, r3, #2
  40384e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403850:	6e90      	ldr	r0, [r2, #104]	; 0x68
  403852:	f010 0008 	ands.w	r0, r0, #8
  403856:	d004      	beq.n	403862 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403858:	2000      	movs	r0, #0
  40385a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40385c:	3b01      	subs	r3, #1
  40385e:	d103      	bne.n	403868 <pmc_switch_mck_to_pllack+0x50>
  403860:	e009      	b.n	403876 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403866:	4905      	ldr	r1, [pc, #20]	; (40387c <pmc_switch_mck_to_pllack+0x64>)
  403868:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40386a:	f012 0f08 	tst.w	r2, #8
  40386e:	d0f5      	beq.n	40385c <pmc_switch_mck_to_pllack+0x44>
  403870:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403872:	2001      	movs	r0, #1
  403874:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403876:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403878:	4770      	bx	lr
  40387a:	bf00      	nop
  40387c:	400e0600 	.word	0x400e0600

00403880 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403880:	b138      	cbz	r0, 403892 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403882:	490e      	ldr	r1, [pc, #56]	; (4038bc <pmc_switch_mainck_to_xtal+0x3c>)
  403884:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403886:	4a0e      	ldr	r2, [pc, #56]	; (4038c0 <pmc_switch_mainck_to_xtal+0x40>)
  403888:	401a      	ands	r2, r3
  40388a:	4b0e      	ldr	r3, [pc, #56]	; (4038c4 <pmc_switch_mainck_to_xtal+0x44>)
  40388c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40388e:	620b      	str	r3, [r1, #32]
  403890:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403892:	480a      	ldr	r0, [pc, #40]	; (4038bc <pmc_switch_mainck_to_xtal+0x3c>)
  403894:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403896:	0209      	lsls	r1, r1, #8
  403898:	b289      	uxth	r1, r1
  40389a:	4a0b      	ldr	r2, [pc, #44]	; (4038c8 <pmc_switch_mainck_to_xtal+0x48>)
  40389c:	401a      	ands	r2, r3
  40389e:	4b0b      	ldr	r3, [pc, #44]	; (4038cc <pmc_switch_mainck_to_xtal+0x4c>)
  4038a0:	4313      	orrs	r3, r2
  4038a2:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4038a4:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4038a6:	4602      	mov	r2, r0
  4038a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4038aa:	f013 0f01 	tst.w	r3, #1
  4038ae:	d0fb      	beq.n	4038a8 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4038b0:	4a02      	ldr	r2, [pc, #8]	; (4038bc <pmc_switch_mainck_to_xtal+0x3c>)
  4038b2:	6a11      	ldr	r1, [r2, #32]
  4038b4:	4b06      	ldr	r3, [pc, #24]	; (4038d0 <pmc_switch_mainck_to_xtal+0x50>)
  4038b6:	430b      	orrs	r3, r1
  4038b8:	6213      	str	r3, [r2, #32]
  4038ba:	4770      	bx	lr
  4038bc:	400e0600 	.word	0x400e0600
  4038c0:	fec8fffc 	.word	0xfec8fffc
  4038c4:	01370002 	.word	0x01370002
  4038c8:	ffc8fffc 	.word	0xffc8fffc
  4038cc:	00370001 	.word	0x00370001
  4038d0:	01370000 	.word	0x01370000

004038d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4038d4:	4b02      	ldr	r3, [pc, #8]	; (4038e0 <pmc_osc_is_ready_mainck+0xc>)
  4038d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4038d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4038dc:	4770      	bx	lr
  4038de:	bf00      	nop
  4038e0:	400e0600 	.word	0x400e0600

004038e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4038e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4038e8:	4b01      	ldr	r3, [pc, #4]	; (4038f0 <pmc_disable_pllack+0xc>)
  4038ea:	629a      	str	r2, [r3, #40]	; 0x28
  4038ec:	4770      	bx	lr
  4038ee:	bf00      	nop
  4038f0:	400e0600 	.word	0x400e0600

004038f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4038f4:	4b02      	ldr	r3, [pc, #8]	; (403900 <pmc_is_locked_pllack+0xc>)
  4038f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4038f8:	f000 0002 	and.w	r0, r0, #2
  4038fc:	4770      	bx	lr
  4038fe:	bf00      	nop
  403900:	400e0600 	.word	0x400e0600

00403904 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403904:	283f      	cmp	r0, #63	; 0x3f
  403906:	d81e      	bhi.n	403946 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403908:	281f      	cmp	r0, #31
  40390a:	d80c      	bhi.n	403926 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40390c:	4b11      	ldr	r3, [pc, #68]	; (403954 <pmc_enable_periph_clk+0x50>)
  40390e:	699a      	ldr	r2, [r3, #24]
  403910:	2301      	movs	r3, #1
  403912:	4083      	lsls	r3, r0
  403914:	4393      	bics	r3, r2
  403916:	d018      	beq.n	40394a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403918:	2301      	movs	r3, #1
  40391a:	fa03 f000 	lsl.w	r0, r3, r0
  40391e:	4b0d      	ldr	r3, [pc, #52]	; (403954 <pmc_enable_periph_clk+0x50>)
  403920:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403922:	2000      	movs	r0, #0
  403924:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403926:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403928:	4b0a      	ldr	r3, [pc, #40]	; (403954 <pmc_enable_periph_clk+0x50>)
  40392a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40392e:	2301      	movs	r3, #1
  403930:	4083      	lsls	r3, r0
  403932:	4393      	bics	r3, r2
  403934:	d00b      	beq.n	40394e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403936:	2301      	movs	r3, #1
  403938:	fa03 f000 	lsl.w	r0, r3, r0
  40393c:	4b05      	ldr	r3, [pc, #20]	; (403954 <pmc_enable_periph_clk+0x50>)
  40393e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  403942:	2000      	movs	r0, #0
  403944:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  403946:	2001      	movs	r0, #1
  403948:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40394a:	2000      	movs	r0, #0
  40394c:	4770      	bx	lr
  40394e:	2000      	movs	r0, #0
}
  403950:	4770      	bx	lr
  403952:	bf00      	nop
  403954:	400e0600 	.word	0x400e0600

00403958 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403958:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40395a:	4b07      	ldr	r3, [pc, #28]	; (403978 <spi_enable_clock+0x20>)
  40395c:	4298      	cmp	r0, r3
  40395e:	d103      	bne.n	403968 <spi_enable_clock+0x10>
  403960:	2015      	movs	r0, #21
  403962:	4b06      	ldr	r3, [pc, #24]	; (40397c <spi_enable_clock+0x24>)
  403964:	4798      	blx	r3
  403966:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  403968:	4b05      	ldr	r3, [pc, #20]	; (403980 <spi_enable_clock+0x28>)
  40396a:	4298      	cmp	r0, r3
  40396c:	d102      	bne.n	403974 <spi_enable_clock+0x1c>
  40396e:	202a      	movs	r0, #42	; 0x2a
  403970:	4b02      	ldr	r3, [pc, #8]	; (40397c <spi_enable_clock+0x24>)
  403972:	4798      	blx	r3
  403974:	bd08      	pop	{r3, pc}
  403976:	bf00      	nop
  403978:	40008000 	.word	0x40008000
  40397c:	00403905 	.word	0x00403905
  403980:	40058000 	.word	0x40058000

00403984 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  403984:	6843      	ldr	r3, [r0, #4]
  403986:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40398a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40398c:	6843      	ldr	r3, [r0, #4]
  40398e:	0409      	lsls	r1, r1, #16
  403990:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  403994:	430b      	orrs	r3, r1
  403996:	6043      	str	r3, [r0, #4]
  403998:	4770      	bx	lr
  40399a:	bf00      	nop

0040399c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40399c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40399e:	f643 2399 	movw	r3, #15001	; 0x3a99
  4039a2:	e001      	b.n	4039a8 <spi_read+0xc>
		if (!timeout--) {
  4039a4:	3b01      	subs	r3, #1
  4039a6:	d00e      	beq.n	4039c6 <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4039a8:	6904      	ldr	r4, [r0, #16]
  4039aa:	f014 0f01 	tst.w	r4, #1
  4039ae:	d0f9      	beq.n	4039a4 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4039b0:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4039b2:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4039b4:	f010 0f02 	tst.w	r0, #2
  4039b8:	d002      	beq.n	4039c0 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4039ba:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4039be:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4039c0:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4039c2:	2000      	movs	r0, #0
  4039c4:	e000      	b.n	4039c8 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4039c6:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  4039c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4039cc:	4770      	bx	lr
  4039ce:	bf00      	nop

004039d0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4039d0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4039d2:	f643 2499 	movw	r4, #15001	; 0x3a99
  4039d6:	e001      	b.n	4039dc <spi_write+0xc>
		if (!timeout--) {
  4039d8:	3c01      	subs	r4, #1
  4039da:	d011      	beq.n	403a00 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4039dc:	6905      	ldr	r5, [r0, #16]
  4039de:	f015 0f02 	tst.w	r5, #2
  4039e2:	d0f9      	beq.n	4039d8 <spi_write+0x8>
  4039e4:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4039e6:	f014 0f02 	tst.w	r4, #2
  4039ea:	d006      	beq.n	4039fa <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4039ec:	0412      	lsls	r2, r2, #16
  4039ee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4039f2:	4311      	orrs	r1, r2
		if (uc_last) {
  4039f4:	b10b      	cbz	r3, 4039fa <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4039f6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4039fa:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4039fc:	2000      	movs	r0, #0
  4039fe:	e000      	b.n	403a02 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  403a00:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  403a02:	bc30      	pop	{r4, r5}
  403a04:	4770      	bx	lr
  403a06:	bf00      	nop

00403a08 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403a08:	b132      	cbz	r2, 403a18 <spi_set_clock_polarity+0x10>
  403a0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  403a0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403a10:	f043 0301 	orr.w	r3, r3, #1
  403a14:	6303      	str	r3, [r0, #48]	; 0x30
  403a16:	4770      	bx	lr
  403a18:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  403a1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403a1e:	f023 0301 	bic.w	r3, r3, #1
  403a22:	6303      	str	r3, [r0, #48]	; 0x30
  403a24:	4770      	bx	lr
  403a26:	bf00      	nop

00403a28 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403a28:	b132      	cbz	r2, 403a38 <spi_set_clock_phase+0x10>
  403a2a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  403a2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403a30:	f043 0302 	orr.w	r3, r3, #2
  403a34:	6303      	str	r3, [r0, #48]	; 0x30
  403a36:	4770      	bx	lr
  403a38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  403a3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403a3e:	f023 0302 	bic.w	r3, r3, #2
  403a42:	6303      	str	r3, [r0, #48]	; 0x30
  403a44:	4770      	bx	lr
  403a46:	bf00      	nop

00403a48 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403a48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403a4c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403a52:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  403a54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403a56:	431a      	orrs	r2, r3
  403a58:	630a      	str	r2, [r1, #48]	; 0x30
  403a5a:	4770      	bx	lr

00403a5c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403a5c:	1e43      	subs	r3, r0, #1
  403a5e:	4419      	add	r1, r3
  403a60:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  403a64:	1e43      	subs	r3, r0, #1
  403a66:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  403a68:	bf94      	ite	ls
  403a6a:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  403a6c:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  403a70:	4770      	bx	lr
  403a72:	bf00      	nop

00403a74 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  403a74:	b16a      	cbz	r2, 403a92 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  403a76:	b410      	push	{r4}
  403a78:	4614      	mov	r4, r2
  403a7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403a7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403a84:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  403a86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  403a88:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403a8c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403a8e:	2000      	movs	r0, #0
  403a90:	e002      	b.n	403a98 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  403a92:	f04f 30ff 	mov.w	r0, #4294967295
  403a96:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  403a98:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a9c:	4770      	bx	lr
  403a9e:	bf00      	nop

00403aa0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  403aa0:	b410      	push	{r4}
  403aa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  403aa6:	6b08      	ldr	r0, [r1, #48]	; 0x30
  403aa8:	b280      	uxth	r0, r0
  403aaa:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  403aac:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  403aae:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  403ab2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  403ab6:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  403ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
  403abc:	4770      	bx	lr
  403abe:	bf00      	nop

00403ac0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403ac0:	6943      	ldr	r3, [r0, #20]
  403ac2:	f013 0f02 	tst.w	r3, #2
  403ac6:	d002      	beq.n	403ace <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403ac8:	61c1      	str	r1, [r0, #28]
	return 0;
  403aca:	2000      	movs	r0, #0
  403acc:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  403ace:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  403ad0:	4770      	bx	lr
  403ad2:	bf00      	nop

00403ad4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403ad4:	6943      	ldr	r3, [r0, #20]
  403ad6:	f013 0f01 	tst.w	r3, #1
  403ada:	d003      	beq.n	403ae4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  403adc:	6983      	ldr	r3, [r0, #24]
  403ade:	700b      	strb	r3, [r1, #0]
	return 0;
  403ae0:	2000      	movs	r0, #0
  403ae2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  403ae4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  403ae6:	4770      	bx	lr

00403ae8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403ae8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403aea:	010c      	lsls	r4, r1, #4
  403aec:	4294      	cmp	r4, r2
  403aee:	d90f      	bls.n	403b10 <usart_set_async_baudrate+0x28>
  403af0:	e01a      	b.n	403b28 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403af2:	6841      	ldr	r1, [r0, #4]
  403af4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403af8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403afa:	0412      	lsls	r2, r2, #16
  403afc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403b00:	431a      	orrs	r2, r3
  403b02:	6202      	str	r2, [r0, #32]

	return 0;
  403b04:	2000      	movs	r0, #0
  403b06:	e01c      	b.n	403b42 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  403b08:	2001      	movs	r0, #1
  403b0a:	e01a      	b.n	403b42 <usart_set_async_baudrate+0x5a>
  403b0c:	2001      	movs	r0, #1
  403b0e:	e018      	b.n	403b42 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403b10:	0863      	lsrs	r3, r4, #1
  403b12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403b16:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  403b1a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403b1c:	1e5c      	subs	r4, r3, #1
  403b1e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403b22:	428c      	cmp	r4, r1
  403b24:	d9e9      	bls.n	403afa <usart_set_async_baudrate+0x12>
  403b26:	e7ef      	b.n	403b08 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403b28:	00c9      	lsls	r1, r1, #3
  403b2a:	084b      	lsrs	r3, r1, #1
  403b2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403b30:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403b34:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403b36:	1e5c      	subs	r4, r3, #1
  403b38:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403b3c:	428c      	cmp	r4, r1
  403b3e:	d8e5      	bhi.n	403b0c <usart_set_async_baudrate+0x24>
  403b40:	e7d7      	b.n	403af2 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  403b42:	f85d 4b04 	ldr.w	r4, [sp], #4
  403b46:	4770      	bx	lr

00403b48 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403b48:	4b08      	ldr	r3, [pc, #32]	; (403b6c <usart_reset+0x24>)
  403b4a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  403b4e:	2300      	movs	r3, #0
  403b50:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403b52:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403b54:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403b56:	2388      	movs	r3, #136	; 0x88
  403b58:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403b5a:	2324      	movs	r3, #36	; 0x24
  403b5c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  403b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
  403b62:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  403b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403b68:	6003      	str	r3, [r0, #0]
  403b6a:	4770      	bx	lr
  403b6c:	55534100 	.word	0x55534100

00403b70 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403b70:	b570      	push	{r4, r5, r6, lr}
  403b72:	4605      	mov	r5, r0
  403b74:	460c      	mov	r4, r1
  403b76:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403b78:	4b0f      	ldr	r3, [pc, #60]	; (403bb8 <usart_init_rs232+0x48>)
  403b7a:	4798      	blx	r3

	ul_reg_val = 0;
  403b7c:	2200      	movs	r2, #0
  403b7e:	4b0f      	ldr	r3, [pc, #60]	; (403bbc <usart_init_rs232+0x4c>)
  403b80:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403b82:	b19c      	cbz	r4, 403bac <usart_init_rs232+0x3c>
  403b84:	4632      	mov	r2, r6
  403b86:	6821      	ldr	r1, [r4, #0]
  403b88:	4628      	mov	r0, r5
  403b8a:	4b0d      	ldr	r3, [pc, #52]	; (403bc0 <usart_init_rs232+0x50>)
  403b8c:	4798      	blx	r3
  403b8e:	4602      	mov	r2, r0
  403b90:	b970      	cbnz	r0, 403bb0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403b92:	6861      	ldr	r1, [r4, #4]
  403b94:	68a3      	ldr	r3, [r4, #8]
  403b96:	4319      	orrs	r1, r3
  403b98:	6923      	ldr	r3, [r4, #16]
  403b9a:	4319      	orrs	r1, r3
  403b9c:	68e3      	ldr	r3, [r4, #12]
  403b9e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403ba0:	4906      	ldr	r1, [pc, #24]	; (403bbc <usart_init_rs232+0x4c>)
  403ba2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  403ba4:	6869      	ldr	r1, [r5, #4]
  403ba6:	430b      	orrs	r3, r1
  403ba8:	606b      	str	r3, [r5, #4]

	return 0;
  403baa:	e002      	b.n	403bb2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403bac:	2201      	movs	r2, #1
  403bae:	e000      	b.n	403bb2 <usart_init_rs232+0x42>
  403bb0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  403bb2:	4610      	mov	r0, r2
  403bb4:	bd70      	pop	{r4, r5, r6, pc}
  403bb6:	bf00      	nop
  403bb8:	00403b49 	.word	0x00403b49
  403bbc:	20400950 	.word	0x20400950
  403bc0:	00403ae9 	.word	0x00403ae9

00403bc4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  403bc4:	2340      	movs	r3, #64	; 0x40
  403bc6:	6003      	str	r3, [r0, #0]
  403bc8:	4770      	bx	lr
  403bca:	bf00      	nop

00403bcc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  403bcc:	2310      	movs	r3, #16
  403bce:	6003      	str	r3, [r0, #0]
  403bd0:	4770      	bx	lr
  403bd2:	bf00      	nop

00403bd4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403bd4:	6943      	ldr	r3, [r0, #20]
  403bd6:	f013 0f02 	tst.w	r3, #2
  403bda:	d004      	beq.n	403be6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403bdc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403be0:	61c1      	str	r1, [r0, #28]
	return 0;
  403be2:	2000      	movs	r0, #0
  403be4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  403be6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  403be8:	4770      	bx	lr
  403bea:	bf00      	nop

00403bec <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403bec:	6943      	ldr	r3, [r0, #20]
  403bee:	f013 0f01 	tst.w	r3, #1
  403bf2:	d005      	beq.n	403c00 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403bf4:	6983      	ldr	r3, [r0, #24]
  403bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403bfa:	600b      	str	r3, [r1, #0]

	return 0;
  403bfc:	2000      	movs	r0, #0
  403bfe:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403c00:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403c02:	4770      	bx	lr

00403c04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403c04:	e7fe      	b.n	403c04 <Dummy_Handler>
  403c06:	bf00      	nop

00403c08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403c08:	b500      	push	{lr}
  403c0a:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  403c0c:	4b27      	ldr	r3, [pc, #156]	; (403cac <Reset_Handler+0xa4>)
  403c0e:	4a28      	ldr	r2, [pc, #160]	; (403cb0 <Reset_Handler+0xa8>)
  403c10:	429a      	cmp	r2, r3
  403c12:	d003      	beq.n	403c1c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403c14:	4b27      	ldr	r3, [pc, #156]	; (403cb4 <Reset_Handler+0xac>)
  403c16:	4a25      	ldr	r2, [pc, #148]	; (403cac <Reset_Handler+0xa4>)
  403c18:	429a      	cmp	r2, r3
  403c1a:	d304      	bcc.n	403c26 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403c1c:	4b26      	ldr	r3, [pc, #152]	; (403cb8 <Reset_Handler+0xb0>)
  403c1e:	4a27      	ldr	r2, [pc, #156]	; (403cbc <Reset_Handler+0xb4>)
  403c20:	429a      	cmp	r2, r3
  403c22:	d30f      	bcc.n	403c44 <Reset_Handler+0x3c>
  403c24:	e01a      	b.n	403c5c <Reset_Handler+0x54>
  403c26:	4921      	ldr	r1, [pc, #132]	; (403cac <Reset_Handler+0xa4>)
  403c28:	4b25      	ldr	r3, [pc, #148]	; (403cc0 <Reset_Handler+0xb8>)
  403c2a:	1a5b      	subs	r3, r3, r1
  403c2c:	f023 0303 	bic.w	r3, r3, #3
  403c30:	3304      	adds	r3, #4
  403c32:	4a1f      	ldr	r2, [pc, #124]	; (403cb0 <Reset_Handler+0xa8>)
  403c34:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403c36:	f852 0b04 	ldr.w	r0, [r2], #4
  403c3a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  403c3e:	429a      	cmp	r2, r3
  403c40:	d1f9      	bne.n	403c36 <Reset_Handler+0x2e>
  403c42:	e7eb      	b.n	403c1c <Reset_Handler+0x14>
  403c44:	4b1f      	ldr	r3, [pc, #124]	; (403cc4 <Reset_Handler+0xbc>)
  403c46:	4a20      	ldr	r2, [pc, #128]	; (403cc8 <Reset_Handler+0xc0>)
  403c48:	1ad2      	subs	r2, r2, r3
  403c4a:	f022 0203 	bic.w	r2, r2, #3
  403c4e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403c50:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403c52:	2100      	movs	r1, #0
  403c54:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403c58:	4293      	cmp	r3, r2
  403c5a:	d1fb      	bne.n	403c54 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403c5c:	4a1b      	ldr	r2, [pc, #108]	; (403ccc <Reset_Handler+0xc4>)
  403c5e:	4b1c      	ldr	r3, [pc, #112]	; (403cd0 <Reset_Handler+0xc8>)
  403c60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403c64:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403c66:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403c6a:	fab3 f383 	clz	r3, r3
  403c6e:	095b      	lsrs	r3, r3, #5
  403c70:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403c72:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403c74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c78:	2200      	movs	r2, #0
  403c7a:	4b16      	ldr	r3, [pc, #88]	; (403cd4 <Reset_Handler+0xcc>)
  403c7c:	701a      	strb	r2, [r3, #0]
	return flags;
  403c7e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403c80:	4a15      	ldr	r2, [pc, #84]	; (403cd8 <Reset_Handler+0xd0>)
  403c82:	6813      	ldr	r3, [r2, #0]
  403c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403c88:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403c8a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403c8e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403c92:	b129      	cbz	r1, 403ca0 <Reset_Handler+0x98>
		cpu_irq_enable();
  403c94:	2201      	movs	r2, #1
  403c96:	4b0f      	ldr	r3, [pc, #60]	; (403cd4 <Reset_Handler+0xcc>)
  403c98:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403c9a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403c9e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  403ca0:	4b0e      	ldr	r3, [pc, #56]	; (403cdc <Reset_Handler+0xd4>)
  403ca2:	4798      	blx	r3

        /* Branch to main function */
        main();
  403ca4:	4b0e      	ldr	r3, [pc, #56]	; (403ce0 <Reset_Handler+0xd8>)
  403ca6:	4798      	blx	r3
  403ca8:	e7fe      	b.n	403ca8 <Reset_Handler+0xa0>
  403caa:	bf00      	nop
  403cac:	20400000 	.word	0x20400000
  403cb0:	00409230 	.word	0x00409230
  403cb4:	20400884 	.word	0x20400884
  403cb8:	20401018 	.word	0x20401018
  403cbc:	20400884 	.word	0x20400884
  403cc0:	20400883 	.word	0x20400883
  403cc4:	20400888 	.word	0x20400888
  403cc8:	2040101b 	.word	0x2040101b
  403ccc:	e000ed00 	.word	0xe000ed00
  403cd0:	00400000 	.word	0x00400000
  403cd4:	20400014 	.word	0x20400014
  403cd8:	e000ed88 	.word	0xe000ed88
  403cdc:	0040453d 	.word	0x0040453d
  403ce0:	00404359 	.word	0x00404359

00403ce4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403ce4:	4b3c      	ldr	r3, [pc, #240]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ce8:	f003 0303 	and.w	r3, r3, #3
  403cec:	2b01      	cmp	r3, #1
  403cee:	d00f      	beq.n	403d10 <SystemCoreClockUpdate+0x2c>
  403cf0:	b113      	cbz	r3, 403cf8 <SystemCoreClockUpdate+0x14>
  403cf2:	2b02      	cmp	r3, #2
  403cf4:	d029      	beq.n	403d4a <SystemCoreClockUpdate+0x66>
  403cf6:	e057      	b.n	403da8 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403cf8:	4b38      	ldr	r3, [pc, #224]	; (403ddc <SystemCoreClockUpdate+0xf8>)
  403cfa:	695b      	ldr	r3, [r3, #20]
  403cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403d00:	bf14      	ite	ne
  403d02:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403d06:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403d0a:	4b35      	ldr	r3, [pc, #212]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d0c:	601a      	str	r2, [r3, #0]
  403d0e:	e04b      	b.n	403da8 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403d10:	4b31      	ldr	r3, [pc, #196]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d12:	6a1b      	ldr	r3, [r3, #32]
  403d14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403d18:	d003      	beq.n	403d22 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403d1a:	4a32      	ldr	r2, [pc, #200]	; (403de4 <SystemCoreClockUpdate+0x100>)
  403d1c:	4b30      	ldr	r3, [pc, #192]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d1e:	601a      	str	r2, [r3, #0]
  403d20:	e042      	b.n	403da8 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403d22:	4a31      	ldr	r2, [pc, #196]	; (403de8 <SystemCoreClockUpdate+0x104>)
  403d24:	4b2e      	ldr	r3, [pc, #184]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d26:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403d28:	4b2b      	ldr	r3, [pc, #172]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d2a:	6a1b      	ldr	r3, [r3, #32]
  403d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d30:	2b10      	cmp	r3, #16
  403d32:	d002      	beq.n	403d3a <SystemCoreClockUpdate+0x56>
  403d34:	2b20      	cmp	r3, #32
  403d36:	d004      	beq.n	403d42 <SystemCoreClockUpdate+0x5e>
  403d38:	e036      	b.n	403da8 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403d3a:	4a2c      	ldr	r2, [pc, #176]	; (403dec <SystemCoreClockUpdate+0x108>)
  403d3c:	4b28      	ldr	r3, [pc, #160]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d3e:	601a      	str	r2, [r3, #0]
          break;
  403d40:	e032      	b.n	403da8 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403d42:	4a28      	ldr	r2, [pc, #160]	; (403de4 <SystemCoreClockUpdate+0x100>)
  403d44:	4b26      	ldr	r3, [pc, #152]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d46:	601a      	str	r2, [r3, #0]
          break;
  403d48:	e02e      	b.n	403da8 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403d4a:	4b23      	ldr	r3, [pc, #140]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d4c:	6a1b      	ldr	r3, [r3, #32]
  403d4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403d52:	d003      	beq.n	403d5c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403d54:	4a23      	ldr	r2, [pc, #140]	; (403de4 <SystemCoreClockUpdate+0x100>)
  403d56:	4b22      	ldr	r3, [pc, #136]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d58:	601a      	str	r2, [r3, #0]
  403d5a:	e012      	b.n	403d82 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403d5c:	4a22      	ldr	r2, [pc, #136]	; (403de8 <SystemCoreClockUpdate+0x104>)
  403d5e:	4b20      	ldr	r3, [pc, #128]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d60:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403d62:	4b1d      	ldr	r3, [pc, #116]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d64:	6a1b      	ldr	r3, [r3, #32]
  403d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d6a:	2b10      	cmp	r3, #16
  403d6c:	d002      	beq.n	403d74 <SystemCoreClockUpdate+0x90>
  403d6e:	2b20      	cmp	r3, #32
  403d70:	d004      	beq.n	403d7c <SystemCoreClockUpdate+0x98>
  403d72:	e006      	b.n	403d82 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403d74:	4a1d      	ldr	r2, [pc, #116]	; (403dec <SystemCoreClockUpdate+0x108>)
  403d76:	4b1a      	ldr	r3, [pc, #104]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d78:	601a      	str	r2, [r3, #0]
          break;
  403d7a:	e002      	b.n	403d82 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403d7c:	4a19      	ldr	r2, [pc, #100]	; (403de4 <SystemCoreClockUpdate+0x100>)
  403d7e:	4b18      	ldr	r3, [pc, #96]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d80:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403d82:	4b15      	ldr	r3, [pc, #84]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d86:	f003 0303 	and.w	r3, r3, #3
  403d8a:	2b02      	cmp	r3, #2
  403d8c:	d10c      	bne.n	403da8 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403d8e:	4a12      	ldr	r2, [pc, #72]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403d92:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403d94:	4812      	ldr	r0, [pc, #72]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403d96:	f3c3 410a 	ubfx	r1, r3, #16, #11
  403d9a:	6803      	ldr	r3, [r0, #0]
  403d9c:	fb01 3303 	mla	r3, r1, r3, r3
  403da0:	b2d2      	uxtb	r2, r2
  403da2:	fbb3 f3f2 	udiv	r3, r3, r2
  403da6:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403da8:	4b0b      	ldr	r3, [pc, #44]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403db0:	2b70      	cmp	r3, #112	; 0x70
  403db2:	d107      	bne.n	403dc4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  403db4:	4a0a      	ldr	r2, [pc, #40]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403db6:	6813      	ldr	r3, [r2, #0]
  403db8:	490d      	ldr	r1, [pc, #52]	; (403df0 <SystemCoreClockUpdate+0x10c>)
  403dba:	fba1 1303 	umull	r1, r3, r1, r3
  403dbe:	085b      	lsrs	r3, r3, #1
  403dc0:	6013      	str	r3, [r2, #0]
  403dc2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403dc4:	4b04      	ldr	r3, [pc, #16]	; (403dd8 <SystemCoreClockUpdate+0xf4>)
  403dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403dc8:	4905      	ldr	r1, [pc, #20]	; (403de0 <SystemCoreClockUpdate+0xfc>)
  403dca:	f3c3 1202 	ubfx	r2, r3, #4, #3
  403dce:	680b      	ldr	r3, [r1, #0]
  403dd0:	40d3      	lsrs	r3, r2
  403dd2:	600b      	str	r3, [r1, #0]
  403dd4:	4770      	bx	lr
  403dd6:	bf00      	nop
  403dd8:	400e0600 	.word	0x400e0600
  403ddc:	400e1810 	.word	0x400e1810
  403de0:	20400018 	.word	0x20400018
  403de4:	00b71b00 	.word	0x00b71b00
  403de8:	003d0900 	.word	0x003d0900
  403dec:	007a1200 	.word	0x007a1200
  403df0:	aaaaaaab 	.word	0xaaaaaaab

00403df4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403df4:	4b12      	ldr	r3, [pc, #72]	; (403e40 <system_init_flash+0x4c>)
  403df6:	4298      	cmp	r0, r3
  403df8:	d804      	bhi.n	403e04 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403dfe:	4b11      	ldr	r3, [pc, #68]	; (403e44 <system_init_flash+0x50>)
  403e00:	601a      	str	r2, [r3, #0]
  403e02:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403e04:	4b10      	ldr	r3, [pc, #64]	; (403e48 <system_init_flash+0x54>)
  403e06:	4298      	cmp	r0, r3
  403e08:	d803      	bhi.n	403e12 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403e0a:	4a10      	ldr	r2, [pc, #64]	; (403e4c <system_init_flash+0x58>)
  403e0c:	4b0d      	ldr	r3, [pc, #52]	; (403e44 <system_init_flash+0x50>)
  403e0e:	601a      	str	r2, [r3, #0]
  403e10:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403e12:	4b0f      	ldr	r3, [pc, #60]	; (403e50 <system_init_flash+0x5c>)
  403e14:	4298      	cmp	r0, r3
  403e16:	d803      	bhi.n	403e20 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403e18:	4a0e      	ldr	r2, [pc, #56]	; (403e54 <system_init_flash+0x60>)
  403e1a:	4b0a      	ldr	r3, [pc, #40]	; (403e44 <system_init_flash+0x50>)
  403e1c:	601a      	str	r2, [r3, #0]
  403e1e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403e20:	4b0d      	ldr	r3, [pc, #52]	; (403e58 <system_init_flash+0x64>)
  403e22:	4298      	cmp	r0, r3
  403e24:	d803      	bhi.n	403e2e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403e26:	4a0d      	ldr	r2, [pc, #52]	; (403e5c <system_init_flash+0x68>)
  403e28:	4b06      	ldr	r3, [pc, #24]	; (403e44 <system_init_flash+0x50>)
  403e2a:	601a      	str	r2, [r3, #0]
  403e2c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403e2e:	4b0c      	ldr	r3, [pc, #48]	; (403e60 <system_init_flash+0x6c>)
  403e30:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403e32:	bf94      	ite	ls
  403e34:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403e38:	4a0a      	ldrhi	r2, [pc, #40]	; (403e64 <system_init_flash+0x70>)
  403e3a:	4b02      	ldr	r3, [pc, #8]	; (403e44 <system_init_flash+0x50>)
  403e3c:	601a      	str	r2, [r3, #0]
  403e3e:	4770      	bx	lr
  403e40:	01312cff 	.word	0x01312cff
  403e44:	400e0c00 	.word	0x400e0c00
  403e48:	026259ff 	.word	0x026259ff
  403e4c:	04000100 	.word	0x04000100
  403e50:	039386ff 	.word	0x039386ff
  403e54:	04000200 	.word	0x04000200
  403e58:	04c4b3ff 	.word	0x04c4b3ff
  403e5c:	04000300 	.word	0x04000300
  403e60:	05f5e0ff 	.word	0x05f5e0ff
  403e64:	04000500 	.word	0x04000500

00403e68 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403e68:	4b09      	ldr	r3, [pc, #36]	; (403e90 <_sbrk+0x28>)
  403e6a:	681b      	ldr	r3, [r3, #0]
  403e6c:	b913      	cbnz	r3, 403e74 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403e6e:	4a09      	ldr	r2, [pc, #36]	; (403e94 <_sbrk+0x2c>)
  403e70:	4b07      	ldr	r3, [pc, #28]	; (403e90 <_sbrk+0x28>)
  403e72:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403e74:	4b06      	ldr	r3, [pc, #24]	; (403e90 <_sbrk+0x28>)
  403e76:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403e78:	181a      	adds	r2, r3, r0
  403e7a:	4907      	ldr	r1, [pc, #28]	; (403e98 <_sbrk+0x30>)
  403e7c:	4291      	cmp	r1, r2
  403e7e:	db04      	blt.n	403e8a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403e80:	4610      	mov	r0, r2
  403e82:	4a03      	ldr	r2, [pc, #12]	; (403e90 <_sbrk+0x28>)
  403e84:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403e86:	4618      	mov	r0, r3
  403e88:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403e8a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403e8e:	4770      	bx	lr
  403e90:	20400954 	.word	0x20400954
  403e94:	20403218 	.word	0x20403218
  403e98:	2045fffc 	.word	0x2045fffc

00403e9c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403e9c:	f04f 30ff 	mov.w	r0, #4294967295
  403ea0:	4770      	bx	lr
  403ea2:	bf00      	nop

00403ea4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403ea8:	604b      	str	r3, [r1, #4]

	return 0;
}
  403eaa:	2000      	movs	r0, #0
  403eac:	4770      	bx	lr
  403eae:	bf00      	nop

00403eb0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403eb0:	2001      	movs	r0, #1
  403eb2:	4770      	bx	lr

00403eb4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403eb4:	2000      	movs	r0, #0
  403eb6:	4770      	bx	lr

00403eb8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  403eb8:	b538      	push	{r3, r4, r5, lr}
  403eba:	4614      	mov	r4, r2
	switch (u8Msg) {
  403ebc:	3901      	subs	r1, #1
  403ebe:	2906      	cmp	r1, #6
  403ec0:	f200 80d3 	bhi.w	40406a <socket_cb+0x1b2>
  403ec4:	e8df f011 	tbh	[pc, r1, lsl #1]
  403ec8:	00200007 	.word	0x00200007
  403ecc:	003a00d1 	.word	0x003a00d1
  403ed0:	006300d1 	.word	0x006300d1
  403ed4:	005b      	.short	0x005b
	/* Socket bind */
	case SOCKET_MSG_BIND:
	{
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
		if (pstrBind && pstrBind->status == 0) {
  403ed6:	b162      	cbz	r2, 403ef2 <socket_cb+0x3a>
  403ed8:	f992 3000 	ldrsb.w	r3, [r2]
  403edc:	b94b      	cbnz	r3, 403ef2 <socket_cb+0x3a>
			printf("socket_cb: bind success!\r\n");
  403ede:	4863      	ldr	r0, [pc, #396]	; (40406c <socket_cb+0x1b4>)
  403ee0:	4b63      	ldr	r3, [pc, #396]	; (404070 <socket_cb+0x1b8>)
  403ee2:	4798      	blx	r3
			listen(tcp_server_socket, 0);
  403ee4:	2100      	movs	r1, #0
  403ee6:	4b63      	ldr	r3, [pc, #396]	; (404074 <socket_cb+0x1bc>)
  403ee8:	f993 0000 	ldrsb.w	r0, [r3]
  403eec:	4b62      	ldr	r3, [pc, #392]	; (404078 <socket_cb+0x1c0>)
  403eee:	4798      	blx	r3
  403ef0:	bd38      	pop	{r3, r4, r5, pc}
		} else {
			printf("socket_cb: bind error!\r\n");
  403ef2:	4862      	ldr	r0, [pc, #392]	; (40407c <socket_cb+0x1c4>)
  403ef4:	4b5e      	ldr	r3, [pc, #376]	; (404070 <socket_cb+0x1b8>)
  403ef6:	4798      	blx	r3
			close(tcp_server_socket);
  403ef8:	4c5e      	ldr	r4, [pc, #376]	; (404074 <socket_cb+0x1bc>)
  403efa:	f994 0000 	ldrsb.w	r0, [r4]
  403efe:	4b60      	ldr	r3, [pc, #384]	; (404080 <socket_cb+0x1c8>)
  403f00:	4798      	blx	r3
			tcp_server_socket = -1;
  403f02:	23ff      	movs	r3, #255	; 0xff
  403f04:	7023      	strb	r3, [r4, #0]
  403f06:	bd38      	pop	{r3, r4, r5, pc}

	/* Socket listen */
	case SOCKET_MSG_LISTEN:
	{
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
		if (pstrListen && pstrListen->status == 0) {
  403f08:	b16a      	cbz	r2, 403f26 <socket_cb+0x6e>
  403f0a:	f992 3000 	ldrsb.w	r3, [r2]
  403f0e:	b953      	cbnz	r3, 403f26 <socket_cb+0x6e>
			printf("socket_cb: listen success!\r\n");
  403f10:	485c      	ldr	r0, [pc, #368]	; (404084 <socket_cb+0x1cc>)
  403f12:	4b57      	ldr	r3, [pc, #348]	; (404070 <socket_cb+0x1b8>)
  403f14:	4798      	blx	r3
			accept(tcp_server_socket, NULL, NULL);
  403f16:	2200      	movs	r2, #0
  403f18:	4611      	mov	r1, r2
  403f1a:	4b56      	ldr	r3, [pc, #344]	; (404074 <socket_cb+0x1bc>)
  403f1c:	f993 0000 	ldrsb.w	r0, [r3]
  403f20:	4b59      	ldr	r3, [pc, #356]	; (404088 <socket_cb+0x1d0>)
  403f22:	4798      	blx	r3
  403f24:	bd38      	pop	{r3, r4, r5, pc}
		} else {
			printf("socket_cb: listen error!\r\n");
  403f26:	4859      	ldr	r0, [pc, #356]	; (40408c <socket_cb+0x1d4>)
  403f28:	4b51      	ldr	r3, [pc, #324]	; (404070 <socket_cb+0x1b8>)
  403f2a:	4798      	blx	r3
			close(tcp_server_socket);
  403f2c:	4c51      	ldr	r4, [pc, #324]	; (404074 <socket_cb+0x1bc>)
  403f2e:	f994 0000 	ldrsb.w	r0, [r4]
  403f32:	4b53      	ldr	r3, [pc, #332]	; (404080 <socket_cb+0x1c8>)
  403f34:	4798      	blx	r3
			tcp_server_socket = -1;
  403f36:	23ff      	movs	r3, #255	; 0xff
  403f38:	7023      	strb	r3, [r4, #0]
  403f3a:	bd38      	pop	{r3, r4, r5, pc}

	/* Connect accept */
	case SOCKET_MSG_ACCEPT:
	{
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
		if (pstrAccept) {
  403f3c:	b1a2      	cbz	r2, 403f68 <socket_cb+0xb0>
			printf("socket_cb: accept success!\r\n");
  403f3e:	4854      	ldr	r0, [pc, #336]	; (404090 <socket_cb+0x1d8>)
  403f40:	4b4b      	ldr	r3, [pc, #300]	; (404070 <socket_cb+0x1b8>)
  403f42:	4798      	blx	r3
			accept(tcp_server_socket, NULL, NULL);
  403f44:	2200      	movs	r2, #0
  403f46:	4611      	mov	r1, r2
  403f48:	4b4a      	ldr	r3, [pc, #296]	; (404074 <socket_cb+0x1bc>)
  403f4a:	f993 0000 	ldrsb.w	r0, [r3]
  403f4e:	4b4e      	ldr	r3, [pc, #312]	; (404088 <socket_cb+0x1d0>)
  403f50:	4798      	blx	r3
			tcp_client_socket = pstrAccept->sock;
  403f52:	f994 0000 	ldrsb.w	r0, [r4]
  403f56:	4b4f      	ldr	r3, [pc, #316]	; (404094 <socket_cb+0x1dc>)
  403f58:	7018      	strb	r0, [r3, #0]
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  403f5a:	2300      	movs	r3, #0
  403f5c:	f240 52b4 	movw	r2, #1460	; 0x5b4
  403f60:	494d      	ldr	r1, [pc, #308]	; (404098 <socket_cb+0x1e0>)
  403f62:	4c4e      	ldr	r4, [pc, #312]	; (40409c <socket_cb+0x1e4>)
  403f64:	47a0      	blx	r4
  403f66:	bd38      	pop	{r3, r4, r5, pc}
		} else {
			printf("socket_cb: accept error!\r\n");
  403f68:	484d      	ldr	r0, [pc, #308]	; (4040a0 <socket_cb+0x1e8>)
  403f6a:	4b41      	ldr	r3, [pc, #260]	; (404070 <socket_cb+0x1b8>)
  403f6c:	4798      	blx	r3
			close(tcp_server_socket);
  403f6e:	4c41      	ldr	r4, [pc, #260]	; (404074 <socket_cb+0x1bc>)
  403f70:	f994 0000 	ldrsb.w	r0, [r4]
  403f74:	4b42      	ldr	r3, [pc, #264]	; (404080 <socket_cb+0x1c8>)
  403f76:	4798      	blx	r3
			tcp_server_socket = -1;
  403f78:	23ff      	movs	r3, #255	; 0xff
  403f7a:	7023      	strb	r3, [r4, #0]
  403f7c:	bd38      	pop	{r3, r4, r5, pc}
	break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  403f7e:	4849      	ldr	r0, [pc, #292]	; (4040a4 <socket_cb+0x1ec>)
  403f80:	4c3b      	ldr	r4, [pc, #236]	; (404070 <socket_cb+0x1b8>)
  403f82:	47a0      	blx	r4
		printf("TCP Server Test Complete!\r\n");
  403f84:	4848      	ldr	r0, [pc, #288]	; (4040a8 <socket_cb+0x1f0>)
  403f86:	47a0      	blx	r4
		printf("close socket\n");
  403f88:	4848      	ldr	r0, [pc, #288]	; (4040ac <socket_cb+0x1f4>)
  403f8a:	47a0      	blx	r4
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  403f8c:	bd38      	pop	{r3, r4, r5, pc}

	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403f8e:	2a00      	cmp	r2, #0
  403f90:	d061      	beq.n	404056 <socket_cb+0x19e>
  403f92:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403f96:	2b00      	cmp	r3, #0
  403f98:	dd5d      	ble.n	404056 <socket_cb+0x19e>

			//printf("socket_cb: recv success!\r\n");
			//printf(" -------- \n", gau8SocketTestBuffer);
			g_nMensagensRx++;
  403f9a:	4b45      	ldr	r3, [pc, #276]	; (4040b0 <socket_cb+0x1f8>)
  403f9c:	6819      	ldr	r1, [r3, #0]
  403f9e:	3101      	adds	r1, #1
  403fa0:	6019      	str	r1, [r3, #0]
			printf("Mensagem recebida do PUTTY: numero %d \n", g_nMensagensRx);
  403fa2:	4844      	ldr	r0, [pc, #272]	; (4040b4 <socket_cb+0x1fc>)
  403fa4:	4d32      	ldr	r5, [pc, #200]	; (404070 <socket_cb+0x1b8>)
  403fa6:	47a8      	blx	r5

			printf("%s \n", gau8SocketTestBuffer);
  403fa8:	4c3b      	ldr	r4, [pc, #236]	; (404098 <socket_cb+0x1e0>)
  403faa:	4621      	mov	r1, r4
  403fac:	4842      	ldr	r0, [pc, #264]	; (4040b8 <socket_cb+0x200>)
  403fae:	47a8      	blx	r5
			printf(" -------- \n", gau8SocketTestBuffer);
  403fb0:	4621      	mov	r1, r4
  403fb2:	4842      	ldr	r0, [pc, #264]	; (4040bc <socket_cb+0x204>)
  403fb4:	47a8      	blx	r5

			send(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  403fb6:	2300      	movs	r3, #0
  403fb8:	f240 52b4 	movw	r2, #1460	; 0x5b4
  403fbc:	4621      	mov	r1, r4
  403fbe:	4835      	ldr	r0, [pc, #212]	; (404094 <socket_cb+0x1dc>)
  403fc0:	f990 0000 	ldrsb.w	r0, [r0]
  403fc4:	4d3e      	ldr	r5, [pc, #248]	; (4040c0 <socket_cb+0x208>)
  403fc6:	47a8      	blx	r5
			/************************************************************************/
			/*               Checando comandos                                                        */
			/************************************************************************/

			com_t *pkg_buffer;
			pkg_buffer = com_interpretando_buffer(gau8SocketTestBuffer);
  403fc8:	4620      	mov	r0, r4
  403fca:	4b3e      	ldr	r3, [pc, #248]	; (4040c4 <socket_cb+0x20c>)
  403fcc:	4798      	blx	r3
  403fce:	4604      	mov	r4, r0
			switch (pkg_buffer->pkg_type){
  403fd0:	7803      	ldrb	r3, [r0, #0]
  403fd2:	2b02      	cmp	r3, #2
  403fd4:	d018      	beq.n	404008 <socket_cb+0x150>
  403fd6:	d802      	bhi.n	403fde <socket_cb+0x126>
  403fd8:	2b01      	cmp	r3, #1
  403fda:	d005      	beq.n	403fe8 <socket_cb+0x130>
  403fdc:	e025      	b.n	40402a <socket_cb+0x172>
  403fde:	2b10      	cmp	r3, #16
  403fe0:	d017      	beq.n	404012 <socket_cb+0x15a>
  403fe2:	2bff      	cmp	r3, #255	; 0xff
  403fe4:	d01d      	beq.n	404022 <socket_cb+0x16a>
  403fe6:	e020      	b.n	40402a <socket_cb+0x172>
				case command_LED_ON:
					puts("lED ON\N");
  403fe8:	4837      	ldr	r0, [pc, #220]	; (4040c8 <socket_cb+0x210>)
  403fea:	4b38      	ldr	r3, [pc, #224]	; (4040cc <socket_cb+0x214>)
  403fec:	4798      	blx	r3
					send(tcp_client_socket, PACOTE_TESTE_tx_OK, sizeof(PACOTE_TESTE_tx_OK), 0);
  403fee:	2300      	movs	r3, #0
  403ff0:	2205      	movs	r2, #5
  403ff2:	4937      	ldr	r1, [pc, #220]	; (4040d0 <socket_cb+0x218>)
  403ff4:	4827      	ldr	r0, [pc, #156]	; (404094 <socket_cb+0x1dc>)
  403ff6:	f990 0000 	ldrsb.w	r0, [r0]
  403ffa:	4d31      	ldr	r5, [pc, #196]	; (4040c0 <socket_cb+0x208>)
  403ffc:	47a8      	blx	r5
					PIOC->PIO_CODR = (1 << 8);
  403ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
  404002:	4b34      	ldr	r3, [pc, #208]	; (4040d4 <socket_cb+0x21c>)
  404004:	635a      	str	r2, [r3, #52]	; 0x34
					break;
  404006:	e010      	b.n	40402a <socket_cb+0x172>

				case command_LED_OFF:
					PIOC->PIO_SODR = (1 << 8);
  404008:	f44f 7280 	mov.w	r2, #256	; 0x100
  40400c:	4b31      	ldr	r3, [pc, #196]	; (4040d4 <socket_cb+0x21c>)
  40400e:	631a      	str	r2, [r3, #48]	; 0x30
					break;
  404010:	e00b      	b.n	40402a <socket_cb+0x172>
				case PACOTE_ALARM_SET: ;
					/* C doesn't allow for declarations after labels,
					 * therefore this semi-collon after the ':' is
					 * necessary (it creates a new empty line)
					 */
					hour_t *h = (hour_t *) pkg_buffer->pkg_value;
  404012:	6845      	ldr	r5, [r0, #4]
					//printf("Hora: %hhu\nMinuto: %hhu\n", h->hour, h->minute);
					rtc_set_alarm(h);
  404014:	4628      	mov	r0, r5
  404016:	4b30      	ldr	r3, [pc, #192]	; (4040d8 <socket_cb+0x220>)
  404018:	4798      	blx	r3
					free(h);
  40401a:	4628      	mov	r0, r5
  40401c:	4b2f      	ldr	r3, [pc, #188]	; (4040dc <socket_cb+0x224>)
  40401e:	4798      	blx	r3
					break;
  404020:	e003      	b.n	40402a <socket_cb+0x172>


				case PACOTE_ERRO:
					printf("%s", (char *) pkg_buffer->pkg_value);
  404022:	6841      	ldr	r1, [r0, #4]
  404024:	482e      	ldr	r0, [pc, #184]	; (4040e0 <socket_cb+0x228>)
  404026:	4b12      	ldr	r3, [pc, #72]	; (404070 <socket_cb+0x1b8>)
  404028:	4798      	blx	r3
					break;

			}
			free(pkg_buffer);
  40402a:	4620      	mov	r0, r4
  40402c:	4b2b      	ldr	r3, [pc, #172]	; (4040dc <socket_cb+0x224>)
  40402e:	4798      	blx	r3
  404030:	4a19      	ldr	r2, [pc, #100]	; (404098 <socket_cb+0x1e0>)
  404032:	1e53      	subs	r3, r2, #1
  404034:	f202 52b3 	addw	r2, r2, #1459	; 0x5b3
			uint16 i;
			for(i=0;i< sizeof(gau8SocketTestBuffer); i++)
				gau8SocketTestBuffer[i] = 0;
  404038:	2100      	movs	r1, #0
  40403a:	f803 1f01 	strb.w	r1, [r3, #1]!
					break;

			}
			free(pkg_buffer);
			uint16 i;
			for(i=0;i< sizeof(gau8SocketTestBuffer); i++)
  40403e:	4293      	cmp	r3, r2
  404040:	d1fb      	bne.n	40403a <socket_cb+0x182>
				gau8SocketTestBuffer[i] = 0;

			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  404042:	2300      	movs	r3, #0
  404044:	f240 52b4 	movw	r2, #1460	; 0x5b4
  404048:	4913      	ldr	r1, [pc, #76]	; (404098 <socket_cb+0x1e0>)
  40404a:	4812      	ldr	r0, [pc, #72]	; (404094 <socket_cb+0x1dc>)
  40404c:	f990 0000 	ldrsb.w	r0, [r0]
  404050:	4c12      	ldr	r4, [pc, #72]	; (40409c <socket_cb+0x1e4>)
  404052:	47a0      	blx	r4

	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  404054:	bd38      	pop	{r3, r4, r5, pc}
				gau8SocketTestBuffer[i] = 0;

			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);

		} else {
			printf("socket_cb: recv error!\r\n");
  404056:	4823      	ldr	r0, [pc, #140]	; (4040e4 <socket_cb+0x22c>)
  404058:	4b05      	ldr	r3, [pc, #20]	; (404070 <socket_cb+0x1b8>)
  40405a:	4798      	blx	r3
			close(tcp_server_socket);
  40405c:	4c05      	ldr	r4, [pc, #20]	; (404074 <socket_cb+0x1bc>)
  40405e:	f994 0000 	ldrsb.w	r0, [r4]
  404062:	4b07      	ldr	r3, [pc, #28]	; (404080 <socket_cb+0x1c8>)
  404064:	4798      	blx	r3
			tcp_server_socket = -1;
  404066:	23ff      	movs	r3, #255	; 0xff
  404068:	7023      	strb	r3, [r4, #0]
  40406a:	bd38      	pop	{r3, r4, r5, pc}
  40406c:	00408e6c 	.word	0x00408e6c
  404070:	0040458d 	.word	0x0040458d
  404074:	2040001d 	.word	0x2040001d
  404078:	00402e15 	.word	0x00402e15
  40407c:	00408e88 	.word	0x00408e88
  404080:	00402fd9 	.word	0x00402fd9
  404084:	00408ea4 	.word	0x00408ea4
  404088:	00402e75 	.word	0x00402e75
  40408c:	00408ec4 	.word	0x00408ec4
  404090:	00408ee0 	.word	0x00408ee0
  404094:	2040001c 	.word	0x2040001c
  404098:	2040095c 	.word	0x2040095c
  40409c:	00402f35 	.word	0x00402f35
  4040a0:	00408f00 	.word	0x00408f00
  4040a4:	00408f1c 	.word	0x00408f1c
  4040a8:	00408f38 	.word	0x00408f38
  4040ac:	00408f54 	.word	0x00408f54
  4040b0:	20400958 	.word	0x20400958
  4040b4:	00408f64 	.word	0x00408f64
  4040b8:	00407f40 	.word	0x00407f40
  4040bc:	00408f8c 	.word	0x00408f8c
  4040c0:	00402e99 	.word	0x00402e99
  4040c4:	00400461 	.word	0x00400461
  4040c8:	00408f98 	.word	0x00408f98
  4040cc:	00404c51 	.word	0x00404c51
  4040d0:	00407f5c 	.word	0x00407f5c
  4040d4:	400e1200 	.word	0x400e1200
  4040d8:	004005ad 	.word	0x004005ad
  4040dc:	004045c5 	.word	0x004045c5
  4040e0:	00408fa0 	.word	0x00408fa0
  4040e4:	00408fa4 	.word	0x00408fa4

004040e8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  4040e8:	b510      	push	{r4, lr}
  4040ea:	b082      	sub	sp, #8
	switch (u8MsgType) {
  4040ec:	282c      	cmp	r0, #44	; 0x2c
  4040ee:	d002      	beq.n	4040f6 <wifi_cb+0xe>
  4040f0:	2832      	cmp	r0, #50	; 0x32
  4040f2:	d019      	beq.n	404128 <wifi_cb+0x40>
  4040f4:	e024      	b.n	404140 <wifi_cb+0x58>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4040f6:	780b      	ldrb	r3, [r1, #0]
  4040f8:	2b01      	cmp	r3, #1
  4040fa:	d105      	bne.n	404108 <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  4040fc:	4811      	ldr	r0, [pc, #68]	; (404144 <wifi_cb+0x5c>)
  4040fe:	4b12      	ldr	r3, [pc, #72]	; (404148 <wifi_cb+0x60>)
  404100:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  404102:	4b12      	ldr	r3, [pc, #72]	; (40414c <wifi_cb+0x64>)
  404104:	4798      	blx	r3
  404106:	e01b      	b.n	404140 <wifi_cb+0x58>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  404108:	b9d3      	cbnz	r3, 404140 <wifi_cb+0x58>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  40410a:	4811      	ldr	r0, [pc, #68]	; (404150 <wifi_cb+0x68>)
  40410c:	4b0e      	ldr	r3, [pc, #56]	; (404148 <wifi_cb+0x60>)
  40410e:	4798      	blx	r3
			wifi_connected = 0;
  404110:	2200      	movs	r2, #0
  404112:	4b10      	ldr	r3, [pc, #64]	; (404154 <wifi_cb+0x6c>)
  404114:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404116:	23ff      	movs	r3, #255	; 0xff
  404118:	9300      	str	r3, [sp, #0]
  40411a:	4b0f      	ldr	r3, [pc, #60]	; (404158 <wifi_cb+0x70>)
  40411c:	2202      	movs	r2, #2
  40411e:	2105      	movs	r1, #5
  404120:	480e      	ldr	r0, [pc, #56]	; (40415c <wifi_cb+0x74>)
  404122:	4c0f      	ldr	r4, [pc, #60]	; (404160 <wifi_cb+0x78>)
  404124:	47a0      	blx	r4
  404126:	e00b      	b.n	404140 <wifi_cb+0x58>
	break;

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
  404128:	2201      	movs	r2, #1
  40412a:	4b0a      	ldr	r3, [pc, #40]	; (404154 <wifi_cb+0x6c>)
  40412c:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  40412e:	788b      	ldrb	r3, [r1, #2]
  404130:	784a      	ldrb	r2, [r1, #1]
  404132:	7808      	ldrb	r0, [r1, #0]
  404134:	78c9      	ldrb	r1, [r1, #3]
  404136:	9100      	str	r1, [sp, #0]
  404138:	4601      	mov	r1, r0
  40413a:	480a      	ldr	r0, [pc, #40]	; (404164 <wifi_cb+0x7c>)
  40413c:	4c02      	ldr	r4, [pc, #8]	; (404148 <wifi_cb+0x60>)
  40413e:	47a0      	blx	r4
	break;

	default:
		break;
	}
}
  404140:	b002      	add	sp, #8
  404142:	bd10      	pop	{r4, pc}
  404144:	00408fc0 	.word	0x00408fc0
  404148:	0040458d 	.word	0x0040458d
  40414c:	00401835 	.word	0x00401835
  404150:	00408ff8 	.word	0x00408ff8
  404154:	20400f10 	.word	0x20400f10
  404158:	00409034 	.word	0x00409034
  40415c:	00409040 	.word	0x00409040
  404160:	00401819 	.word	0x00401819
  404164:	00409048 	.word	0x00409048

00404168 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404168:	b5f0      	push	{r4, r5, r6, r7, lr}
  40416a:	b083      	sub	sp, #12
  40416c:	4605      	mov	r5, r0
  40416e:	460c      	mov	r4, r1
	uint32_t val = 0;
  404170:	2300      	movs	r3, #0
  404172:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404174:	4b29      	ldr	r3, [pc, #164]	; (40421c <usart_serial_getchar+0xb4>)
  404176:	4298      	cmp	r0, r3
  404178:	d107      	bne.n	40418a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40417a:	461f      	mov	r7, r3
  40417c:	4e28      	ldr	r6, [pc, #160]	; (404220 <usart_serial_getchar+0xb8>)
  40417e:	4621      	mov	r1, r4
  404180:	4638      	mov	r0, r7
  404182:	47b0      	blx	r6
  404184:	2800      	cmp	r0, #0
  404186:	d1fa      	bne.n	40417e <usart_serial_getchar+0x16>
  404188:	e015      	b.n	4041b6 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40418a:	4b26      	ldr	r3, [pc, #152]	; (404224 <usart_serial_getchar+0xbc>)
  40418c:	4298      	cmp	r0, r3
  40418e:	d107      	bne.n	4041a0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  404190:	461f      	mov	r7, r3
  404192:	4e23      	ldr	r6, [pc, #140]	; (404220 <usart_serial_getchar+0xb8>)
  404194:	4621      	mov	r1, r4
  404196:	4638      	mov	r0, r7
  404198:	47b0      	blx	r6
  40419a:	2800      	cmp	r0, #0
  40419c:	d1fa      	bne.n	404194 <usart_serial_getchar+0x2c>
  40419e:	e015      	b.n	4041cc <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4041a0:	4b21      	ldr	r3, [pc, #132]	; (404228 <usart_serial_getchar+0xc0>)
  4041a2:	4298      	cmp	r0, r3
  4041a4:	d107      	bne.n	4041b6 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  4041a6:	461f      	mov	r7, r3
  4041a8:	4e1d      	ldr	r6, [pc, #116]	; (404220 <usart_serial_getchar+0xb8>)
  4041aa:	4621      	mov	r1, r4
  4041ac:	4638      	mov	r0, r7
  4041ae:	47b0      	blx	r6
  4041b0:	2800      	cmp	r0, #0
  4041b2:	d1fa      	bne.n	4041aa <usart_serial_getchar+0x42>
  4041b4:	e017      	b.n	4041e6 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4041b6:	4b1d      	ldr	r3, [pc, #116]	; (40422c <usart_serial_getchar+0xc4>)
  4041b8:	429d      	cmp	r5, r3
  4041ba:	d107      	bne.n	4041cc <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  4041bc:	461f      	mov	r7, r3
  4041be:	4e18      	ldr	r6, [pc, #96]	; (404220 <usart_serial_getchar+0xb8>)
  4041c0:	4621      	mov	r1, r4
  4041c2:	4638      	mov	r0, r7
  4041c4:	47b0      	blx	r6
  4041c6:	2800      	cmp	r0, #0
  4041c8:	d1fa      	bne.n	4041c0 <usart_serial_getchar+0x58>
  4041ca:	e019      	b.n	404200 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4041cc:	4b18      	ldr	r3, [pc, #96]	; (404230 <usart_serial_getchar+0xc8>)
  4041ce:	429d      	cmp	r5, r3
  4041d0:	d109      	bne.n	4041e6 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  4041d2:	461e      	mov	r6, r3
  4041d4:	4d17      	ldr	r5, [pc, #92]	; (404234 <usart_serial_getchar+0xcc>)
  4041d6:	a901      	add	r1, sp, #4
  4041d8:	4630      	mov	r0, r6
  4041da:	47a8      	blx	r5
  4041dc:	2800      	cmp	r0, #0
  4041de:	d1fa      	bne.n	4041d6 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  4041e0:	9b01      	ldr	r3, [sp, #4]
  4041e2:	7023      	strb	r3, [r4, #0]
  4041e4:	e018      	b.n	404218 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4041e6:	4b14      	ldr	r3, [pc, #80]	; (404238 <usart_serial_getchar+0xd0>)
  4041e8:	429d      	cmp	r5, r3
  4041ea:	d109      	bne.n	404200 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  4041ec:	461e      	mov	r6, r3
  4041ee:	4d11      	ldr	r5, [pc, #68]	; (404234 <usart_serial_getchar+0xcc>)
  4041f0:	a901      	add	r1, sp, #4
  4041f2:	4630      	mov	r0, r6
  4041f4:	47a8      	blx	r5
  4041f6:	2800      	cmp	r0, #0
  4041f8:	d1fa      	bne.n	4041f0 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  4041fa:	9b01      	ldr	r3, [sp, #4]
  4041fc:	7023      	strb	r3, [r4, #0]
  4041fe:	e00b      	b.n	404218 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404200:	4b0e      	ldr	r3, [pc, #56]	; (40423c <usart_serial_getchar+0xd4>)
  404202:	429d      	cmp	r5, r3
  404204:	d108      	bne.n	404218 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  404206:	461e      	mov	r6, r3
  404208:	4d0a      	ldr	r5, [pc, #40]	; (404234 <usart_serial_getchar+0xcc>)
  40420a:	a901      	add	r1, sp, #4
  40420c:	4630      	mov	r0, r6
  40420e:	47a8      	blx	r5
  404210:	2800      	cmp	r0, #0
  404212:	d1fa      	bne.n	40420a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  404214:	9b01      	ldr	r3, [sp, #4]
  404216:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404218:	b003      	add	sp, #12
  40421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40421c:	400e0800 	.word	0x400e0800
  404220:	00403ad5 	.word	0x00403ad5
  404224:	400e0a00 	.word	0x400e0a00
  404228:	400e1a00 	.word	0x400e1a00
  40422c:	400e1c00 	.word	0x400e1c00
  404230:	40024000 	.word	0x40024000
  404234:	00403bed 	.word	0x00403bed
  404238:	40028000 	.word	0x40028000
  40423c:	4002c000 	.word	0x4002c000

00404240 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  404240:	b570      	push	{r4, r5, r6, lr}
  404242:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404244:	4b2a      	ldr	r3, [pc, #168]	; (4042f0 <usart_serial_putchar+0xb0>)
  404246:	4298      	cmp	r0, r3
  404248:	d108      	bne.n	40425c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40424a:	461e      	mov	r6, r3
  40424c:	4d29      	ldr	r5, [pc, #164]	; (4042f4 <usart_serial_putchar+0xb4>)
  40424e:	4621      	mov	r1, r4
  404250:	4630      	mov	r0, r6
  404252:	47a8      	blx	r5
  404254:	2800      	cmp	r0, #0
  404256:	d1fa      	bne.n	40424e <usart_serial_putchar+0xe>
		return 1;
  404258:	2001      	movs	r0, #1
  40425a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40425c:	4b26      	ldr	r3, [pc, #152]	; (4042f8 <usart_serial_putchar+0xb8>)
  40425e:	4298      	cmp	r0, r3
  404260:	d108      	bne.n	404274 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  404262:	461e      	mov	r6, r3
  404264:	4d23      	ldr	r5, [pc, #140]	; (4042f4 <usart_serial_putchar+0xb4>)
  404266:	4621      	mov	r1, r4
  404268:	4630      	mov	r0, r6
  40426a:	47a8      	blx	r5
  40426c:	2800      	cmp	r0, #0
  40426e:	d1fa      	bne.n	404266 <usart_serial_putchar+0x26>
		return 1;
  404270:	2001      	movs	r0, #1
  404272:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404274:	4b21      	ldr	r3, [pc, #132]	; (4042fc <usart_serial_putchar+0xbc>)
  404276:	4298      	cmp	r0, r3
  404278:	d108      	bne.n	40428c <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40427a:	461e      	mov	r6, r3
  40427c:	4d1d      	ldr	r5, [pc, #116]	; (4042f4 <usart_serial_putchar+0xb4>)
  40427e:	4621      	mov	r1, r4
  404280:	4630      	mov	r0, r6
  404282:	47a8      	blx	r5
  404284:	2800      	cmp	r0, #0
  404286:	d1fa      	bne.n	40427e <usart_serial_putchar+0x3e>
		return 1;
  404288:	2001      	movs	r0, #1
  40428a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40428c:	4b1c      	ldr	r3, [pc, #112]	; (404300 <usart_serial_putchar+0xc0>)
  40428e:	4298      	cmp	r0, r3
  404290:	d108      	bne.n	4042a4 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  404292:	461e      	mov	r6, r3
  404294:	4d17      	ldr	r5, [pc, #92]	; (4042f4 <usart_serial_putchar+0xb4>)
  404296:	4621      	mov	r1, r4
  404298:	4630      	mov	r0, r6
  40429a:	47a8      	blx	r5
  40429c:	2800      	cmp	r0, #0
  40429e:	d1fa      	bne.n	404296 <usart_serial_putchar+0x56>
		return 1;
  4042a0:	2001      	movs	r0, #1
  4042a2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4042a4:	4b17      	ldr	r3, [pc, #92]	; (404304 <usart_serial_putchar+0xc4>)
  4042a6:	4298      	cmp	r0, r3
  4042a8:	d108      	bne.n	4042bc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  4042aa:	461e      	mov	r6, r3
  4042ac:	4d16      	ldr	r5, [pc, #88]	; (404308 <usart_serial_putchar+0xc8>)
  4042ae:	4621      	mov	r1, r4
  4042b0:	4630      	mov	r0, r6
  4042b2:	47a8      	blx	r5
  4042b4:	2800      	cmp	r0, #0
  4042b6:	d1fa      	bne.n	4042ae <usart_serial_putchar+0x6e>
		return 1;
  4042b8:	2001      	movs	r0, #1
  4042ba:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4042bc:	4b13      	ldr	r3, [pc, #76]	; (40430c <usart_serial_putchar+0xcc>)
  4042be:	4298      	cmp	r0, r3
  4042c0:	d108      	bne.n	4042d4 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  4042c2:	461e      	mov	r6, r3
  4042c4:	4d10      	ldr	r5, [pc, #64]	; (404308 <usart_serial_putchar+0xc8>)
  4042c6:	4621      	mov	r1, r4
  4042c8:	4630      	mov	r0, r6
  4042ca:	47a8      	blx	r5
  4042cc:	2800      	cmp	r0, #0
  4042ce:	d1fa      	bne.n	4042c6 <usart_serial_putchar+0x86>
		return 1;
  4042d0:	2001      	movs	r0, #1
  4042d2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4042d4:	4b0e      	ldr	r3, [pc, #56]	; (404310 <usart_serial_putchar+0xd0>)
  4042d6:	4298      	cmp	r0, r3
  4042d8:	d108      	bne.n	4042ec <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  4042da:	461e      	mov	r6, r3
  4042dc:	4d0a      	ldr	r5, [pc, #40]	; (404308 <usart_serial_putchar+0xc8>)
  4042de:	4621      	mov	r1, r4
  4042e0:	4630      	mov	r0, r6
  4042e2:	47a8      	blx	r5
  4042e4:	2800      	cmp	r0, #0
  4042e6:	d1fa      	bne.n	4042de <usart_serial_putchar+0x9e>
		return 1;
  4042e8:	2001      	movs	r0, #1
  4042ea:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4042ec:	2000      	movs	r0, #0
}
  4042ee:	bd70      	pop	{r4, r5, r6, pc}
  4042f0:	400e0800 	.word	0x400e0800
  4042f4:	00403ac1 	.word	0x00403ac1
  4042f8:	400e0a00 	.word	0x400e0a00
  4042fc:	400e1a00 	.word	0x400e1a00
  404300:	400e1c00 	.word	0x400e1c00
  404304:	40024000 	.word	0x40024000
  404308:	00403bd5 	.word	0x00403bd5
  40430c:	40028000 	.word	0x40028000
  404310:	4002c000 	.word	0x4002c000

00404314 <RTC_Handler>:

uint32_t g_nMensagensRx = 0 ;


void RTC_Handler(void)
{
  404314:	b510      	push	{r4, lr}
	uint32_t status = rtc_get_status(RTC);
  404316:	480b      	ldr	r0, [pc, #44]	; (404344 <RTC_Handler+0x30>)
  404318:	4b0b      	ldr	r3, [pc, #44]	; (404348 <RTC_Handler+0x34>)
  40431a:	4798      	blx	r3
  40431c:	4604      	mov	r4, r0

	// Second increment interrupt (why
	// is this even a thing...)
	if ((status & RTC_SR_SEC) == RTC_SR_SEC) {
  40431e:	f010 0f04 	tst.w	r0, #4
  404322:	d003      	beq.n	40432c <RTC_Handler+0x18>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  404324:	2104      	movs	r1, #4
  404326:	4807      	ldr	r0, [pc, #28]	; (404344 <RTC_Handler+0x30>)
  404328:	4b08      	ldr	r3, [pc, #32]	; (40434c <RTC_Handler+0x38>)
  40432a:	4798      	blx	r3
		// time or date alarm (AKA what we want)
	}
	if ((status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  40432c:	f014 0f02 	tst.w	r4, #2
  404330:	d006      	beq.n	404340 <RTC_Handler+0x2c>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  404332:	2102      	movs	r1, #2
  404334:	4803      	ldr	r0, [pc, #12]	; (404344 <RTC_Handler+0x30>)
  404336:	4b05      	ldr	r3, [pc, #20]	; (40434c <RTC_Handler+0x38>)
  404338:	4798      	blx	r3
		puts("ALERTA CAFE!");
  40433a:	4805      	ldr	r0, [pc, #20]	; (404350 <RTC_Handler+0x3c>)
  40433c:	4b05      	ldr	r3, [pc, #20]	; (404354 <RTC_Handler+0x40>)
  40433e:	4798      	blx	r3
  404340:	bd10      	pop	{r4, pc}
  404342:	bf00      	nop
  404344:	400e1860 	.word	0x400e1860
  404348:	00400459 	.word	0x00400459
  40434c:	0040045d 	.word	0x0040045d
  404350:	00409080 	.word	0x00409080
  404354:	00404c51 	.word	0x00404c51

00404358 <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  404358:	b5f0      	push	{r4, r5, r6, r7, lr}
  40435a:	b093      	sub	sp, #76	; 0x4c
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr;

	/* Initialize the board. */
	sysclk_init();
  40435c:	4b4e      	ldr	r3, [pc, #312]	; (404498 <main+0x140>)
  40435e:	4798      	blx	r3
	board_init();
  404360:	4b4e      	ldr	r3, [pc, #312]	; (40449c <main+0x144>)
  404362:	4798      	blx	r3

	PMC->PMC_PCER0 = (1<<LED_PIO_ID);
  404364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404368:	4b4d      	ldr	r3, [pc, #308]	; (4044a0 <main+0x148>)
  40436a:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OER = (1 << 8);
  40436c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  404370:	f44f 7280 	mov.w	r2, #256	; 0x100
  404374:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PER = (1 << 8);
  404376:	601a      	str	r2, [r3, #0]
  404378:	200e      	movs	r0, #14
  40437a:	4e4a      	ldr	r6, [pc, #296]	; (4044a4 <main+0x14c>)
  40437c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40437e:	4d4a      	ldr	r5, [pc, #296]	; (4044a8 <main+0x150>)
  404380:	4b4a      	ldr	r3, [pc, #296]	; (4044ac <main+0x154>)
  404382:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404384:	4a4a      	ldr	r2, [pc, #296]	; (4044b0 <main+0x158>)
  404386:	4b4b      	ldr	r3, [pc, #300]	; (4044b4 <main+0x15c>)
  404388:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40438a:	4a4b      	ldr	r2, [pc, #300]	; (4044b8 <main+0x160>)
  40438c:	4b4b      	ldr	r3, [pc, #300]	; (4044bc <main+0x164>)
  40438e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404390:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404394:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  404396:	23c0      	movs	r3, #192	; 0xc0
  404398:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  40439a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40439e:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  4043a0:	2400      	movs	r4, #0
  4043a2:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4043a4:	9406      	str	r4, [sp, #24]
  4043a6:	200e      	movs	r0, #14
  4043a8:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4043aa:	4a45      	ldr	r2, [pc, #276]	; (4044c0 <main+0x168>)
  4043ac:	a902      	add	r1, sp, #8
  4043ae:	4628      	mov	r0, r5
  4043b0:	4b44      	ldr	r3, [pc, #272]	; (4044c4 <main+0x16c>)
  4043b2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4043b4:	4628      	mov	r0, r5
  4043b6:	4b44      	ldr	r3, [pc, #272]	; (4044c8 <main+0x170>)
  4043b8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4043ba:	4628      	mov	r0, r5
  4043bc:	4b43      	ldr	r3, [pc, #268]	; (4044cc <main+0x174>)
  4043be:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4043c0:	4e43      	ldr	r6, [pc, #268]	; (4044d0 <main+0x178>)
  4043c2:	6833      	ldr	r3, [r6, #0]
  4043c4:	4621      	mov	r1, r4
  4043c6:	6898      	ldr	r0, [r3, #8]
  4043c8:	4d42      	ldr	r5, [pc, #264]	; (4044d4 <main+0x17c>)
  4043ca:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4043cc:	6833      	ldr	r3, [r6, #0]
  4043ce:	4621      	mov	r1, r4
  4043d0:	6858      	ldr	r0, [r3, #4]
  4043d2:	47a8      	blx	r5



	/* Initialize the UART console. */
	configure_console();
	puts("BOARD INITIALIZED");
  4043d4:	4840      	ldr	r0, [pc, #256]	; (4044d8 <main+0x180>)
  4043d6:	4d41      	ldr	r5, [pc, #260]	; (4044dc <main+0x184>)
  4043d8:	47a8      	blx	r5
	printf(STRING_HEADER);
  4043da:	4841      	ldr	r0, [pc, #260]	; (4044e0 <main+0x188>)
  4043dc:	4b41      	ldr	r3, [pc, #260]	; (4044e4 <main+0x18c>)
  4043de:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  4043e0:	4b41      	ldr	r3, [pc, #260]	; (4044e8 <main+0x190>)
  4043e2:	4798      	blx	r3

	// Initialize RTC
	rtc_init();
  4043e4:	4b41      	ldr	r3, [pc, #260]	; (4044ec <main+0x194>)
  4043e6:	4798      	blx	r3
	puts("RTC INITIATED");
  4043e8:	4841      	ldr	r0, [pc, #260]	; (4044f0 <main+0x198>)
  4043ea:	47a8      	blx	r5

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  4043ec:	2302      	movs	r3, #2
  4043ee:	f8ad 3020 	strh.w	r3, [sp, #32]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
  4043f2:	f640 231a 	movw	r3, #2586	; 0xa1a
  4043f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	addr.sin_addr.s_addr = 0;
  4043fa:	9409      	str	r4, [sp, #36]	; 0x24

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4043fc:	940d      	str	r4, [sp, #52]	; 0x34
  4043fe:	940e      	str	r4, [sp, #56]	; 0x38
  404400:	940f      	str	r4, [sp, #60]	; 0x3c
  404402:	9410      	str	r4, [sp, #64]	; 0x40
  404404:	9411      	str	r4, [sp, #68]	; 0x44

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  404406:	4b3b      	ldr	r3, [pc, #236]	; (4044f4 <main+0x19c>)
  404408:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  40440a:	a80c      	add	r0, sp, #48	; 0x30
  40440c:	4b3a      	ldr	r3, [pc, #232]	; (4044f8 <main+0x1a0>)
  40440e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404410:	b120      	cbz	r0, 40441c <main+0xc4>
  404412:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  404414:	4839      	ldr	r0, [pc, #228]	; (4044fc <main+0x1a4>)
  404416:	4b33      	ldr	r3, [pc, #204]	; (4044e4 <main+0x18c>)
  404418:	4798      	blx	r3
  40441a:	e7fe      	b.n	40441a <main+0xc2>
		while (1) {
		}
	}
	puts("WIFI INITIATED");
  40441c:	4838      	ldr	r0, [pc, #224]	; (404500 <main+0x1a8>)
  40441e:	4c2f      	ldr	r4, [pc, #188]	; (4044dc <main+0x184>)
  404420:	47a0      	blx	r4

	/* Initialize socket module */
	socketInit();
  404422:	4b38      	ldr	r3, [pc, #224]	; (404504 <main+0x1ac>)
  404424:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  404426:	2100      	movs	r1, #0
  404428:	4837      	ldr	r0, [pc, #220]	; (404508 <main+0x1b0>)
  40442a:	4b38      	ldr	r3, [pc, #224]	; (40450c <main+0x1b4>)
  40442c:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  40442e:	23ff      	movs	r3, #255	; 0xff
  404430:	9300      	str	r3, [sp, #0]
  404432:	4b37      	ldr	r3, [pc, #220]	; (404510 <main+0x1b8>)
  404434:	2202      	movs	r2, #2
  404436:	2105      	movs	r1, #5
  404438:	4836      	ldr	r0, [pc, #216]	; (404514 <main+0x1bc>)
  40443a:	4d37      	ldr	r5, [pc, #220]	; (404518 <main+0x1c0>)
  40443c:	47a8      	blx	r5

	char was_conn = 0;
	puts("trying to connect...");
  40443e:	4837      	ldr	r0, [pc, #220]	; (40451c <main+0x1c4>)
  404440:	47a0      	blx	r4
	registerSocketCallback(socket_cb, NULL);

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	char was_conn = 0;
  404442:	2400      	movs	r4, #0
	puts("trying to connect...");
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  404444:	4f36      	ldr	r7, [pc, #216]	; (404520 <main+0x1c8>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  404446:	4e37      	ldr	r6, [pc, #220]	; (404524 <main+0x1cc>)
			was_conn = 1;
			if (tcp_server_socket < 0) {
  404448:	4d37      	ldr	r5, [pc, #220]	; (404528 <main+0x1d0>)
  40444a:	e000      	b.n	40444e <main+0xf6>
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);

		if (wifi_connected == M2M_WIFI_CONNECTED) {
			was_conn = 1;
  40444c:	2401      	movs	r4, #1

	char was_conn = 0;
	puts("trying to connect...");
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  40444e:	2000      	movs	r0, #0
  404450:	47b8      	blx	r7

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  404452:	7833      	ldrb	r3, [r6, #0]
  404454:	2b01      	cmp	r3, #1
  404456:	d116      	bne.n	404486 <main+0x12e>
			was_conn = 1;
			if (tcp_server_socket < 0) {
  404458:	f995 3000 	ldrsb.w	r3, [r5]
  40445c:	2b00      	cmp	r3, #0
  40445e:	daf5      	bge.n	40444c <main+0xf4>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  404460:	2200      	movs	r2, #0
  404462:	2101      	movs	r1, #1
  404464:	2002      	movs	r0, #2
  404466:	4b31      	ldr	r3, [pc, #196]	; (40452c <main+0x1d4>)
  404468:	4798      	blx	r3
  40446a:	7028      	strb	r0, [r5, #0]
  40446c:	2800      	cmp	r0, #0
  40446e:	da04      	bge.n	40447a <main+0x122>
					printf("main: failed to create TCP server socket error!\r\n");
  404470:	482f      	ldr	r0, [pc, #188]	; (404530 <main+0x1d8>)
  404472:	4b1c      	ldr	r3, [pc, #112]	; (4044e4 <main+0x18c>)
  404474:	4798      	blx	r3
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);

		if (wifi_connected == M2M_WIFI_CONNECTED) {
			was_conn = 1;
  404476:	2401      	movs	r4, #1
			if (tcp_server_socket < 0) {
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
					printf("main: failed to create TCP server socket error!\r\n");
					continue;
  404478:	e7e9      	b.n	40444e <main+0xf6>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
  40447a:	2210      	movs	r2, #16
  40447c:	a908      	add	r1, sp, #32
  40447e:	4b2d      	ldr	r3, [pc, #180]	; (404534 <main+0x1dc>)
  404480:	4798      	blx	r3
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);

		if (wifi_connected == M2M_WIFI_CONNECTED) {
			was_conn = 1;
  404482:	2401      	movs	r4, #1
  404484:	e7e3      	b.n	40444e <main+0xf6>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
			}
		} else if (was_conn) {
  404486:	2c00      	cmp	r4, #0
  404488:	d0e1      	beq.n	40444e <main+0xf6>
			printf("Connection lost.\n");
  40448a:	482b      	ldr	r0, [pc, #172]	; (404538 <main+0x1e0>)
  40448c:	4b15      	ldr	r3, [pc, #84]	; (4044e4 <main+0x18c>)
  40448e:	4798      	blx	r3
			break;
		}
	}

	return 0;
}
  404490:	2000      	movs	r0, #0
  404492:	b013      	add	sp, #76	; 0x4c
  404494:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404496:	bf00      	nop
  404498:	00403141 	.word	0x00403141
  40449c:	0040323d 	.word	0x0040323d
  4044a0:	400e0600 	.word	0x400e0600
  4044a4:	00403905 	.word	0x00403905
  4044a8:	40028000 	.word	0x40028000
  4044ac:	20401010 	.word	0x20401010
  4044b0:	00404241 	.word	0x00404241
  4044b4:	2040100c 	.word	0x2040100c
  4044b8:	00404169 	.word	0x00404169
  4044bc:	20401008 	.word	0x20401008
  4044c0:	08f0d180 	.word	0x08f0d180
  4044c4:	00403b71 	.word	0x00403b71
  4044c8:	00403bc5 	.word	0x00403bc5
  4044cc:	00403bcd 	.word	0x00403bcd
  4044d0:	20400448 	.word	0x20400448
  4044d4:	00404c85 	.word	0x00404c85
  4044d8:	00409090 	.word	0x00409090
  4044dc:	00404c51 	.word	0x00404c51
  4044e0:	004090a4 	.word	0x004090a4
  4044e4:	0040458d 	.word	0x0040458d
  4044e8:	004006a5 	.word	0x004006a5
  4044ec:	0040053d 	.word	0x0040053d
  4044f0:	00409104 	.word	0x00409104
  4044f4:	004040e9 	.word	0x004040e9
  4044f8:	004014cd 	.word	0x004014cd
  4044fc:	00409114 	.word	0x00409114
  404500:	0040913c 	.word	0x0040913c
  404504:	00402c69 	.word	0x00402c69
  404508:	00403eb9 	.word	0x00403eb9
  40450c:	00402cad 	.word	0x00402cad
  404510:	00409034 	.word	0x00409034
  404514:	00409040 	.word	0x00409040
  404518:	00401819 	.word	0x00401819
  40451c:	0040914c 	.word	0x0040914c
  404520:	004015c9 	.word	0x004015c9
  404524:	20400f10 	.word	0x20400f10
  404528:	2040001d 	.word	0x2040001d
  40452c:	00402cc1 	.word	0x00402cc1
  404530:	00409164 	.word	0x00409164
  404534:	00402da1 	.word	0x00402da1
  404538:	00409198 	.word	0x00409198

0040453c <__libc_init_array>:
  40453c:	b570      	push	{r4, r5, r6, lr}
  40453e:	4e0f      	ldr	r6, [pc, #60]	; (40457c <__libc_init_array+0x40>)
  404540:	4d0f      	ldr	r5, [pc, #60]	; (404580 <__libc_init_array+0x44>)
  404542:	1b76      	subs	r6, r6, r5
  404544:	10b6      	asrs	r6, r6, #2
  404546:	bf18      	it	ne
  404548:	2400      	movne	r4, #0
  40454a:	d005      	beq.n	404558 <__libc_init_array+0x1c>
  40454c:	3401      	adds	r4, #1
  40454e:	f855 3b04 	ldr.w	r3, [r5], #4
  404552:	4798      	blx	r3
  404554:	42a6      	cmp	r6, r4
  404556:	d1f9      	bne.n	40454c <__libc_init_array+0x10>
  404558:	4e0a      	ldr	r6, [pc, #40]	; (404584 <__libc_init_array+0x48>)
  40455a:	4d0b      	ldr	r5, [pc, #44]	; (404588 <__libc_init_array+0x4c>)
  40455c:	1b76      	subs	r6, r6, r5
  40455e:	f004 fe51 	bl	409204 <_init>
  404562:	10b6      	asrs	r6, r6, #2
  404564:	bf18      	it	ne
  404566:	2400      	movne	r4, #0
  404568:	d006      	beq.n	404578 <__libc_init_array+0x3c>
  40456a:	3401      	adds	r4, #1
  40456c:	f855 3b04 	ldr.w	r3, [r5], #4
  404570:	4798      	blx	r3
  404572:	42a6      	cmp	r6, r4
  404574:	d1f9      	bne.n	40456a <__libc_init_array+0x2e>
  404576:	bd70      	pop	{r4, r5, r6, pc}
  404578:	bd70      	pop	{r4, r5, r6, pc}
  40457a:	bf00      	nop
  40457c:	00409210 	.word	0x00409210
  404580:	00409210 	.word	0x00409210
  404584:	00409218 	.word	0x00409218
  404588:	00409210 	.word	0x00409210

0040458c <iprintf>:
  40458c:	b40f      	push	{r0, r1, r2, r3}
  40458e:	b500      	push	{lr}
  404590:	4907      	ldr	r1, [pc, #28]	; (4045b0 <iprintf+0x24>)
  404592:	b083      	sub	sp, #12
  404594:	ab04      	add	r3, sp, #16
  404596:	6808      	ldr	r0, [r1, #0]
  404598:	f853 2b04 	ldr.w	r2, [r3], #4
  40459c:	6881      	ldr	r1, [r0, #8]
  40459e:	9301      	str	r3, [sp, #4]
  4045a0:	f001 f8c4 	bl	40572c <_vfiprintf_r>
  4045a4:	b003      	add	sp, #12
  4045a6:	f85d eb04 	ldr.w	lr, [sp], #4
  4045aa:	b004      	add	sp, #16
  4045ac:	4770      	bx	lr
  4045ae:	bf00      	nop
  4045b0:	20400448 	.word	0x20400448

004045b4 <malloc>:
  4045b4:	4b02      	ldr	r3, [pc, #8]	; (4045c0 <malloc+0xc>)
  4045b6:	4601      	mov	r1, r0
  4045b8:	6818      	ldr	r0, [r3, #0]
  4045ba:	f000 b80b 	b.w	4045d4 <_malloc_r>
  4045be:	bf00      	nop
  4045c0:	20400448 	.word	0x20400448

004045c4 <free>:
  4045c4:	4b02      	ldr	r3, [pc, #8]	; (4045d0 <free+0xc>)
  4045c6:	4601      	mov	r1, r0
  4045c8:	6818      	ldr	r0, [r3, #0]
  4045ca:	f002 ba59 	b.w	406a80 <_free_r>
  4045ce:	bf00      	nop
  4045d0:	20400448 	.word	0x20400448

004045d4 <_malloc_r>:
  4045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045d8:	f101 050b 	add.w	r5, r1, #11
  4045dc:	2d16      	cmp	r5, #22
  4045de:	b083      	sub	sp, #12
  4045e0:	4606      	mov	r6, r0
  4045e2:	f240 809f 	bls.w	404724 <_malloc_r+0x150>
  4045e6:	f035 0507 	bics.w	r5, r5, #7
  4045ea:	f100 80bf 	bmi.w	40476c <_malloc_r+0x198>
  4045ee:	42a9      	cmp	r1, r5
  4045f0:	f200 80bc 	bhi.w	40476c <_malloc_r+0x198>
  4045f4:	f000 faf4 	bl	404be0 <__malloc_lock>
  4045f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4045fc:	f0c0 829c 	bcc.w	404b38 <_malloc_r+0x564>
  404600:	0a6b      	lsrs	r3, r5, #9
  404602:	f000 80ba 	beq.w	40477a <_malloc_r+0x1a6>
  404606:	2b04      	cmp	r3, #4
  404608:	f200 8183 	bhi.w	404912 <_malloc_r+0x33e>
  40460c:	09a8      	lsrs	r0, r5, #6
  40460e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  404612:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404616:	3038      	adds	r0, #56	; 0x38
  404618:	4fc4      	ldr	r7, [pc, #784]	; (40492c <_malloc_r+0x358>)
  40461a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40461e:	f1a3 0108 	sub.w	r1, r3, #8
  404622:	685c      	ldr	r4, [r3, #4]
  404624:	42a1      	cmp	r1, r4
  404626:	d107      	bne.n	404638 <_malloc_r+0x64>
  404628:	e0ac      	b.n	404784 <_malloc_r+0x1b0>
  40462a:	2a00      	cmp	r2, #0
  40462c:	f280 80ac 	bge.w	404788 <_malloc_r+0x1b4>
  404630:	68e4      	ldr	r4, [r4, #12]
  404632:	42a1      	cmp	r1, r4
  404634:	f000 80a6 	beq.w	404784 <_malloc_r+0x1b0>
  404638:	6863      	ldr	r3, [r4, #4]
  40463a:	f023 0303 	bic.w	r3, r3, #3
  40463e:	1b5a      	subs	r2, r3, r5
  404640:	2a0f      	cmp	r2, #15
  404642:	ddf2      	ble.n	40462a <_malloc_r+0x56>
  404644:	49b9      	ldr	r1, [pc, #740]	; (40492c <_malloc_r+0x358>)
  404646:	693c      	ldr	r4, [r7, #16]
  404648:	f101 0e08 	add.w	lr, r1, #8
  40464c:	4574      	cmp	r4, lr
  40464e:	f000 81b3 	beq.w	4049b8 <_malloc_r+0x3e4>
  404652:	6863      	ldr	r3, [r4, #4]
  404654:	f023 0303 	bic.w	r3, r3, #3
  404658:	1b5a      	subs	r2, r3, r5
  40465a:	2a0f      	cmp	r2, #15
  40465c:	f300 8199 	bgt.w	404992 <_malloc_r+0x3be>
  404660:	2a00      	cmp	r2, #0
  404662:	f8c1 e014 	str.w	lr, [r1, #20]
  404666:	f8c1 e010 	str.w	lr, [r1, #16]
  40466a:	f280 809e 	bge.w	4047aa <_malloc_r+0x1d6>
  40466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404672:	f080 8167 	bcs.w	404944 <_malloc_r+0x370>
  404676:	08db      	lsrs	r3, r3, #3
  404678:	f103 0c01 	add.w	ip, r3, #1
  40467c:	2201      	movs	r2, #1
  40467e:	109b      	asrs	r3, r3, #2
  404680:	fa02 f303 	lsl.w	r3, r2, r3
  404684:	684a      	ldr	r2, [r1, #4]
  404686:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40468a:	f8c4 8008 	str.w	r8, [r4, #8]
  40468e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  404692:	431a      	orrs	r2, r3
  404694:	f1a9 0308 	sub.w	r3, r9, #8
  404698:	60e3      	str	r3, [r4, #12]
  40469a:	604a      	str	r2, [r1, #4]
  40469c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4046a0:	f8c8 400c 	str.w	r4, [r8, #12]
  4046a4:	1083      	asrs	r3, r0, #2
  4046a6:	2401      	movs	r4, #1
  4046a8:	409c      	lsls	r4, r3
  4046aa:	4294      	cmp	r4, r2
  4046ac:	f200 808a 	bhi.w	4047c4 <_malloc_r+0x1f0>
  4046b0:	4214      	tst	r4, r2
  4046b2:	d106      	bne.n	4046c2 <_malloc_r+0xee>
  4046b4:	f020 0003 	bic.w	r0, r0, #3
  4046b8:	0064      	lsls	r4, r4, #1
  4046ba:	4214      	tst	r4, r2
  4046bc:	f100 0004 	add.w	r0, r0, #4
  4046c0:	d0fa      	beq.n	4046b8 <_malloc_r+0xe4>
  4046c2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4046c6:	46cc      	mov	ip, r9
  4046c8:	4680      	mov	r8, r0
  4046ca:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4046ce:	458c      	cmp	ip, r1
  4046d0:	d107      	bne.n	4046e2 <_malloc_r+0x10e>
  4046d2:	e173      	b.n	4049bc <_malloc_r+0x3e8>
  4046d4:	2a00      	cmp	r2, #0
  4046d6:	f280 8181 	bge.w	4049dc <_malloc_r+0x408>
  4046da:	68c9      	ldr	r1, [r1, #12]
  4046dc:	458c      	cmp	ip, r1
  4046de:	f000 816d 	beq.w	4049bc <_malloc_r+0x3e8>
  4046e2:	684b      	ldr	r3, [r1, #4]
  4046e4:	f023 0303 	bic.w	r3, r3, #3
  4046e8:	1b5a      	subs	r2, r3, r5
  4046ea:	2a0f      	cmp	r2, #15
  4046ec:	ddf2      	ble.n	4046d4 <_malloc_r+0x100>
  4046ee:	460c      	mov	r4, r1
  4046f0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4046f4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4046f8:	194b      	adds	r3, r1, r5
  4046fa:	f045 0501 	orr.w	r5, r5, #1
  4046fe:	604d      	str	r5, [r1, #4]
  404700:	f042 0101 	orr.w	r1, r2, #1
  404704:	f8c8 c00c 	str.w	ip, [r8, #12]
  404708:	4630      	mov	r0, r6
  40470a:	f8cc 8008 	str.w	r8, [ip, #8]
  40470e:	617b      	str	r3, [r7, #20]
  404710:	613b      	str	r3, [r7, #16]
  404712:	f8c3 e00c 	str.w	lr, [r3, #12]
  404716:	f8c3 e008 	str.w	lr, [r3, #8]
  40471a:	6059      	str	r1, [r3, #4]
  40471c:	509a      	str	r2, [r3, r2]
  40471e:	f000 fa61 	bl	404be4 <__malloc_unlock>
  404722:	e01f      	b.n	404764 <_malloc_r+0x190>
  404724:	2910      	cmp	r1, #16
  404726:	d821      	bhi.n	40476c <_malloc_r+0x198>
  404728:	f000 fa5a 	bl	404be0 <__malloc_lock>
  40472c:	2510      	movs	r5, #16
  40472e:	2306      	movs	r3, #6
  404730:	2002      	movs	r0, #2
  404732:	4f7e      	ldr	r7, [pc, #504]	; (40492c <_malloc_r+0x358>)
  404734:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404738:	f1a3 0208 	sub.w	r2, r3, #8
  40473c:	685c      	ldr	r4, [r3, #4]
  40473e:	4294      	cmp	r4, r2
  404740:	f000 8145 	beq.w	4049ce <_malloc_r+0x3fa>
  404744:	6863      	ldr	r3, [r4, #4]
  404746:	68e1      	ldr	r1, [r4, #12]
  404748:	68a5      	ldr	r5, [r4, #8]
  40474a:	f023 0303 	bic.w	r3, r3, #3
  40474e:	4423      	add	r3, r4
  404750:	4630      	mov	r0, r6
  404752:	685a      	ldr	r2, [r3, #4]
  404754:	60e9      	str	r1, [r5, #12]
  404756:	f042 0201 	orr.w	r2, r2, #1
  40475a:	608d      	str	r5, [r1, #8]
  40475c:	605a      	str	r2, [r3, #4]
  40475e:	f000 fa41 	bl	404be4 <__malloc_unlock>
  404762:	3408      	adds	r4, #8
  404764:	4620      	mov	r0, r4
  404766:	b003      	add	sp, #12
  404768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40476c:	2400      	movs	r4, #0
  40476e:	230c      	movs	r3, #12
  404770:	4620      	mov	r0, r4
  404772:	6033      	str	r3, [r6, #0]
  404774:	b003      	add	sp, #12
  404776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40477a:	2380      	movs	r3, #128	; 0x80
  40477c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  404780:	203f      	movs	r0, #63	; 0x3f
  404782:	e749      	b.n	404618 <_malloc_r+0x44>
  404784:	4670      	mov	r0, lr
  404786:	e75d      	b.n	404644 <_malloc_r+0x70>
  404788:	4423      	add	r3, r4
  40478a:	68e1      	ldr	r1, [r4, #12]
  40478c:	685a      	ldr	r2, [r3, #4]
  40478e:	68a5      	ldr	r5, [r4, #8]
  404790:	f042 0201 	orr.w	r2, r2, #1
  404794:	60e9      	str	r1, [r5, #12]
  404796:	4630      	mov	r0, r6
  404798:	608d      	str	r5, [r1, #8]
  40479a:	605a      	str	r2, [r3, #4]
  40479c:	f000 fa22 	bl	404be4 <__malloc_unlock>
  4047a0:	3408      	adds	r4, #8
  4047a2:	4620      	mov	r0, r4
  4047a4:	b003      	add	sp, #12
  4047a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047aa:	4423      	add	r3, r4
  4047ac:	4630      	mov	r0, r6
  4047ae:	685a      	ldr	r2, [r3, #4]
  4047b0:	f042 0201 	orr.w	r2, r2, #1
  4047b4:	605a      	str	r2, [r3, #4]
  4047b6:	f000 fa15 	bl	404be4 <__malloc_unlock>
  4047ba:	3408      	adds	r4, #8
  4047bc:	4620      	mov	r0, r4
  4047be:	b003      	add	sp, #12
  4047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047c4:	68bc      	ldr	r4, [r7, #8]
  4047c6:	6863      	ldr	r3, [r4, #4]
  4047c8:	f023 0803 	bic.w	r8, r3, #3
  4047cc:	45a8      	cmp	r8, r5
  4047ce:	d304      	bcc.n	4047da <_malloc_r+0x206>
  4047d0:	ebc5 0308 	rsb	r3, r5, r8
  4047d4:	2b0f      	cmp	r3, #15
  4047d6:	f300 808c 	bgt.w	4048f2 <_malloc_r+0x31e>
  4047da:	4b55      	ldr	r3, [pc, #340]	; (404930 <_malloc_r+0x35c>)
  4047dc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404940 <_malloc_r+0x36c>
  4047e0:	681a      	ldr	r2, [r3, #0]
  4047e2:	f8d9 3000 	ldr.w	r3, [r9]
  4047e6:	3301      	adds	r3, #1
  4047e8:	442a      	add	r2, r5
  4047ea:	eb04 0a08 	add.w	sl, r4, r8
  4047ee:	f000 8160 	beq.w	404ab2 <_malloc_r+0x4de>
  4047f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4047f6:	320f      	adds	r2, #15
  4047f8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4047fc:	f022 020f 	bic.w	r2, r2, #15
  404800:	4611      	mov	r1, r2
  404802:	4630      	mov	r0, r6
  404804:	9201      	str	r2, [sp, #4]
  404806:	f000 fa2b 	bl	404c60 <_sbrk_r>
  40480a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40480e:	4683      	mov	fp, r0
  404810:	9a01      	ldr	r2, [sp, #4]
  404812:	f000 8158 	beq.w	404ac6 <_malloc_r+0x4f2>
  404816:	4582      	cmp	sl, r0
  404818:	f200 80fc 	bhi.w	404a14 <_malloc_r+0x440>
  40481c:	4b45      	ldr	r3, [pc, #276]	; (404934 <_malloc_r+0x360>)
  40481e:	6819      	ldr	r1, [r3, #0]
  404820:	45da      	cmp	sl, fp
  404822:	4411      	add	r1, r2
  404824:	6019      	str	r1, [r3, #0]
  404826:	f000 8153 	beq.w	404ad0 <_malloc_r+0x4fc>
  40482a:	f8d9 0000 	ldr.w	r0, [r9]
  40482e:	f8df e110 	ldr.w	lr, [pc, #272]	; 404940 <_malloc_r+0x36c>
  404832:	3001      	adds	r0, #1
  404834:	bf1b      	ittet	ne
  404836:	ebca 0a0b 	rsbne	sl, sl, fp
  40483a:	4451      	addne	r1, sl
  40483c:	f8ce b000 	streq.w	fp, [lr]
  404840:	6019      	strne	r1, [r3, #0]
  404842:	f01b 0107 	ands.w	r1, fp, #7
  404846:	f000 8117 	beq.w	404a78 <_malloc_r+0x4a4>
  40484a:	f1c1 0008 	rsb	r0, r1, #8
  40484e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404852:	4483      	add	fp, r0
  404854:	3108      	adds	r1, #8
  404856:	445a      	add	r2, fp
  404858:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40485c:	ebc2 0901 	rsb	r9, r2, r1
  404860:	4649      	mov	r1, r9
  404862:	4630      	mov	r0, r6
  404864:	9301      	str	r3, [sp, #4]
  404866:	f000 f9fb 	bl	404c60 <_sbrk_r>
  40486a:	1c43      	adds	r3, r0, #1
  40486c:	9b01      	ldr	r3, [sp, #4]
  40486e:	f000 813f 	beq.w	404af0 <_malloc_r+0x51c>
  404872:	ebcb 0200 	rsb	r2, fp, r0
  404876:	444a      	add	r2, r9
  404878:	f042 0201 	orr.w	r2, r2, #1
  40487c:	6819      	ldr	r1, [r3, #0]
  40487e:	f8c7 b008 	str.w	fp, [r7, #8]
  404882:	4449      	add	r1, r9
  404884:	42bc      	cmp	r4, r7
  404886:	f8cb 2004 	str.w	r2, [fp, #4]
  40488a:	6019      	str	r1, [r3, #0]
  40488c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 404934 <_malloc_r+0x360>
  404890:	d016      	beq.n	4048c0 <_malloc_r+0x2ec>
  404892:	f1b8 0f0f 	cmp.w	r8, #15
  404896:	f240 80fd 	bls.w	404a94 <_malloc_r+0x4c0>
  40489a:	6862      	ldr	r2, [r4, #4]
  40489c:	f1a8 030c 	sub.w	r3, r8, #12
  4048a0:	f023 0307 	bic.w	r3, r3, #7
  4048a4:	18e0      	adds	r0, r4, r3
  4048a6:	f002 0201 	and.w	r2, r2, #1
  4048aa:	f04f 0e05 	mov.w	lr, #5
  4048ae:	431a      	orrs	r2, r3
  4048b0:	2b0f      	cmp	r3, #15
  4048b2:	6062      	str	r2, [r4, #4]
  4048b4:	f8c0 e004 	str.w	lr, [r0, #4]
  4048b8:	f8c0 e008 	str.w	lr, [r0, #8]
  4048bc:	f200 811c 	bhi.w	404af8 <_malloc_r+0x524>
  4048c0:	4b1d      	ldr	r3, [pc, #116]	; (404938 <_malloc_r+0x364>)
  4048c2:	68bc      	ldr	r4, [r7, #8]
  4048c4:	681a      	ldr	r2, [r3, #0]
  4048c6:	4291      	cmp	r1, r2
  4048c8:	bf88      	it	hi
  4048ca:	6019      	strhi	r1, [r3, #0]
  4048cc:	4b1b      	ldr	r3, [pc, #108]	; (40493c <_malloc_r+0x368>)
  4048ce:	681a      	ldr	r2, [r3, #0]
  4048d0:	4291      	cmp	r1, r2
  4048d2:	6862      	ldr	r2, [r4, #4]
  4048d4:	bf88      	it	hi
  4048d6:	6019      	strhi	r1, [r3, #0]
  4048d8:	f022 0203 	bic.w	r2, r2, #3
  4048dc:	4295      	cmp	r5, r2
  4048de:	eba2 0305 	sub.w	r3, r2, r5
  4048e2:	d801      	bhi.n	4048e8 <_malloc_r+0x314>
  4048e4:	2b0f      	cmp	r3, #15
  4048e6:	dc04      	bgt.n	4048f2 <_malloc_r+0x31e>
  4048e8:	4630      	mov	r0, r6
  4048ea:	f000 f97b 	bl	404be4 <__malloc_unlock>
  4048ee:	2400      	movs	r4, #0
  4048f0:	e738      	b.n	404764 <_malloc_r+0x190>
  4048f2:	1962      	adds	r2, r4, r5
  4048f4:	f043 0301 	orr.w	r3, r3, #1
  4048f8:	f045 0501 	orr.w	r5, r5, #1
  4048fc:	6065      	str	r5, [r4, #4]
  4048fe:	4630      	mov	r0, r6
  404900:	60ba      	str	r2, [r7, #8]
  404902:	6053      	str	r3, [r2, #4]
  404904:	f000 f96e 	bl	404be4 <__malloc_unlock>
  404908:	3408      	adds	r4, #8
  40490a:	4620      	mov	r0, r4
  40490c:	b003      	add	sp, #12
  40490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404912:	2b14      	cmp	r3, #20
  404914:	d971      	bls.n	4049fa <_malloc_r+0x426>
  404916:	2b54      	cmp	r3, #84	; 0x54
  404918:	f200 80a4 	bhi.w	404a64 <_malloc_r+0x490>
  40491c:	0b28      	lsrs	r0, r5, #12
  40491e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  404922:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404926:	306e      	adds	r0, #110	; 0x6e
  404928:	e676      	b.n	404618 <_malloc_r+0x44>
  40492a:	bf00      	nop
  40492c:	2040044c 	.word	0x2040044c
  404930:	20400f1c 	.word	0x20400f1c
  404934:	20400f20 	.word	0x20400f20
  404938:	20400f18 	.word	0x20400f18
  40493c:	20400f14 	.word	0x20400f14
  404940:	20400858 	.word	0x20400858
  404944:	0a5a      	lsrs	r2, r3, #9
  404946:	2a04      	cmp	r2, #4
  404948:	d95e      	bls.n	404a08 <_malloc_r+0x434>
  40494a:	2a14      	cmp	r2, #20
  40494c:	f200 80b3 	bhi.w	404ab6 <_malloc_r+0x4e2>
  404950:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404954:	0049      	lsls	r1, r1, #1
  404956:	325b      	adds	r2, #91	; 0x5b
  404958:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40495c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404960:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404b40 <_malloc_r+0x56c>
  404964:	f1ac 0c08 	sub.w	ip, ip, #8
  404968:	458c      	cmp	ip, r1
  40496a:	f000 8088 	beq.w	404a7e <_malloc_r+0x4aa>
  40496e:	684a      	ldr	r2, [r1, #4]
  404970:	f022 0203 	bic.w	r2, r2, #3
  404974:	4293      	cmp	r3, r2
  404976:	d202      	bcs.n	40497e <_malloc_r+0x3aa>
  404978:	6889      	ldr	r1, [r1, #8]
  40497a:	458c      	cmp	ip, r1
  40497c:	d1f7      	bne.n	40496e <_malloc_r+0x39a>
  40497e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404982:	687a      	ldr	r2, [r7, #4]
  404984:	f8c4 c00c 	str.w	ip, [r4, #12]
  404988:	60a1      	str	r1, [r4, #8]
  40498a:	f8cc 4008 	str.w	r4, [ip, #8]
  40498e:	60cc      	str	r4, [r1, #12]
  404990:	e688      	b.n	4046a4 <_malloc_r+0xd0>
  404992:	1963      	adds	r3, r4, r5
  404994:	f042 0701 	orr.w	r7, r2, #1
  404998:	f045 0501 	orr.w	r5, r5, #1
  40499c:	6065      	str	r5, [r4, #4]
  40499e:	4630      	mov	r0, r6
  4049a0:	614b      	str	r3, [r1, #20]
  4049a2:	610b      	str	r3, [r1, #16]
  4049a4:	f8c3 e00c 	str.w	lr, [r3, #12]
  4049a8:	f8c3 e008 	str.w	lr, [r3, #8]
  4049ac:	605f      	str	r7, [r3, #4]
  4049ae:	509a      	str	r2, [r3, r2]
  4049b0:	3408      	adds	r4, #8
  4049b2:	f000 f917 	bl	404be4 <__malloc_unlock>
  4049b6:	e6d5      	b.n	404764 <_malloc_r+0x190>
  4049b8:	684a      	ldr	r2, [r1, #4]
  4049ba:	e673      	b.n	4046a4 <_malloc_r+0xd0>
  4049bc:	f108 0801 	add.w	r8, r8, #1
  4049c0:	f018 0f03 	tst.w	r8, #3
  4049c4:	f10c 0c08 	add.w	ip, ip, #8
  4049c8:	f47f ae7f 	bne.w	4046ca <_malloc_r+0xf6>
  4049cc:	e030      	b.n	404a30 <_malloc_r+0x45c>
  4049ce:	68dc      	ldr	r4, [r3, #12]
  4049d0:	42a3      	cmp	r3, r4
  4049d2:	bf08      	it	eq
  4049d4:	3002      	addeq	r0, #2
  4049d6:	f43f ae35 	beq.w	404644 <_malloc_r+0x70>
  4049da:	e6b3      	b.n	404744 <_malloc_r+0x170>
  4049dc:	440b      	add	r3, r1
  4049de:	460c      	mov	r4, r1
  4049e0:	685a      	ldr	r2, [r3, #4]
  4049e2:	68c9      	ldr	r1, [r1, #12]
  4049e4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4049e8:	f042 0201 	orr.w	r2, r2, #1
  4049ec:	605a      	str	r2, [r3, #4]
  4049ee:	4630      	mov	r0, r6
  4049f0:	60e9      	str	r1, [r5, #12]
  4049f2:	608d      	str	r5, [r1, #8]
  4049f4:	f000 f8f6 	bl	404be4 <__malloc_unlock>
  4049f8:	e6b4      	b.n	404764 <_malloc_r+0x190>
  4049fa:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4049fe:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  404a02:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404a06:	e607      	b.n	404618 <_malloc_r+0x44>
  404a08:	099a      	lsrs	r2, r3, #6
  404a0a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404a0e:	0049      	lsls	r1, r1, #1
  404a10:	3238      	adds	r2, #56	; 0x38
  404a12:	e7a1      	b.n	404958 <_malloc_r+0x384>
  404a14:	42bc      	cmp	r4, r7
  404a16:	4b4a      	ldr	r3, [pc, #296]	; (404b40 <_malloc_r+0x56c>)
  404a18:	f43f af00 	beq.w	40481c <_malloc_r+0x248>
  404a1c:	689c      	ldr	r4, [r3, #8]
  404a1e:	6862      	ldr	r2, [r4, #4]
  404a20:	f022 0203 	bic.w	r2, r2, #3
  404a24:	e75a      	b.n	4048dc <_malloc_r+0x308>
  404a26:	f859 3908 	ldr.w	r3, [r9], #-8
  404a2a:	4599      	cmp	r9, r3
  404a2c:	f040 8082 	bne.w	404b34 <_malloc_r+0x560>
  404a30:	f010 0f03 	tst.w	r0, #3
  404a34:	f100 30ff 	add.w	r0, r0, #4294967295
  404a38:	d1f5      	bne.n	404a26 <_malloc_r+0x452>
  404a3a:	687b      	ldr	r3, [r7, #4]
  404a3c:	ea23 0304 	bic.w	r3, r3, r4
  404a40:	607b      	str	r3, [r7, #4]
  404a42:	0064      	lsls	r4, r4, #1
  404a44:	429c      	cmp	r4, r3
  404a46:	f63f aebd 	bhi.w	4047c4 <_malloc_r+0x1f0>
  404a4a:	2c00      	cmp	r4, #0
  404a4c:	f43f aeba 	beq.w	4047c4 <_malloc_r+0x1f0>
  404a50:	421c      	tst	r4, r3
  404a52:	4640      	mov	r0, r8
  404a54:	f47f ae35 	bne.w	4046c2 <_malloc_r+0xee>
  404a58:	0064      	lsls	r4, r4, #1
  404a5a:	421c      	tst	r4, r3
  404a5c:	f100 0004 	add.w	r0, r0, #4
  404a60:	d0fa      	beq.n	404a58 <_malloc_r+0x484>
  404a62:	e62e      	b.n	4046c2 <_malloc_r+0xee>
  404a64:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404a68:	d818      	bhi.n	404a9c <_malloc_r+0x4c8>
  404a6a:	0be8      	lsrs	r0, r5, #15
  404a6c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404a70:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404a74:	3077      	adds	r0, #119	; 0x77
  404a76:	e5cf      	b.n	404618 <_malloc_r+0x44>
  404a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404a7c:	e6eb      	b.n	404856 <_malloc_r+0x282>
  404a7e:	2101      	movs	r1, #1
  404a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404a84:	1092      	asrs	r2, r2, #2
  404a86:	fa01 f202 	lsl.w	r2, r1, r2
  404a8a:	431a      	orrs	r2, r3
  404a8c:	f8c8 2004 	str.w	r2, [r8, #4]
  404a90:	4661      	mov	r1, ip
  404a92:	e777      	b.n	404984 <_malloc_r+0x3b0>
  404a94:	2301      	movs	r3, #1
  404a96:	f8cb 3004 	str.w	r3, [fp, #4]
  404a9a:	e725      	b.n	4048e8 <_malloc_r+0x314>
  404a9c:	f240 5254 	movw	r2, #1364	; 0x554
  404aa0:	4293      	cmp	r3, r2
  404aa2:	d820      	bhi.n	404ae6 <_malloc_r+0x512>
  404aa4:	0ca8      	lsrs	r0, r5, #18
  404aa6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404aaa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404aae:	307c      	adds	r0, #124	; 0x7c
  404ab0:	e5b2      	b.n	404618 <_malloc_r+0x44>
  404ab2:	3210      	adds	r2, #16
  404ab4:	e6a4      	b.n	404800 <_malloc_r+0x22c>
  404ab6:	2a54      	cmp	r2, #84	; 0x54
  404ab8:	d826      	bhi.n	404b08 <_malloc_r+0x534>
  404aba:	0b1a      	lsrs	r2, r3, #12
  404abc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404ac0:	0049      	lsls	r1, r1, #1
  404ac2:	326e      	adds	r2, #110	; 0x6e
  404ac4:	e748      	b.n	404958 <_malloc_r+0x384>
  404ac6:	68bc      	ldr	r4, [r7, #8]
  404ac8:	6862      	ldr	r2, [r4, #4]
  404aca:	f022 0203 	bic.w	r2, r2, #3
  404ace:	e705      	b.n	4048dc <_malloc_r+0x308>
  404ad0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404ad4:	2800      	cmp	r0, #0
  404ad6:	f47f aea8 	bne.w	40482a <_malloc_r+0x256>
  404ada:	4442      	add	r2, r8
  404adc:	68bb      	ldr	r3, [r7, #8]
  404ade:	f042 0201 	orr.w	r2, r2, #1
  404ae2:	605a      	str	r2, [r3, #4]
  404ae4:	e6ec      	b.n	4048c0 <_malloc_r+0x2ec>
  404ae6:	23fe      	movs	r3, #254	; 0xfe
  404ae8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  404aec:	207e      	movs	r0, #126	; 0x7e
  404aee:	e593      	b.n	404618 <_malloc_r+0x44>
  404af0:	2201      	movs	r2, #1
  404af2:	f04f 0900 	mov.w	r9, #0
  404af6:	e6c1      	b.n	40487c <_malloc_r+0x2a8>
  404af8:	f104 0108 	add.w	r1, r4, #8
  404afc:	4630      	mov	r0, r6
  404afe:	f001 ffbf 	bl	406a80 <_free_r>
  404b02:	f8d9 1000 	ldr.w	r1, [r9]
  404b06:	e6db      	b.n	4048c0 <_malloc_r+0x2ec>
  404b08:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404b0c:	d805      	bhi.n	404b1a <_malloc_r+0x546>
  404b0e:	0bda      	lsrs	r2, r3, #15
  404b10:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404b14:	0049      	lsls	r1, r1, #1
  404b16:	3277      	adds	r2, #119	; 0x77
  404b18:	e71e      	b.n	404958 <_malloc_r+0x384>
  404b1a:	f240 5154 	movw	r1, #1364	; 0x554
  404b1e:	428a      	cmp	r2, r1
  404b20:	d805      	bhi.n	404b2e <_malloc_r+0x55a>
  404b22:	0c9a      	lsrs	r2, r3, #18
  404b24:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404b28:	0049      	lsls	r1, r1, #1
  404b2a:	327c      	adds	r2, #124	; 0x7c
  404b2c:	e714      	b.n	404958 <_malloc_r+0x384>
  404b2e:	21fe      	movs	r1, #254	; 0xfe
  404b30:	227e      	movs	r2, #126	; 0x7e
  404b32:	e711      	b.n	404958 <_malloc_r+0x384>
  404b34:	687b      	ldr	r3, [r7, #4]
  404b36:	e784      	b.n	404a42 <_malloc_r+0x46e>
  404b38:	08e8      	lsrs	r0, r5, #3
  404b3a:	1c43      	adds	r3, r0, #1
  404b3c:	005b      	lsls	r3, r3, #1
  404b3e:	e5f8      	b.n	404732 <_malloc_r+0x15e>
  404b40:	2040044c 	.word	0x2040044c

00404b44 <memset>:
  404b44:	b470      	push	{r4, r5, r6}
  404b46:	0784      	lsls	r4, r0, #30
  404b48:	d046      	beq.n	404bd8 <memset+0x94>
  404b4a:	1e54      	subs	r4, r2, #1
  404b4c:	2a00      	cmp	r2, #0
  404b4e:	d041      	beq.n	404bd4 <memset+0x90>
  404b50:	b2cd      	uxtb	r5, r1
  404b52:	4603      	mov	r3, r0
  404b54:	e002      	b.n	404b5c <memset+0x18>
  404b56:	1e62      	subs	r2, r4, #1
  404b58:	b3e4      	cbz	r4, 404bd4 <memset+0x90>
  404b5a:	4614      	mov	r4, r2
  404b5c:	f803 5b01 	strb.w	r5, [r3], #1
  404b60:	079a      	lsls	r2, r3, #30
  404b62:	d1f8      	bne.n	404b56 <memset+0x12>
  404b64:	2c03      	cmp	r4, #3
  404b66:	d92e      	bls.n	404bc6 <memset+0x82>
  404b68:	b2cd      	uxtb	r5, r1
  404b6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404b6e:	2c0f      	cmp	r4, #15
  404b70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404b74:	d919      	bls.n	404baa <memset+0x66>
  404b76:	f103 0210 	add.w	r2, r3, #16
  404b7a:	4626      	mov	r6, r4
  404b7c:	3e10      	subs	r6, #16
  404b7e:	2e0f      	cmp	r6, #15
  404b80:	f842 5c10 	str.w	r5, [r2, #-16]
  404b84:	f842 5c0c 	str.w	r5, [r2, #-12]
  404b88:	f842 5c08 	str.w	r5, [r2, #-8]
  404b8c:	f842 5c04 	str.w	r5, [r2, #-4]
  404b90:	f102 0210 	add.w	r2, r2, #16
  404b94:	d8f2      	bhi.n	404b7c <memset+0x38>
  404b96:	f1a4 0210 	sub.w	r2, r4, #16
  404b9a:	f022 020f 	bic.w	r2, r2, #15
  404b9e:	f004 040f 	and.w	r4, r4, #15
  404ba2:	3210      	adds	r2, #16
  404ba4:	2c03      	cmp	r4, #3
  404ba6:	4413      	add	r3, r2
  404ba8:	d90d      	bls.n	404bc6 <memset+0x82>
  404baa:	461e      	mov	r6, r3
  404bac:	4622      	mov	r2, r4
  404bae:	3a04      	subs	r2, #4
  404bb0:	2a03      	cmp	r2, #3
  404bb2:	f846 5b04 	str.w	r5, [r6], #4
  404bb6:	d8fa      	bhi.n	404bae <memset+0x6a>
  404bb8:	1f22      	subs	r2, r4, #4
  404bba:	f022 0203 	bic.w	r2, r2, #3
  404bbe:	3204      	adds	r2, #4
  404bc0:	4413      	add	r3, r2
  404bc2:	f004 0403 	and.w	r4, r4, #3
  404bc6:	b12c      	cbz	r4, 404bd4 <memset+0x90>
  404bc8:	b2c9      	uxtb	r1, r1
  404bca:	441c      	add	r4, r3
  404bcc:	f803 1b01 	strb.w	r1, [r3], #1
  404bd0:	42a3      	cmp	r3, r4
  404bd2:	d1fb      	bne.n	404bcc <memset+0x88>
  404bd4:	bc70      	pop	{r4, r5, r6}
  404bd6:	4770      	bx	lr
  404bd8:	4614      	mov	r4, r2
  404bda:	4603      	mov	r3, r0
  404bdc:	e7c2      	b.n	404b64 <memset+0x20>
  404bde:	bf00      	nop

00404be0 <__malloc_lock>:
  404be0:	4770      	bx	lr
  404be2:	bf00      	nop

00404be4 <__malloc_unlock>:
  404be4:	4770      	bx	lr
  404be6:	bf00      	nop

00404be8 <_puts_r>:
  404be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  404bea:	4605      	mov	r5, r0
  404bec:	b089      	sub	sp, #36	; 0x24
  404bee:	4608      	mov	r0, r1
  404bf0:	460c      	mov	r4, r1
  404bf2:	f000 fa85 	bl	405100 <strlen>
  404bf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404bf8:	4f14      	ldr	r7, [pc, #80]	; (404c4c <_puts_r+0x64>)
  404bfa:	9404      	str	r4, [sp, #16]
  404bfc:	2601      	movs	r6, #1
  404bfe:	1c44      	adds	r4, r0, #1
  404c00:	a904      	add	r1, sp, #16
  404c02:	2202      	movs	r2, #2
  404c04:	9403      	str	r4, [sp, #12]
  404c06:	9005      	str	r0, [sp, #20]
  404c08:	68ac      	ldr	r4, [r5, #8]
  404c0a:	9706      	str	r7, [sp, #24]
  404c0c:	9607      	str	r6, [sp, #28]
  404c0e:	9101      	str	r1, [sp, #4]
  404c10:	9202      	str	r2, [sp, #8]
  404c12:	b1b3      	cbz	r3, 404c42 <_puts_r+0x5a>
  404c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c18:	049a      	lsls	r2, r3, #18
  404c1a:	d406      	bmi.n	404c2a <_puts_r+0x42>
  404c1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404c26:	81a3      	strh	r3, [r4, #12]
  404c28:	6662      	str	r2, [r4, #100]	; 0x64
  404c2a:	4621      	mov	r1, r4
  404c2c:	4628      	mov	r0, r5
  404c2e:	aa01      	add	r2, sp, #4
  404c30:	f002 f80e 	bl	406c50 <__sfvwrite_r>
  404c34:	2800      	cmp	r0, #0
  404c36:	bf14      	ite	ne
  404c38:	f04f 30ff 	movne.w	r0, #4294967295
  404c3c:	200a      	moveq	r0, #10
  404c3e:	b009      	add	sp, #36	; 0x24
  404c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c42:	4628      	mov	r0, r5
  404c44:	f001 fe52 	bl	4068ec <__sinit>
  404c48:	e7e4      	b.n	404c14 <_puts_r+0x2c>
  404c4a:	bf00      	nop
  404c4c:	00409194 	.word	0x00409194

00404c50 <puts>:
  404c50:	4b02      	ldr	r3, [pc, #8]	; (404c5c <puts+0xc>)
  404c52:	4601      	mov	r1, r0
  404c54:	6818      	ldr	r0, [r3, #0]
  404c56:	f7ff bfc7 	b.w	404be8 <_puts_r>
  404c5a:	bf00      	nop
  404c5c:	20400448 	.word	0x20400448

00404c60 <_sbrk_r>:
  404c60:	b538      	push	{r3, r4, r5, lr}
  404c62:	4c07      	ldr	r4, [pc, #28]	; (404c80 <_sbrk_r+0x20>)
  404c64:	2300      	movs	r3, #0
  404c66:	4605      	mov	r5, r0
  404c68:	4608      	mov	r0, r1
  404c6a:	6023      	str	r3, [r4, #0]
  404c6c:	f7ff f8fc 	bl	403e68 <_sbrk>
  404c70:	1c43      	adds	r3, r0, #1
  404c72:	d000      	beq.n	404c76 <_sbrk_r+0x16>
  404c74:	bd38      	pop	{r3, r4, r5, pc}
  404c76:	6823      	ldr	r3, [r4, #0]
  404c78:	2b00      	cmp	r3, #0
  404c7a:	d0fb      	beq.n	404c74 <_sbrk_r+0x14>
  404c7c:	602b      	str	r3, [r5, #0]
  404c7e:	bd38      	pop	{r3, r4, r5, pc}
  404c80:	20401014 	.word	0x20401014

00404c84 <setbuf>:
  404c84:	2900      	cmp	r1, #0
  404c86:	bf0c      	ite	eq
  404c88:	2202      	moveq	r2, #2
  404c8a:	2200      	movne	r2, #0
  404c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404c90:	f000 b800 	b.w	404c94 <setvbuf>

00404c94 <setvbuf>:
  404c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404c98:	4c51      	ldr	r4, [pc, #324]	; (404de0 <setvbuf+0x14c>)
  404c9a:	6825      	ldr	r5, [r4, #0]
  404c9c:	b083      	sub	sp, #12
  404c9e:	4604      	mov	r4, r0
  404ca0:	460f      	mov	r7, r1
  404ca2:	4690      	mov	r8, r2
  404ca4:	461e      	mov	r6, r3
  404ca6:	b115      	cbz	r5, 404cae <setvbuf+0x1a>
  404ca8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404caa:	2b00      	cmp	r3, #0
  404cac:	d079      	beq.n	404da2 <setvbuf+0x10e>
  404cae:	f1b8 0f02 	cmp.w	r8, #2
  404cb2:	d004      	beq.n	404cbe <setvbuf+0x2a>
  404cb4:	f1b8 0f01 	cmp.w	r8, #1
  404cb8:	d87f      	bhi.n	404dba <setvbuf+0x126>
  404cba:	2e00      	cmp	r6, #0
  404cbc:	db7d      	blt.n	404dba <setvbuf+0x126>
  404cbe:	4621      	mov	r1, r4
  404cc0:	4628      	mov	r0, r5
  404cc2:	f001 fd7f 	bl	4067c4 <_fflush_r>
  404cc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404cc8:	b141      	cbz	r1, 404cdc <setvbuf+0x48>
  404cca:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404cce:	4299      	cmp	r1, r3
  404cd0:	d002      	beq.n	404cd8 <setvbuf+0x44>
  404cd2:	4628      	mov	r0, r5
  404cd4:	f001 fed4 	bl	406a80 <_free_r>
  404cd8:	2300      	movs	r3, #0
  404cda:	6323      	str	r3, [r4, #48]	; 0x30
  404cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ce0:	2200      	movs	r2, #0
  404ce2:	61a2      	str	r2, [r4, #24]
  404ce4:	6062      	str	r2, [r4, #4]
  404ce6:	061a      	lsls	r2, r3, #24
  404ce8:	d454      	bmi.n	404d94 <setvbuf+0x100>
  404cea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404cee:	f023 0303 	bic.w	r3, r3, #3
  404cf2:	f1b8 0f02 	cmp.w	r8, #2
  404cf6:	81a3      	strh	r3, [r4, #12]
  404cf8:	d039      	beq.n	404d6e <setvbuf+0xda>
  404cfa:	ab01      	add	r3, sp, #4
  404cfc:	466a      	mov	r2, sp
  404cfe:	4621      	mov	r1, r4
  404d00:	4628      	mov	r0, r5
  404d02:	f002 f95b 	bl	406fbc <__swhatbuf_r>
  404d06:	89a3      	ldrh	r3, [r4, #12]
  404d08:	4318      	orrs	r0, r3
  404d0a:	81a0      	strh	r0, [r4, #12]
  404d0c:	b326      	cbz	r6, 404d58 <setvbuf+0xc4>
  404d0e:	b327      	cbz	r7, 404d5a <setvbuf+0xc6>
  404d10:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404d12:	2b00      	cmp	r3, #0
  404d14:	d04d      	beq.n	404db2 <setvbuf+0x11e>
  404d16:	9b00      	ldr	r3, [sp, #0]
  404d18:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  404d1c:	6027      	str	r7, [r4, #0]
  404d1e:	429e      	cmp	r6, r3
  404d20:	bf1c      	itt	ne
  404d22:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  404d26:	81a0      	strhne	r0, [r4, #12]
  404d28:	f1b8 0f01 	cmp.w	r8, #1
  404d2c:	bf08      	it	eq
  404d2e:	f040 0001 	orreq.w	r0, r0, #1
  404d32:	b283      	uxth	r3, r0
  404d34:	bf08      	it	eq
  404d36:	81a0      	strheq	r0, [r4, #12]
  404d38:	f003 0008 	and.w	r0, r3, #8
  404d3c:	b280      	uxth	r0, r0
  404d3e:	6127      	str	r7, [r4, #16]
  404d40:	6166      	str	r6, [r4, #20]
  404d42:	b318      	cbz	r0, 404d8c <setvbuf+0xf8>
  404d44:	f013 0001 	ands.w	r0, r3, #1
  404d48:	d02f      	beq.n	404daa <setvbuf+0x116>
  404d4a:	2000      	movs	r0, #0
  404d4c:	4276      	negs	r6, r6
  404d4e:	61a6      	str	r6, [r4, #24]
  404d50:	60a0      	str	r0, [r4, #8]
  404d52:	b003      	add	sp, #12
  404d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404d58:	9e00      	ldr	r6, [sp, #0]
  404d5a:	4630      	mov	r0, r6
  404d5c:	f7ff fc2a 	bl	4045b4 <malloc>
  404d60:	4607      	mov	r7, r0
  404d62:	b368      	cbz	r0, 404dc0 <setvbuf+0x12c>
  404d64:	89a3      	ldrh	r3, [r4, #12]
  404d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404d6a:	81a3      	strh	r3, [r4, #12]
  404d6c:	e7d0      	b.n	404d10 <setvbuf+0x7c>
  404d6e:	2000      	movs	r0, #0
  404d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404d74:	f043 0302 	orr.w	r3, r3, #2
  404d78:	2500      	movs	r5, #0
  404d7a:	2101      	movs	r1, #1
  404d7c:	81a3      	strh	r3, [r4, #12]
  404d7e:	60a5      	str	r5, [r4, #8]
  404d80:	6022      	str	r2, [r4, #0]
  404d82:	6122      	str	r2, [r4, #16]
  404d84:	6161      	str	r1, [r4, #20]
  404d86:	b003      	add	sp, #12
  404d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404d8c:	60a0      	str	r0, [r4, #8]
  404d8e:	b003      	add	sp, #12
  404d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404d94:	6921      	ldr	r1, [r4, #16]
  404d96:	4628      	mov	r0, r5
  404d98:	f001 fe72 	bl	406a80 <_free_r>
  404d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404da0:	e7a3      	b.n	404cea <setvbuf+0x56>
  404da2:	4628      	mov	r0, r5
  404da4:	f001 fda2 	bl	4068ec <__sinit>
  404da8:	e781      	b.n	404cae <setvbuf+0x1a>
  404daa:	60a6      	str	r6, [r4, #8]
  404dac:	b003      	add	sp, #12
  404dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404db2:	4628      	mov	r0, r5
  404db4:	f001 fd9a 	bl	4068ec <__sinit>
  404db8:	e7ad      	b.n	404d16 <setvbuf+0x82>
  404dba:	f04f 30ff 	mov.w	r0, #4294967295
  404dbe:	e7e2      	b.n	404d86 <setvbuf+0xf2>
  404dc0:	f8dd 9000 	ldr.w	r9, [sp]
  404dc4:	45b1      	cmp	r9, r6
  404dc6:	d006      	beq.n	404dd6 <setvbuf+0x142>
  404dc8:	4648      	mov	r0, r9
  404dca:	f7ff fbf3 	bl	4045b4 <malloc>
  404dce:	4607      	mov	r7, r0
  404dd0:	b108      	cbz	r0, 404dd6 <setvbuf+0x142>
  404dd2:	464e      	mov	r6, r9
  404dd4:	e7c6      	b.n	404d64 <setvbuf+0xd0>
  404dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dda:	f04f 30ff 	mov.w	r0, #4294967295
  404dde:	e7c7      	b.n	404d70 <setvbuf+0xdc>
  404de0:	20400448 	.word	0x20400448
	...
  404e00:	eba2 0003 	sub.w	r0, r2, r3
  404e04:	4770      	bx	lr
  404e06:	bf00      	nop

00404e08 <strcmp>:
  404e08:	7802      	ldrb	r2, [r0, #0]
  404e0a:	780b      	ldrb	r3, [r1, #0]
  404e0c:	2a01      	cmp	r2, #1
  404e0e:	bf28      	it	cs
  404e10:	429a      	cmpcs	r2, r3
  404e12:	d1f5      	bne.n	404e00 <setvbuf+0x16c>
  404e14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  404e18:	ea40 0401 	orr.w	r4, r0, r1
  404e1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404e20:	f06f 0c00 	mvn.w	ip, #0
  404e24:	ea4f 7244 	mov.w	r2, r4, lsl #29
  404e28:	b312      	cbz	r2, 404e70 <strcmp+0x68>
  404e2a:	ea80 0401 	eor.w	r4, r0, r1
  404e2e:	f014 0f07 	tst.w	r4, #7
  404e32:	d16a      	bne.n	404f0a <strcmp+0x102>
  404e34:	f000 0407 	and.w	r4, r0, #7
  404e38:	f020 0007 	bic.w	r0, r0, #7
  404e3c:	f004 0503 	and.w	r5, r4, #3
  404e40:	f021 0107 	bic.w	r1, r1, #7
  404e44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404e48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404e4c:	f014 0f04 	tst.w	r4, #4
  404e50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404e54:	fa0c f405 	lsl.w	r4, ip, r5
  404e58:	ea62 0204 	orn	r2, r2, r4
  404e5c:	ea66 0604 	orn	r6, r6, r4
  404e60:	d00a      	beq.n	404e78 <strcmp+0x70>
  404e62:	ea63 0304 	orn	r3, r3, r4
  404e66:	4662      	mov	r2, ip
  404e68:	ea67 0704 	orn	r7, r7, r4
  404e6c:	4666      	mov	r6, ip
  404e6e:	e003      	b.n	404e78 <strcmp+0x70>
  404e70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  404e74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  404e78:	fa82 f54c 	uadd8	r5, r2, ip
  404e7c:	ea82 0406 	eor.w	r4, r2, r6
  404e80:	faa4 f48c 	sel	r4, r4, ip
  404e84:	bb6c      	cbnz	r4, 404ee2 <strcmp+0xda>
  404e86:	fa83 f54c 	uadd8	r5, r3, ip
  404e8a:	ea83 0507 	eor.w	r5, r3, r7
  404e8e:	faa5 f58c 	sel	r5, r5, ip
  404e92:	b995      	cbnz	r5, 404eba <strcmp+0xb2>
  404e94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  404e98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  404e9c:	fa82 f54c 	uadd8	r5, r2, ip
  404ea0:	ea82 0406 	eor.w	r4, r2, r6
  404ea4:	faa4 f48c 	sel	r4, r4, ip
  404ea8:	fa83 f54c 	uadd8	r5, r3, ip
  404eac:	ea83 0507 	eor.w	r5, r3, r7
  404eb0:	faa5 f58c 	sel	r5, r5, ip
  404eb4:	4325      	orrs	r5, r4
  404eb6:	d0db      	beq.n	404e70 <strcmp+0x68>
  404eb8:	b99c      	cbnz	r4, 404ee2 <strcmp+0xda>
  404eba:	ba2d      	rev	r5, r5
  404ebc:	fab5 f485 	clz	r4, r5
  404ec0:	f024 0407 	bic.w	r4, r4, #7
  404ec4:	fa27 f104 	lsr.w	r1, r7, r4
  404ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404ecc:	fa23 f304 	lsr.w	r3, r3, r4
  404ed0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  404ed4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404ed8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404edc:	eba0 0001 	sub.w	r0, r0, r1
  404ee0:	4770      	bx	lr
  404ee2:	ba24      	rev	r4, r4
  404ee4:	fab4 f484 	clz	r4, r4
  404ee8:	f024 0407 	bic.w	r4, r4, #7
  404eec:	fa26 f104 	lsr.w	r1, r6, r4
  404ef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404ef4:	fa22 f204 	lsr.w	r2, r2, r4
  404ef8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  404efc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404f04:	eba0 0001 	sub.w	r0, r0, r1
  404f08:	4770      	bx	lr
  404f0a:	f014 0f03 	tst.w	r4, #3
  404f0e:	d13c      	bne.n	404f8a <strcmp+0x182>
  404f10:	f010 0403 	ands.w	r4, r0, #3
  404f14:	d128      	bne.n	404f68 <strcmp+0x160>
  404f16:	f850 2b08 	ldr.w	r2, [r0], #8
  404f1a:	f851 3b08 	ldr.w	r3, [r1], #8
  404f1e:	fa82 f54c 	uadd8	r5, r2, ip
  404f22:	ea82 0503 	eor.w	r5, r2, r3
  404f26:	faa5 f58c 	sel	r5, r5, ip
  404f2a:	b95d      	cbnz	r5, 404f44 <strcmp+0x13c>
  404f2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  404f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404f34:	fa82 f54c 	uadd8	r5, r2, ip
  404f38:	ea82 0503 	eor.w	r5, r2, r3
  404f3c:	faa5 f58c 	sel	r5, r5, ip
  404f40:	2d00      	cmp	r5, #0
  404f42:	d0e8      	beq.n	404f16 <strcmp+0x10e>
  404f44:	ba2d      	rev	r5, r5
  404f46:	fab5 f485 	clz	r4, r5
  404f4a:	f024 0407 	bic.w	r4, r4, #7
  404f4e:	fa23 f104 	lsr.w	r1, r3, r4
  404f52:	fa22 f204 	lsr.w	r2, r2, r4
  404f56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  404f5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  404f62:	eba0 0001 	sub.w	r0, r0, r1
  404f66:	4770      	bx	lr
  404f68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  404f6c:	f020 0003 	bic.w	r0, r0, #3
  404f70:	f850 2b08 	ldr.w	r2, [r0], #8
  404f74:	f021 0103 	bic.w	r1, r1, #3
  404f78:	f851 3b08 	ldr.w	r3, [r1], #8
  404f7c:	fa0c f404 	lsl.w	r4, ip, r4
  404f80:	ea62 0204 	orn	r2, r2, r4
  404f84:	ea63 0304 	orn	r3, r3, r4
  404f88:	e7c9      	b.n	404f1e <strcmp+0x116>
  404f8a:	f010 0403 	ands.w	r4, r0, #3
  404f8e:	d01a      	beq.n	404fc6 <strcmp+0x1be>
  404f90:	eba1 0104 	sub.w	r1, r1, r4
  404f94:	f020 0003 	bic.w	r0, r0, #3
  404f98:	07e4      	lsls	r4, r4, #31
  404f9a:	f850 2b04 	ldr.w	r2, [r0], #4
  404f9e:	d006      	beq.n	404fae <strcmp+0x1a6>
  404fa0:	d20f      	bcs.n	404fc2 <strcmp+0x1ba>
  404fa2:	788b      	ldrb	r3, [r1, #2]
  404fa4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  404fa8:	1ae4      	subs	r4, r4, r3
  404faa:	d106      	bne.n	404fba <strcmp+0x1b2>
  404fac:	b12b      	cbz	r3, 404fba <strcmp+0x1b2>
  404fae:	78cb      	ldrb	r3, [r1, #3]
  404fb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  404fb4:	1ae4      	subs	r4, r4, r3
  404fb6:	d100      	bne.n	404fba <strcmp+0x1b2>
  404fb8:	b91b      	cbnz	r3, 404fc2 <strcmp+0x1ba>
  404fba:	4620      	mov	r0, r4
  404fbc:	f85d 4b10 	ldr.w	r4, [sp], #16
  404fc0:	4770      	bx	lr
  404fc2:	f101 0104 	add.w	r1, r1, #4
  404fc6:	f850 2b04 	ldr.w	r2, [r0], #4
  404fca:	07cc      	lsls	r4, r1, #31
  404fcc:	f021 0103 	bic.w	r1, r1, #3
  404fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fd4:	d848      	bhi.n	405068 <strcmp+0x260>
  404fd6:	d224      	bcs.n	405022 <strcmp+0x21a>
  404fd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  404fdc:	fa82 f54c 	uadd8	r5, r2, ip
  404fe0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  404fe4:	faa5 f58c 	sel	r5, r5, ip
  404fe8:	d10a      	bne.n	405000 <strcmp+0x1f8>
  404fea:	b965      	cbnz	r5, 405006 <strcmp+0x1fe>
  404fec:	f851 3b04 	ldr.w	r3, [r1], #4
  404ff0:	ea84 0402 	eor.w	r4, r4, r2
  404ff4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  404ff8:	d10e      	bne.n	405018 <strcmp+0x210>
  404ffa:	f850 2b04 	ldr.w	r2, [r0], #4
  404ffe:	e7eb      	b.n	404fd8 <strcmp+0x1d0>
  405000:	ea4f 2313 	mov.w	r3, r3, lsr #8
  405004:	e055      	b.n	4050b2 <strcmp+0x2aa>
  405006:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40500a:	d14d      	bne.n	4050a8 <strcmp+0x2a0>
  40500c:	7808      	ldrb	r0, [r1, #0]
  40500e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  405012:	f1c0 0000 	rsb	r0, r0, #0
  405016:	4770      	bx	lr
  405018:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40501c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  405020:	e047      	b.n	4050b2 <strcmp+0x2aa>
  405022:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  405026:	fa82 f54c 	uadd8	r5, r2, ip
  40502a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40502e:	faa5 f58c 	sel	r5, r5, ip
  405032:	d10a      	bne.n	40504a <strcmp+0x242>
  405034:	b965      	cbnz	r5, 405050 <strcmp+0x248>
  405036:	f851 3b04 	ldr.w	r3, [r1], #4
  40503a:	ea84 0402 	eor.w	r4, r4, r2
  40503e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  405042:	d10c      	bne.n	40505e <strcmp+0x256>
  405044:	f850 2b04 	ldr.w	r2, [r0], #4
  405048:	e7eb      	b.n	405022 <strcmp+0x21a>
  40504a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40504e:	e030      	b.n	4050b2 <strcmp+0x2aa>
  405050:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  405054:	d128      	bne.n	4050a8 <strcmp+0x2a0>
  405056:	880b      	ldrh	r3, [r1, #0]
  405058:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40505c:	e029      	b.n	4050b2 <strcmp+0x2aa>
  40505e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  405062:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  405066:	e024      	b.n	4050b2 <strcmp+0x2aa>
  405068:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40506c:	fa82 f54c 	uadd8	r5, r2, ip
  405070:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  405074:	faa5 f58c 	sel	r5, r5, ip
  405078:	d10a      	bne.n	405090 <strcmp+0x288>
  40507a:	b965      	cbnz	r5, 405096 <strcmp+0x28e>
  40507c:	f851 3b04 	ldr.w	r3, [r1], #4
  405080:	ea84 0402 	eor.w	r4, r4, r2
  405084:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  405088:	d109      	bne.n	40509e <strcmp+0x296>
  40508a:	f850 2b04 	ldr.w	r2, [r0], #4
  40508e:	e7eb      	b.n	405068 <strcmp+0x260>
  405090:	ea4f 6313 	mov.w	r3, r3, lsr #24
  405094:	e00d      	b.n	4050b2 <strcmp+0x2aa>
  405096:	f015 0fff 	tst.w	r5, #255	; 0xff
  40509a:	d105      	bne.n	4050a8 <strcmp+0x2a0>
  40509c:	680b      	ldr	r3, [r1, #0]
  40509e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4050a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4050a6:	e004      	b.n	4050b2 <strcmp+0x2aa>
  4050a8:	f04f 0000 	mov.w	r0, #0
  4050ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4050b0:	4770      	bx	lr
  4050b2:	ba12      	rev	r2, r2
  4050b4:	ba1b      	rev	r3, r3
  4050b6:	fa82 f44c 	uadd8	r4, r2, ip
  4050ba:	ea82 0403 	eor.w	r4, r2, r3
  4050be:	faa4 f58c 	sel	r5, r4, ip
  4050c2:	fab5 f485 	clz	r4, r5
  4050c6:	fa02 f204 	lsl.w	r2, r2, r4
  4050ca:	fa03 f304 	lsl.w	r3, r3, r4
  4050ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4050d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4050d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4050da:	4770      	bx	lr
	...

00405100 <strlen>:
  405100:	f890 f000 	pld	[r0]
  405104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405108:	f020 0107 	bic.w	r1, r0, #7
  40510c:	f06f 0c00 	mvn.w	ip, #0
  405110:	f010 0407 	ands.w	r4, r0, #7
  405114:	f891 f020 	pld	[r1, #32]
  405118:	f040 8049 	bne.w	4051ae <strlen+0xae>
  40511c:	f04f 0400 	mov.w	r4, #0
  405120:	f06f 0007 	mvn.w	r0, #7
  405124:	e9d1 2300 	ldrd	r2, r3, [r1]
  405128:	f891 f040 	pld	[r1, #64]	; 0x40
  40512c:	f100 0008 	add.w	r0, r0, #8
  405130:	fa82 f24c 	uadd8	r2, r2, ip
  405134:	faa4 f28c 	sel	r2, r4, ip
  405138:	fa83 f34c 	uadd8	r3, r3, ip
  40513c:	faa2 f38c 	sel	r3, r2, ip
  405140:	bb4b      	cbnz	r3, 405196 <strlen+0x96>
  405142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405146:	fa82 f24c 	uadd8	r2, r2, ip
  40514a:	f100 0008 	add.w	r0, r0, #8
  40514e:	faa4 f28c 	sel	r2, r4, ip
  405152:	fa83 f34c 	uadd8	r3, r3, ip
  405156:	faa2 f38c 	sel	r3, r2, ip
  40515a:	b9e3      	cbnz	r3, 405196 <strlen+0x96>
  40515c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405160:	fa82 f24c 	uadd8	r2, r2, ip
  405164:	f100 0008 	add.w	r0, r0, #8
  405168:	faa4 f28c 	sel	r2, r4, ip
  40516c:	fa83 f34c 	uadd8	r3, r3, ip
  405170:	faa2 f38c 	sel	r3, r2, ip
  405174:	b97b      	cbnz	r3, 405196 <strlen+0x96>
  405176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40517a:	f101 0120 	add.w	r1, r1, #32
  40517e:	fa82 f24c 	uadd8	r2, r2, ip
  405182:	f100 0008 	add.w	r0, r0, #8
  405186:	faa4 f28c 	sel	r2, r4, ip
  40518a:	fa83 f34c 	uadd8	r3, r3, ip
  40518e:	faa2 f38c 	sel	r3, r2, ip
  405192:	2b00      	cmp	r3, #0
  405194:	d0c6      	beq.n	405124 <strlen+0x24>
  405196:	2a00      	cmp	r2, #0
  405198:	bf04      	itt	eq
  40519a:	3004      	addeq	r0, #4
  40519c:	461a      	moveq	r2, r3
  40519e:	ba12      	rev	r2, r2
  4051a0:	fab2 f282 	clz	r2, r2
  4051a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4051a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4051ac:	4770      	bx	lr
  4051ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4051b2:	f004 0503 	and.w	r5, r4, #3
  4051b6:	f1c4 0000 	rsb	r0, r4, #0
  4051ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4051be:	f014 0f04 	tst.w	r4, #4
  4051c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4051c6:	fa0c f505 	lsl.w	r5, ip, r5
  4051ca:	ea62 0205 	orn	r2, r2, r5
  4051ce:	bf1c      	itt	ne
  4051d0:	ea63 0305 	ornne	r3, r3, r5
  4051d4:	4662      	movne	r2, ip
  4051d6:	f04f 0400 	mov.w	r4, #0
  4051da:	e7a9      	b.n	405130 <strlen+0x30>

004051dc <critical_factorization>:
  4051dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051e0:	f04f 0e01 	mov.w	lr, #1
  4051e4:	4674      	mov	r4, lr
  4051e6:	2500      	movs	r5, #0
  4051e8:	f04f 36ff 	mov.w	r6, #4294967295
  4051ec:	192b      	adds	r3, r5, r4
  4051ee:	428b      	cmp	r3, r1
  4051f0:	eb00 0706 	add.w	r7, r0, r6
  4051f4:	d20d      	bcs.n	405212 <critical_factorization+0x36>
  4051f6:	5d3f      	ldrb	r7, [r7, r4]
  4051f8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4051fc:	45bc      	cmp	ip, r7
  4051fe:	d22d      	bcs.n	40525c <critical_factorization+0x80>
  405200:	461d      	mov	r5, r3
  405202:	2401      	movs	r4, #1
  405204:	ebc6 0e03 	rsb	lr, r6, r3
  405208:	192b      	adds	r3, r5, r4
  40520a:	428b      	cmp	r3, r1
  40520c:	eb00 0706 	add.w	r7, r0, r6
  405210:	d3f1      	bcc.n	4051f6 <critical_factorization+0x1a>
  405212:	f04f 0801 	mov.w	r8, #1
  405216:	f8c2 e000 	str.w	lr, [r2]
  40521a:	4644      	mov	r4, r8
  40521c:	2500      	movs	r5, #0
  40521e:	f04f 37ff 	mov.w	r7, #4294967295
  405222:	192b      	adds	r3, r5, r4
  405224:	4299      	cmp	r1, r3
  405226:	eb00 0e07 	add.w	lr, r0, r7
  40522a:	d90e      	bls.n	40524a <critical_factorization+0x6e>
  40522c:	f81e e004 	ldrb.w	lr, [lr, r4]
  405230:	f810 c003 	ldrb.w	ip, [r0, r3]
  405234:	45f4      	cmp	ip, lr
  405236:	d918      	bls.n	40526a <critical_factorization+0x8e>
  405238:	461d      	mov	r5, r3
  40523a:	2401      	movs	r4, #1
  40523c:	ebc7 0803 	rsb	r8, r7, r3
  405240:	192b      	adds	r3, r5, r4
  405242:	4299      	cmp	r1, r3
  405244:	eb00 0e07 	add.w	lr, r0, r7
  405248:	d8f0      	bhi.n	40522c <critical_factorization+0x50>
  40524a:	3701      	adds	r7, #1
  40524c:	1c70      	adds	r0, r6, #1
  40524e:	4287      	cmp	r7, r0
  405250:	bf24      	itt	cs
  405252:	f8c2 8000 	strcs.w	r8, [r2]
  405256:	4638      	movcs	r0, r7
  405258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40525c:	d00c      	beq.n	405278 <critical_factorization+0x9c>
  40525e:	f04f 0e01 	mov.w	lr, #1
  405262:	462e      	mov	r6, r5
  405264:	4674      	mov	r4, lr
  405266:	4475      	add	r5, lr
  405268:	e7c0      	b.n	4051ec <critical_factorization+0x10>
  40526a:	d00c      	beq.n	405286 <critical_factorization+0xaa>
  40526c:	f04f 0801 	mov.w	r8, #1
  405270:	462f      	mov	r7, r5
  405272:	4644      	mov	r4, r8
  405274:	4445      	add	r5, r8
  405276:	e7d4      	b.n	405222 <critical_factorization+0x46>
  405278:	4574      	cmp	r4, lr
  40527a:	bf09      	itett	eq
  40527c:	46a6      	moveq	lr, r4
  40527e:	3401      	addne	r4, #1
  405280:	461d      	moveq	r5, r3
  405282:	2401      	moveq	r4, #1
  405284:	e7b2      	b.n	4051ec <critical_factorization+0x10>
  405286:	4544      	cmp	r4, r8
  405288:	bf09      	itett	eq
  40528a:	46a0      	moveq	r8, r4
  40528c:	3401      	addne	r4, #1
  40528e:	461d      	moveq	r5, r3
  405290:	2401      	moveq	r4, #1
  405292:	e7c6      	b.n	405222 <critical_factorization+0x46>

00405294 <two_way_long_needle>:
  405294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405298:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40529c:	4616      	mov	r6, r2
  40529e:	4605      	mov	r5, r0
  4052a0:	468b      	mov	fp, r1
  4052a2:	4610      	mov	r0, r2
  4052a4:	4619      	mov	r1, r3
  4052a6:	aa03      	add	r2, sp, #12
  4052a8:	461c      	mov	r4, r3
  4052aa:	f7ff ff97 	bl	4051dc <critical_factorization>
  4052ae:	ab03      	add	r3, sp, #12
  4052b0:	4681      	mov	r9, r0
  4052b2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4052b6:	f843 4f04 	str.w	r4, [r3, #4]!
  4052ba:	4293      	cmp	r3, r2
  4052bc:	d1fb      	bne.n	4052b6 <two_way_long_needle+0x22>
  4052be:	b14c      	cbz	r4, 4052d4 <two_way_long_needle+0x40>
  4052c0:	1e63      	subs	r3, r4, #1
  4052c2:	4632      	mov	r2, r6
  4052c4:	a804      	add	r0, sp, #16
  4052c6:	f812 1b01 	ldrb.w	r1, [r2], #1
  4052ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4052ce:	f113 33ff 	adds.w	r3, r3, #4294967295
  4052d2:	d2f8      	bcs.n	4052c6 <two_way_long_needle+0x32>
  4052d4:	9903      	ldr	r1, [sp, #12]
  4052d6:	464a      	mov	r2, r9
  4052d8:	4431      	add	r1, r6
  4052da:	4630      	mov	r0, r6
  4052dc:	f001 ff38 	bl	407150 <memcmp>
  4052e0:	2800      	cmp	r0, #0
  4052e2:	d171      	bne.n	4053c8 <two_way_long_needle+0x134>
  4052e4:	f109 33ff 	add.w	r3, r9, #4294967295
  4052e8:	9300      	str	r3, [sp, #0]
  4052ea:	18f3      	adds	r3, r6, r3
  4052ec:	4682      	mov	sl, r0
  4052ee:	9301      	str	r3, [sp, #4]
  4052f0:	4623      	mov	r3, r4
  4052f2:	4680      	mov	r8, r0
  4052f4:	4654      	mov	r4, sl
  4052f6:	4658      	mov	r0, fp
  4052f8:	469a      	mov	sl, r3
  4052fa:	eb08 070a 	add.w	r7, r8, sl
  4052fe:	1a3a      	subs	r2, r7, r0
  405300:	2100      	movs	r1, #0
  405302:	4428      	add	r0, r5
  405304:	f001 fed4 	bl	4070b0 <memchr>
  405308:	2800      	cmp	r0, #0
  40530a:	d158      	bne.n	4053be <two_way_long_needle+0x12a>
  40530c:	2f00      	cmp	r7, #0
  40530e:	d056      	beq.n	4053be <two_way_long_needle+0x12a>
  405310:	19eb      	adds	r3, r5, r7
  405312:	aa04      	add	r2, sp, #16
  405314:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  405318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40531c:	b14b      	cbz	r3, 405332 <two_way_long_needle+0x9e>
  40531e:	b124      	cbz	r4, 40532a <two_way_long_needle+0x96>
  405320:	9a03      	ldr	r2, [sp, #12]
  405322:	4293      	cmp	r3, r2
  405324:	d201      	bcs.n	40532a <two_way_long_needle+0x96>
  405326:	ebc2 030a 	rsb	r3, r2, sl
  40532a:	4498      	add	r8, r3
  40532c:	2400      	movs	r4, #0
  40532e:	4638      	mov	r0, r7
  405330:	e7e3      	b.n	4052fa <two_way_long_needle+0x66>
  405332:	454c      	cmp	r4, r9
  405334:	4623      	mov	r3, r4
  405336:	f10a 3eff 	add.w	lr, sl, #4294967295
  40533a:	bf38      	it	cc
  40533c:	464b      	movcc	r3, r9
  40533e:	4573      	cmp	r3, lr
  405340:	d213      	bcs.n	40536a <two_way_long_needle+0xd6>
  405342:	eb08 0203 	add.w	r2, r8, r3
  405346:	f816 c003 	ldrb.w	ip, [r6, r3]
  40534a:	5ca8      	ldrb	r0, [r5, r2]
  40534c:	4584      	cmp	ip, r0
  40534e:	442a      	add	r2, r5
  405350:	eb06 0103 	add.w	r1, r6, r3
  405354:	d006      	beq.n	405364 <two_way_long_needle+0xd0>
  405356:	e02e      	b.n	4053b6 <two_way_long_needle+0x122>
  405358:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40535c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  405360:	4584      	cmp	ip, r0
  405362:	d128      	bne.n	4053b6 <two_way_long_needle+0x122>
  405364:	3301      	adds	r3, #1
  405366:	4573      	cmp	r3, lr
  405368:	d3f6      	bcc.n	405358 <two_way_long_needle+0xc4>
  40536a:	454c      	cmp	r4, r9
  40536c:	9900      	ldr	r1, [sp, #0]
  40536e:	f080 808b 	bcs.w	405488 <two_way_long_needle+0x1f4>
  405372:	9b00      	ldr	r3, [sp, #0]
  405374:	9801      	ldr	r0, [sp, #4]
  405376:	eb08 0203 	add.w	r2, r8, r3
  40537a:	7803      	ldrb	r3, [r0, #0]
  40537c:	5ca8      	ldrb	r0, [r5, r2]
  40537e:	4283      	cmp	r3, r0
  405380:	442a      	add	r2, r5
  405382:	f040 8081 	bne.w	405488 <two_way_long_needle+0x1f4>
  405386:	9b01      	ldr	r3, [sp, #4]
  405388:	eb06 0b04 	add.w	fp, r6, r4
  40538c:	e006      	b.n	40539c <two_way_long_needle+0x108>
  40538e:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  405392:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  405396:	4586      	cmp	lr, r0
  405398:	d104      	bne.n	4053a4 <two_way_long_needle+0x110>
  40539a:	4661      	mov	r1, ip
  40539c:	459b      	cmp	fp, r3
  40539e:	f101 3cff 	add.w	ip, r1, #4294967295
  4053a2:	d1f4      	bne.n	40538e <two_way_long_needle+0xfa>
  4053a4:	3401      	adds	r4, #1
  4053a6:	428c      	cmp	r4, r1
  4053a8:	d870      	bhi.n	40548c <two_way_long_needle+0x1f8>
  4053aa:	9c03      	ldr	r4, [sp, #12]
  4053ac:	4638      	mov	r0, r7
  4053ae:	44a0      	add	r8, r4
  4053b0:	ebc4 040a 	rsb	r4, r4, sl
  4053b4:	e7a1      	b.n	4052fa <two_way_long_needle+0x66>
  4053b6:	f1c9 0201 	rsb	r2, r9, #1
  4053ba:	4490      	add	r8, r2
  4053bc:	e7b5      	b.n	40532a <two_way_long_needle+0x96>
  4053be:	2000      	movs	r0, #0
  4053c0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053c8:	ebc9 0304 	rsb	r3, r9, r4
  4053cc:	454b      	cmp	r3, r9
  4053ce:	bf38      	it	cc
  4053d0:	464b      	movcc	r3, r9
  4053d2:	3301      	adds	r3, #1
  4053d4:	f109 38ff 	add.w	r8, r9, #4294967295
  4053d8:	9303      	str	r3, [sp, #12]
  4053da:	eb06 0308 	add.w	r3, r6, r8
  4053de:	4658      	mov	r0, fp
  4053e0:	f04f 0a00 	mov.w	sl, #0
  4053e4:	46cb      	mov	fp, r9
  4053e6:	4699      	mov	r9, r3
  4053e8:	eb0a 0704 	add.w	r7, sl, r4
  4053ec:	1a3a      	subs	r2, r7, r0
  4053ee:	2100      	movs	r1, #0
  4053f0:	4428      	add	r0, r5
  4053f2:	f001 fe5d 	bl	4070b0 <memchr>
  4053f6:	2800      	cmp	r0, #0
  4053f8:	d1e1      	bne.n	4053be <two_way_long_needle+0x12a>
  4053fa:	2f00      	cmp	r7, #0
  4053fc:	d0df      	beq.n	4053be <two_way_long_needle+0x12a>
  4053fe:	19eb      	adds	r3, r5, r7
  405400:	aa04      	add	r2, sp, #16
  405402:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  405406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40540a:	bba3      	cbnz	r3, 405476 <two_way_long_needle+0x1e2>
  40540c:	1e61      	subs	r1, r4, #1
  40540e:	458b      	cmp	fp, r1
  405410:	d215      	bcs.n	40543e <two_way_long_needle+0x1aa>
  405412:	eb0a 020b 	add.w	r2, sl, fp
  405416:	f816 300b 	ldrb.w	r3, [r6, fp]
  40541a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40541e:	459e      	cmp	lr, r3
  405420:	442a      	add	r2, r5
  405422:	eb06 000b 	add.w	r0, r6, fp
  405426:	465b      	mov	r3, fp
  405428:	d006      	beq.n	405438 <two_way_long_needle+0x1a4>
  40542a:	e027      	b.n	40547c <two_way_long_needle+0x1e8>
  40542c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  405430:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  405434:	45f4      	cmp	ip, lr
  405436:	d121      	bne.n	40547c <two_way_long_needle+0x1e8>
  405438:	3301      	adds	r3, #1
  40543a:	428b      	cmp	r3, r1
  40543c:	d3f6      	bcc.n	40542c <two_way_long_needle+0x198>
  40543e:	f1b8 3fff 	cmp.w	r8, #4294967295
  405442:	d011      	beq.n	405468 <two_way_long_needle+0x1d4>
  405444:	eb0a 0208 	add.w	r2, sl, r8
  405448:	f899 1000 	ldrb.w	r1, [r9]
  40544c:	5cab      	ldrb	r3, [r5, r2]
  40544e:	4299      	cmp	r1, r3
  405450:	442a      	add	r2, r5
  405452:	d10f      	bne.n	405474 <two_way_long_needle+0x1e0>
  405454:	464b      	mov	r3, r9
  405456:	e005      	b.n	405464 <two_way_long_needle+0x1d0>
  405458:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40545c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  405460:	4288      	cmp	r0, r1
  405462:	d107      	bne.n	405474 <two_way_long_needle+0x1e0>
  405464:	42b3      	cmp	r3, r6
  405466:	d1f7      	bne.n	405458 <two_way_long_needle+0x1c4>
  405468:	eb05 000a 	add.w	r0, r5, sl
  40546c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  405470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405474:	9b03      	ldr	r3, [sp, #12]
  405476:	449a      	add	sl, r3
  405478:	4638      	mov	r0, r7
  40547a:	e7b5      	b.n	4053e8 <two_way_long_needle+0x154>
  40547c:	f1cb 0201 	rsb	r2, fp, #1
  405480:	4492      	add	sl, r2
  405482:	449a      	add	sl, r3
  405484:	4638      	mov	r0, r7
  405486:	e7af      	b.n	4053e8 <two_way_long_needle+0x154>
  405488:	4649      	mov	r1, r9
  40548a:	e78b      	b.n	4053a4 <two_way_long_needle+0x110>
  40548c:	eb05 0008 	add.w	r0, r5, r8
  405490:	e796      	b.n	4053c0 <two_way_long_needle+0x12c>
  405492:	bf00      	nop

00405494 <strstr>:
  405494:	7803      	ldrb	r3, [r0, #0]
  405496:	2b00      	cmp	r3, #0
  405498:	f000 8104 	beq.w	4056a4 <strstr+0x210>
  40549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054a0:	f891 8000 	ldrb.w	r8, [r1]
  4054a4:	b085      	sub	sp, #20
  4054a6:	4644      	mov	r4, r8
  4054a8:	f1b8 0f00 	cmp.w	r8, #0
  4054ac:	d016      	beq.n	4054dc <strstr+0x48>
  4054ae:	4686      	mov	lr, r0
  4054b0:	f101 0c01 	add.w	ip, r1, #1
  4054b4:	2701      	movs	r7, #1
  4054b6:	e003      	b.n	4054c0 <strstr+0x2c>
  4054b8:	f812 4b01 	ldrb.w	r4, [r2], #1
  4054bc:	b16c      	cbz	r4, 4054da <strstr+0x46>
  4054be:	4694      	mov	ip, r2
  4054c0:	429c      	cmp	r4, r3
  4054c2:	bf14      	ite	ne
  4054c4:	2700      	movne	r7, #0
  4054c6:	f007 0701 	andeq.w	r7, r7, #1
  4054ca:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  4054ce:	4662      	mov	r2, ip
  4054d0:	2b00      	cmp	r3, #0
  4054d2:	d1f1      	bne.n	4054b8 <strstr+0x24>
  4054d4:	f89c 3000 	ldrb.w	r3, [ip]
  4054d8:	bb0b      	cbnz	r3, 40551e <strstr+0x8a>
  4054da:	b117      	cbz	r7, 4054e2 <strstr+0x4e>
  4054dc:	b005      	add	sp, #20
  4054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054e2:	460e      	mov	r6, r1
  4054e4:	4605      	mov	r5, r0
  4054e6:	4641      	mov	r1, r8
  4054e8:	3001      	adds	r0, #1
  4054ea:	ebc6 040c 	rsb	r4, r6, ip
  4054ee:	f002 f993 	bl	407818 <strchr>
  4054f2:	4607      	mov	r7, r0
  4054f4:	b198      	cbz	r0, 40551e <strstr+0x8a>
  4054f6:	2c01      	cmp	r4, #1
  4054f8:	d0f0      	beq.n	4054dc <strstr+0x48>
  4054fa:	1928      	adds	r0, r5, r4
  4054fc:	4287      	cmp	r7, r0
  4054fe:	bf94      	ite	ls
  405500:	ebc7 0b00 	rsbls	fp, r7, r0
  405504:	f04f 0b01 	movhi.w	fp, #1
  405508:	2c1f      	cmp	r4, #31
  40550a:	d90c      	bls.n	405526 <strstr+0x92>
  40550c:	4623      	mov	r3, r4
  40550e:	4632      	mov	r2, r6
  405510:	4659      	mov	r1, fp
  405512:	4638      	mov	r0, r7
  405514:	f7ff febe 	bl	405294 <two_way_long_needle>
  405518:	b005      	add	sp, #20
  40551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40551e:	2000      	movs	r0, #0
  405520:	b005      	add	sp, #20
  405522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405526:	aa03      	add	r2, sp, #12
  405528:	4621      	mov	r1, r4
  40552a:	4630      	mov	r0, r6
  40552c:	f7ff fe56 	bl	4051dc <critical_factorization>
  405530:	9903      	ldr	r1, [sp, #12]
  405532:	4680      	mov	r8, r0
  405534:	4602      	mov	r2, r0
  405536:	4431      	add	r1, r6
  405538:	4630      	mov	r0, r6
  40553a:	f001 fe09 	bl	407150 <memcmp>
  40553e:	2800      	cmp	r0, #0
  405540:	d158      	bne.n	4055f4 <strstr+0x160>
  405542:	f108 33ff 	add.w	r3, r8, #4294967295
  405546:	9301      	str	r3, [sp, #4]
  405548:	18f3      	adds	r3, r6, r3
  40554a:	4681      	mov	r9, r0
  40554c:	4605      	mov	r5, r0
  40554e:	9300      	str	r3, [sp, #0]
  405550:	4658      	mov	r0, fp
  405552:	46b2      	mov	sl, r6
  405554:	1966      	adds	r6, r4, r5
  405556:	1a32      	subs	r2, r6, r0
  405558:	2100      	movs	r1, #0
  40555a:	4438      	add	r0, r7
  40555c:	f001 fda8 	bl	4070b0 <memchr>
  405560:	2800      	cmp	r0, #0
  405562:	d1dc      	bne.n	40551e <strstr+0x8a>
  405564:	2e00      	cmp	r6, #0
  405566:	d0da      	beq.n	40551e <strstr+0x8a>
  405568:	45c8      	cmp	r8, r9
  40556a:	4643      	mov	r3, r8
  40556c:	bf38      	it	cc
  40556e:	464b      	movcc	r3, r9
  405570:	429c      	cmp	r4, r3
  405572:	d912      	bls.n	40559a <strstr+0x106>
  405574:	195a      	adds	r2, r3, r5
  405576:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40557a:	5cb8      	ldrb	r0, [r7, r2]
  40557c:	4288      	cmp	r0, r1
  40557e:	443a      	add	r2, r7
  405580:	eb0a 0e03 	add.w	lr, sl, r3
  405584:	d006      	beq.n	405594 <strstr+0x100>
  405586:	e02d      	b.n	4055e4 <strstr+0x150>
  405588:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40558c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  405590:	4288      	cmp	r0, r1
  405592:	d127      	bne.n	4055e4 <strstr+0x150>
  405594:	3301      	adds	r3, #1
  405596:	429c      	cmp	r4, r3
  405598:	d8f6      	bhi.n	405588 <strstr+0xf4>
  40559a:	9b01      	ldr	r3, [sp, #4]
  40559c:	45c8      	cmp	r8, r9
  40559e:	4619      	mov	r1, r3
  4055a0:	f240 8083 	bls.w	4056aa <strstr+0x216>
  4055a4:	18ea      	adds	r2, r5, r3
  4055a6:	9800      	ldr	r0, [sp, #0]
  4055a8:	7803      	ldrb	r3, [r0, #0]
  4055aa:	5cb8      	ldrb	r0, [r7, r2]
  4055ac:	4283      	cmp	r3, r0
  4055ae:	443a      	add	r2, r7
  4055b0:	d17b      	bne.n	4056aa <strstr+0x216>
  4055b2:	9b00      	ldr	r3, [sp, #0]
  4055b4:	eb0a 0b09 	add.w	fp, sl, r9
  4055b8:	e006      	b.n	4055c8 <strstr+0x134>
  4055ba:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  4055be:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4055c2:	45f4      	cmp	ip, lr
  4055c4:	d104      	bne.n	4055d0 <strstr+0x13c>
  4055c6:	4601      	mov	r1, r0
  4055c8:	455b      	cmp	r3, fp
  4055ca:	f101 30ff 	add.w	r0, r1, #4294967295
  4055ce:	d1f4      	bne.n	4055ba <strstr+0x126>
  4055d0:	f109 0901 	add.w	r9, r9, #1
  4055d4:	4589      	cmp	r9, r1
  4055d6:	d857      	bhi.n	405688 <strstr+0x1f4>
  4055d8:	9b03      	ldr	r3, [sp, #12]
  4055da:	4630      	mov	r0, r6
  4055dc:	441d      	add	r5, r3
  4055de:	ebc3 0904 	rsb	r9, r3, r4
  4055e2:	e7b7      	b.n	405554 <strstr+0xc0>
  4055e4:	f1c8 0201 	rsb	r2, r8, #1
  4055e8:	4415      	add	r5, r2
  4055ea:	441d      	add	r5, r3
  4055ec:	f04f 0900 	mov.w	r9, #0
  4055f0:	4630      	mov	r0, r6
  4055f2:	e7af      	b.n	405554 <strstr+0xc0>
  4055f4:	ebc8 0304 	rsb	r3, r8, r4
  4055f8:	4543      	cmp	r3, r8
  4055fa:	bf38      	it	cc
  4055fc:	4643      	movcc	r3, r8
  4055fe:	3301      	adds	r3, #1
  405600:	f108 39ff 	add.w	r9, r8, #4294967295
  405604:	9303      	str	r3, [sp, #12]
  405606:	eb06 0309 	add.w	r3, r6, r9
  40560a:	4658      	mov	r0, fp
  40560c:	2500      	movs	r5, #0
  40560e:	46bb      	mov	fp, r7
  405610:	469a      	mov	sl, r3
  405612:	1967      	adds	r7, r4, r5
  405614:	1a3a      	subs	r2, r7, r0
  405616:	2100      	movs	r1, #0
  405618:	4458      	add	r0, fp
  40561a:	f001 fd49 	bl	4070b0 <memchr>
  40561e:	2800      	cmp	r0, #0
  405620:	f47f af7d 	bne.w	40551e <strstr+0x8a>
  405624:	2f00      	cmp	r7, #0
  405626:	f43f af7a 	beq.w	40551e <strstr+0x8a>
  40562a:	4544      	cmp	r4, r8
  40562c:	d915      	bls.n	40565a <strstr+0x1c6>
  40562e:	eb08 0205 	add.w	r2, r8, r5
  405632:	f816 3008 	ldrb.w	r3, [r6, r8]
  405636:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40563a:	4298      	cmp	r0, r3
  40563c:	445a      	add	r2, fp
  40563e:	eb06 0108 	add.w	r1, r6, r8
  405642:	4643      	mov	r3, r8
  405644:	d006      	beq.n	405654 <strstr+0x1c0>
  405646:	e023      	b.n	405690 <strstr+0x1fc>
  405648:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40564c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  405650:	4586      	cmp	lr, r0
  405652:	d11d      	bne.n	405690 <strstr+0x1fc>
  405654:	3301      	adds	r3, #1
  405656:	429c      	cmp	r4, r3
  405658:	d8f6      	bhi.n	405648 <strstr+0x1b4>
  40565a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40565e:	d012      	beq.n	405686 <strstr+0x1f2>
  405660:	eb05 0209 	add.w	r2, r5, r9
  405664:	f89a 1000 	ldrb.w	r1, [sl]
  405668:	f81b 3002 	ldrb.w	r3, [fp, r2]
  40566c:	4299      	cmp	r1, r3
  40566e:	445a      	add	r2, fp
  405670:	d114      	bne.n	40569c <strstr+0x208>
  405672:	4653      	mov	r3, sl
  405674:	e005      	b.n	405682 <strstr+0x1ee>
  405676:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40567a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40567e:	4288      	cmp	r0, r1
  405680:	d10c      	bne.n	40569c <strstr+0x208>
  405682:	42b3      	cmp	r3, r6
  405684:	d1f7      	bne.n	405676 <strstr+0x1e2>
  405686:	465f      	mov	r7, fp
  405688:	1978      	adds	r0, r7, r5
  40568a:	b005      	add	sp, #20
  40568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405690:	f1c8 0201 	rsb	r2, r8, #1
  405694:	4415      	add	r5, r2
  405696:	441d      	add	r5, r3
  405698:	4638      	mov	r0, r7
  40569a:	e7ba      	b.n	405612 <strstr+0x17e>
  40569c:	9b03      	ldr	r3, [sp, #12]
  40569e:	4638      	mov	r0, r7
  4056a0:	441d      	add	r5, r3
  4056a2:	e7b6      	b.n	405612 <strstr+0x17e>
  4056a4:	780b      	ldrb	r3, [r1, #0]
  4056a6:	b913      	cbnz	r3, 4056ae <strstr+0x21a>
  4056a8:	4770      	bx	lr
  4056aa:	4641      	mov	r1, r8
  4056ac:	e790      	b.n	4055d0 <strstr+0x13c>
  4056ae:	2000      	movs	r0, #0
  4056b0:	4770      	bx	lr
  4056b2:	bf00      	nop

004056b4 <__sprint_r.part.0>:
  4056b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4056b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4056ba:	049c      	lsls	r4, r3, #18
  4056bc:	4692      	mov	sl, r2
  4056be:	d52c      	bpl.n	40571a <__sprint_r.part.0+0x66>
  4056c0:	6893      	ldr	r3, [r2, #8]
  4056c2:	6812      	ldr	r2, [r2, #0]
  4056c4:	b33b      	cbz	r3, 405716 <__sprint_r.part.0+0x62>
  4056c6:	460f      	mov	r7, r1
  4056c8:	4680      	mov	r8, r0
  4056ca:	f102 0908 	add.w	r9, r2, #8
  4056ce:	e919 0060 	ldmdb	r9, {r5, r6}
  4056d2:	08b6      	lsrs	r6, r6, #2
  4056d4:	d017      	beq.n	405706 <__sprint_r.part.0+0x52>
  4056d6:	3d04      	subs	r5, #4
  4056d8:	2400      	movs	r4, #0
  4056da:	e001      	b.n	4056e0 <__sprint_r.part.0+0x2c>
  4056dc:	42a6      	cmp	r6, r4
  4056de:	d010      	beq.n	405702 <__sprint_r.part.0+0x4e>
  4056e0:	463a      	mov	r2, r7
  4056e2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4056e6:	4640      	mov	r0, r8
  4056e8:	f001 f96a 	bl	4069c0 <_fputwc_r>
  4056ec:	1c43      	adds	r3, r0, #1
  4056ee:	f104 0401 	add.w	r4, r4, #1
  4056f2:	d1f3      	bne.n	4056dc <__sprint_r.part.0+0x28>
  4056f4:	2300      	movs	r3, #0
  4056f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4056fa:	f8ca 3004 	str.w	r3, [sl, #4]
  4056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405702:	f8da 3008 	ldr.w	r3, [sl, #8]
  405706:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40570a:	f8ca 3008 	str.w	r3, [sl, #8]
  40570e:	f109 0908 	add.w	r9, r9, #8
  405712:	2b00      	cmp	r3, #0
  405714:	d1db      	bne.n	4056ce <__sprint_r.part.0+0x1a>
  405716:	2000      	movs	r0, #0
  405718:	e7ec      	b.n	4056f4 <__sprint_r.part.0+0x40>
  40571a:	f001 fa99 	bl	406c50 <__sfvwrite_r>
  40571e:	2300      	movs	r3, #0
  405720:	f8ca 3008 	str.w	r3, [sl, #8]
  405724:	f8ca 3004 	str.w	r3, [sl, #4]
  405728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040572c <_vfiprintf_r>:
  40572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405730:	b0ab      	sub	sp, #172	; 0xac
  405732:	461c      	mov	r4, r3
  405734:	9100      	str	r1, [sp, #0]
  405736:	4690      	mov	r8, r2
  405738:	9304      	str	r3, [sp, #16]
  40573a:	9005      	str	r0, [sp, #20]
  40573c:	b118      	cbz	r0, 405746 <_vfiprintf_r+0x1a>
  40573e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405740:	2b00      	cmp	r3, #0
  405742:	f000 80de 	beq.w	405902 <_vfiprintf_r+0x1d6>
  405746:	9800      	ldr	r0, [sp, #0]
  405748:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  40574c:	b28a      	uxth	r2, r1
  40574e:	0495      	lsls	r5, r2, #18
  405750:	d407      	bmi.n	405762 <_vfiprintf_r+0x36>
  405752:	6e43      	ldr	r3, [r0, #100]	; 0x64
  405754:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  405758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40575c:	8182      	strh	r2, [r0, #12]
  40575e:	6643      	str	r3, [r0, #100]	; 0x64
  405760:	b292      	uxth	r2, r2
  405762:	0711      	lsls	r1, r2, #28
  405764:	f140 80b1 	bpl.w	4058ca <_vfiprintf_r+0x19e>
  405768:	9b00      	ldr	r3, [sp, #0]
  40576a:	691b      	ldr	r3, [r3, #16]
  40576c:	2b00      	cmp	r3, #0
  40576e:	f000 80ac 	beq.w	4058ca <_vfiprintf_r+0x19e>
  405772:	f002 021a 	and.w	r2, r2, #26
  405776:	2a0a      	cmp	r2, #10
  405778:	f000 80b5 	beq.w	4058e6 <_vfiprintf_r+0x1ba>
  40577c:	2300      	movs	r3, #0
  40577e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  405782:	9302      	str	r3, [sp, #8]
  405784:	930f      	str	r3, [sp, #60]	; 0x3c
  405786:	930e      	str	r3, [sp, #56]	; 0x38
  405788:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40578c:	46da      	mov	sl, fp
  40578e:	f898 3000 	ldrb.w	r3, [r8]
  405792:	4644      	mov	r4, r8
  405794:	b1fb      	cbz	r3, 4057d6 <_vfiprintf_r+0xaa>
  405796:	2b25      	cmp	r3, #37	; 0x25
  405798:	d102      	bne.n	4057a0 <_vfiprintf_r+0x74>
  40579a:	e01c      	b.n	4057d6 <_vfiprintf_r+0xaa>
  40579c:	2b25      	cmp	r3, #37	; 0x25
  40579e:	d003      	beq.n	4057a8 <_vfiprintf_r+0x7c>
  4057a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4057a4:	2b00      	cmp	r3, #0
  4057a6:	d1f9      	bne.n	40579c <_vfiprintf_r+0x70>
  4057a8:	ebc8 0504 	rsb	r5, r8, r4
  4057ac:	b19d      	cbz	r5, 4057d6 <_vfiprintf_r+0xaa>
  4057ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4057b2:	f8ca 8000 	str.w	r8, [sl]
  4057b6:	3301      	adds	r3, #1
  4057b8:	442a      	add	r2, r5
  4057ba:	2b07      	cmp	r3, #7
  4057bc:	f8ca 5004 	str.w	r5, [sl, #4]
  4057c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4057c2:	930e      	str	r3, [sp, #56]	; 0x38
  4057c4:	dd7b      	ble.n	4058be <_vfiprintf_r+0x192>
  4057c6:	2a00      	cmp	r2, #0
  4057c8:	f040 8528 	bne.w	40621c <_vfiprintf_r+0xaf0>
  4057cc:	9b02      	ldr	r3, [sp, #8]
  4057ce:	920e      	str	r2, [sp, #56]	; 0x38
  4057d0:	442b      	add	r3, r5
  4057d2:	46da      	mov	sl, fp
  4057d4:	9302      	str	r3, [sp, #8]
  4057d6:	7823      	ldrb	r3, [r4, #0]
  4057d8:	2b00      	cmp	r3, #0
  4057da:	f000 843e 	beq.w	40605a <_vfiprintf_r+0x92e>
  4057de:	2100      	movs	r1, #0
  4057e0:	f04f 0300 	mov.w	r3, #0
  4057e4:	f04f 32ff 	mov.w	r2, #4294967295
  4057e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4057ec:	f104 0801 	add.w	r8, r4, #1
  4057f0:	7863      	ldrb	r3, [r4, #1]
  4057f2:	9201      	str	r2, [sp, #4]
  4057f4:	4608      	mov	r0, r1
  4057f6:	460e      	mov	r6, r1
  4057f8:	460c      	mov	r4, r1
  4057fa:	f108 0801 	add.w	r8, r8, #1
  4057fe:	f1a3 0220 	sub.w	r2, r3, #32
  405802:	2a58      	cmp	r2, #88	; 0x58
  405804:	f200 8393 	bhi.w	405f2e <_vfiprintf_r+0x802>
  405808:	e8df f012 	tbh	[pc, r2, lsl #1]
  40580c:	03910346 	.word	0x03910346
  405810:	034e0391 	.word	0x034e0391
  405814:	03910391 	.word	0x03910391
  405818:	03910391 	.word	0x03910391
  40581c:	03910391 	.word	0x03910391
  405820:	02670289 	.word	0x02670289
  405824:	00800391 	.word	0x00800391
  405828:	0391026c 	.word	0x0391026c
  40582c:	025901c6 	.word	0x025901c6
  405830:	02590259 	.word	0x02590259
  405834:	02590259 	.word	0x02590259
  405838:	02590259 	.word	0x02590259
  40583c:	02590259 	.word	0x02590259
  405840:	03910391 	.word	0x03910391
  405844:	03910391 	.word	0x03910391
  405848:	03910391 	.word	0x03910391
  40584c:	03910391 	.word	0x03910391
  405850:	03910391 	.word	0x03910391
  405854:	039101cb 	.word	0x039101cb
  405858:	03910391 	.word	0x03910391
  40585c:	03910391 	.word	0x03910391
  405860:	03910391 	.word	0x03910391
  405864:	03910391 	.word	0x03910391
  405868:	02140391 	.word	0x02140391
  40586c:	03910391 	.word	0x03910391
  405870:	03910391 	.word	0x03910391
  405874:	02ee0391 	.word	0x02ee0391
  405878:	03910391 	.word	0x03910391
  40587c:	03910311 	.word	0x03910311
  405880:	03910391 	.word	0x03910391
  405884:	03910391 	.word	0x03910391
  405888:	03910391 	.word	0x03910391
  40588c:	03910391 	.word	0x03910391
  405890:	03340391 	.word	0x03340391
  405894:	0391038a 	.word	0x0391038a
  405898:	03910391 	.word	0x03910391
  40589c:	038a0367 	.word	0x038a0367
  4058a0:	03910391 	.word	0x03910391
  4058a4:	0391036c 	.word	0x0391036c
  4058a8:	02950379 	.word	0x02950379
  4058ac:	02e90085 	.word	0x02e90085
  4058b0:	029b0391 	.word	0x029b0391
  4058b4:	02ba0391 	.word	0x02ba0391
  4058b8:	03910391 	.word	0x03910391
  4058bc:	0353      	.short	0x0353
  4058be:	f10a 0a08 	add.w	sl, sl, #8
  4058c2:	9b02      	ldr	r3, [sp, #8]
  4058c4:	442b      	add	r3, r5
  4058c6:	9302      	str	r3, [sp, #8]
  4058c8:	e785      	b.n	4057d6 <_vfiprintf_r+0xaa>
  4058ca:	9900      	ldr	r1, [sp, #0]
  4058cc:	9805      	ldr	r0, [sp, #20]
  4058ce:	f000 fe61 	bl	406594 <__swsetup_r>
  4058d2:	2800      	cmp	r0, #0
  4058d4:	f040 8558 	bne.w	406388 <_vfiprintf_r+0xc5c>
  4058d8:	9b00      	ldr	r3, [sp, #0]
  4058da:	899a      	ldrh	r2, [r3, #12]
  4058dc:	f002 021a 	and.w	r2, r2, #26
  4058e0:	2a0a      	cmp	r2, #10
  4058e2:	f47f af4b 	bne.w	40577c <_vfiprintf_r+0x50>
  4058e6:	9900      	ldr	r1, [sp, #0]
  4058e8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4058ec:	2b00      	cmp	r3, #0
  4058ee:	f6ff af45 	blt.w	40577c <_vfiprintf_r+0x50>
  4058f2:	4623      	mov	r3, r4
  4058f4:	4642      	mov	r2, r8
  4058f6:	9805      	ldr	r0, [sp, #20]
  4058f8:	f000 fe16 	bl	406528 <__sbprintf>
  4058fc:	b02b      	add	sp, #172	; 0xac
  4058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405902:	f000 fff3 	bl	4068ec <__sinit>
  405906:	e71e      	b.n	405746 <_vfiprintf_r+0x1a>
  405908:	4264      	negs	r4, r4
  40590a:	9304      	str	r3, [sp, #16]
  40590c:	f046 0604 	orr.w	r6, r6, #4
  405910:	f898 3000 	ldrb.w	r3, [r8]
  405914:	e771      	b.n	4057fa <_vfiprintf_r+0xce>
  405916:	2130      	movs	r1, #48	; 0x30
  405918:	9804      	ldr	r0, [sp, #16]
  40591a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40591e:	9901      	ldr	r1, [sp, #4]
  405920:	9406      	str	r4, [sp, #24]
  405922:	f04f 0300 	mov.w	r3, #0
  405926:	2278      	movs	r2, #120	; 0x78
  405928:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40592c:	2900      	cmp	r1, #0
  40592e:	4603      	mov	r3, r0
  405930:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  405934:	6804      	ldr	r4, [r0, #0]
  405936:	f103 0304 	add.w	r3, r3, #4
  40593a:	f04f 0500 	mov.w	r5, #0
  40593e:	f046 0202 	orr.w	r2, r6, #2
  405942:	f2c0 8525 	blt.w	406390 <_vfiprintf_r+0xc64>
  405946:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40594a:	ea54 0205 	orrs.w	r2, r4, r5
  40594e:	f046 0602 	orr.w	r6, r6, #2
  405952:	9304      	str	r3, [sp, #16]
  405954:	f040 84bf 	bne.w	4062d6 <_vfiprintf_r+0xbaa>
  405958:	48b3      	ldr	r0, [pc, #716]	; (405c28 <_vfiprintf_r+0x4fc>)
  40595a:	9b01      	ldr	r3, [sp, #4]
  40595c:	2b00      	cmp	r3, #0
  40595e:	f040 841c 	bne.w	40619a <_vfiprintf_r+0xa6e>
  405962:	4699      	mov	r9, r3
  405964:	2300      	movs	r3, #0
  405966:	9301      	str	r3, [sp, #4]
  405968:	9303      	str	r3, [sp, #12]
  40596a:	465f      	mov	r7, fp
  40596c:	9b01      	ldr	r3, [sp, #4]
  40596e:	9a03      	ldr	r2, [sp, #12]
  405970:	4293      	cmp	r3, r2
  405972:	bfb8      	it	lt
  405974:	4613      	movlt	r3, r2
  405976:	461d      	mov	r5, r3
  405978:	f1b9 0f00 	cmp.w	r9, #0
  40597c:	d000      	beq.n	405980 <_vfiprintf_r+0x254>
  40597e:	3501      	adds	r5, #1
  405980:	f016 0302 	ands.w	r3, r6, #2
  405984:	9307      	str	r3, [sp, #28]
  405986:	bf18      	it	ne
  405988:	3502      	addne	r5, #2
  40598a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40598e:	9308      	str	r3, [sp, #32]
  405990:	f040 82f1 	bne.w	405f76 <_vfiprintf_r+0x84a>
  405994:	9b06      	ldr	r3, [sp, #24]
  405996:	1b5c      	subs	r4, r3, r5
  405998:	2c00      	cmp	r4, #0
  40599a:	f340 82ec 	ble.w	405f76 <_vfiprintf_r+0x84a>
  40599e:	2c10      	cmp	r4, #16
  4059a0:	f340 8556 	ble.w	406450 <_vfiprintf_r+0xd24>
  4059a4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 405c2c <_vfiprintf_r+0x500>
  4059a8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4059ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4059ae:	46d4      	mov	ip, sl
  4059b0:	2310      	movs	r3, #16
  4059b2:	46c2      	mov	sl, r8
  4059b4:	4670      	mov	r0, lr
  4059b6:	46a8      	mov	r8, r5
  4059b8:	464d      	mov	r5, r9
  4059ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4059be:	e007      	b.n	4059d0 <_vfiprintf_r+0x2a4>
  4059c0:	f100 0e02 	add.w	lr, r0, #2
  4059c4:	f10c 0c08 	add.w	ip, ip, #8
  4059c8:	4608      	mov	r0, r1
  4059ca:	3c10      	subs	r4, #16
  4059cc:	2c10      	cmp	r4, #16
  4059ce:	dd13      	ble.n	4059f8 <_vfiprintf_r+0x2cc>
  4059d0:	1c41      	adds	r1, r0, #1
  4059d2:	3210      	adds	r2, #16
  4059d4:	2907      	cmp	r1, #7
  4059d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4059d8:	f8cc 5000 	str.w	r5, [ip]
  4059dc:	f8cc 3004 	str.w	r3, [ip, #4]
  4059e0:	910e      	str	r1, [sp, #56]	; 0x38
  4059e2:	dded      	ble.n	4059c0 <_vfiprintf_r+0x294>
  4059e4:	2a00      	cmp	r2, #0
  4059e6:	f040 82b7 	bne.w	405f58 <_vfiprintf_r+0x82c>
  4059ea:	3c10      	subs	r4, #16
  4059ec:	2c10      	cmp	r4, #16
  4059ee:	4610      	mov	r0, r2
  4059f0:	f04f 0e01 	mov.w	lr, #1
  4059f4:	46dc      	mov	ip, fp
  4059f6:	dceb      	bgt.n	4059d0 <_vfiprintf_r+0x2a4>
  4059f8:	46a9      	mov	r9, r5
  4059fa:	4670      	mov	r0, lr
  4059fc:	4645      	mov	r5, r8
  4059fe:	46d0      	mov	r8, sl
  405a00:	46e2      	mov	sl, ip
  405a02:	4422      	add	r2, r4
  405a04:	2807      	cmp	r0, #7
  405a06:	920f      	str	r2, [sp, #60]	; 0x3c
  405a08:	f8ca 9000 	str.w	r9, [sl]
  405a0c:	f8ca 4004 	str.w	r4, [sl, #4]
  405a10:	900e      	str	r0, [sp, #56]	; 0x38
  405a12:	f300 8375 	bgt.w	406100 <_vfiprintf_r+0x9d4>
  405a16:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405a1a:	f10a 0a08 	add.w	sl, sl, #8
  405a1e:	f100 0e01 	add.w	lr, r0, #1
  405a22:	2b00      	cmp	r3, #0
  405a24:	f040 82b0 	bne.w	405f88 <_vfiprintf_r+0x85c>
  405a28:	9b07      	ldr	r3, [sp, #28]
  405a2a:	2b00      	cmp	r3, #0
  405a2c:	f000 82c3 	beq.w	405fb6 <_vfiprintf_r+0x88a>
  405a30:	3202      	adds	r2, #2
  405a32:	a90c      	add	r1, sp, #48	; 0x30
  405a34:	2302      	movs	r3, #2
  405a36:	f1be 0f07 	cmp.w	lr, #7
  405a3a:	920f      	str	r2, [sp, #60]	; 0x3c
  405a3c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405a40:	e88a 000a 	stmia.w	sl, {r1, r3}
  405a44:	f340 8378 	ble.w	406138 <_vfiprintf_r+0xa0c>
  405a48:	2a00      	cmp	r2, #0
  405a4a:	f040 840a 	bne.w	406262 <_vfiprintf_r+0xb36>
  405a4e:	9b08      	ldr	r3, [sp, #32]
  405a50:	2b80      	cmp	r3, #128	; 0x80
  405a52:	f04f 0e01 	mov.w	lr, #1
  405a56:	4610      	mov	r0, r2
  405a58:	46da      	mov	sl, fp
  405a5a:	f040 82b0 	bne.w	405fbe <_vfiprintf_r+0x892>
  405a5e:	9b06      	ldr	r3, [sp, #24]
  405a60:	1b5c      	subs	r4, r3, r5
  405a62:	2c00      	cmp	r4, #0
  405a64:	f340 82ab 	ble.w	405fbe <_vfiprintf_r+0x892>
  405a68:	2c10      	cmp	r4, #16
  405a6a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 405c30 <_vfiprintf_r+0x504>
  405a6e:	f340 850b 	ble.w	406488 <_vfiprintf_r+0xd5c>
  405a72:	46d6      	mov	lr, sl
  405a74:	2310      	movs	r3, #16
  405a76:	46c2      	mov	sl, r8
  405a78:	46a8      	mov	r8, r5
  405a7a:	464d      	mov	r5, r9
  405a7c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405a80:	e007      	b.n	405a92 <_vfiprintf_r+0x366>
  405a82:	f100 0c02 	add.w	ip, r0, #2
  405a86:	f10e 0e08 	add.w	lr, lr, #8
  405a8a:	4608      	mov	r0, r1
  405a8c:	3c10      	subs	r4, #16
  405a8e:	2c10      	cmp	r4, #16
  405a90:	dd13      	ble.n	405aba <_vfiprintf_r+0x38e>
  405a92:	1c41      	adds	r1, r0, #1
  405a94:	3210      	adds	r2, #16
  405a96:	2907      	cmp	r1, #7
  405a98:	920f      	str	r2, [sp, #60]	; 0x3c
  405a9a:	f8ce 5000 	str.w	r5, [lr]
  405a9e:	f8ce 3004 	str.w	r3, [lr, #4]
  405aa2:	910e      	str	r1, [sp, #56]	; 0x38
  405aa4:	dded      	ble.n	405a82 <_vfiprintf_r+0x356>
  405aa6:	2a00      	cmp	r2, #0
  405aa8:	f040 8315 	bne.w	4060d6 <_vfiprintf_r+0x9aa>
  405aac:	3c10      	subs	r4, #16
  405aae:	2c10      	cmp	r4, #16
  405ab0:	f04f 0c01 	mov.w	ip, #1
  405ab4:	4610      	mov	r0, r2
  405ab6:	46de      	mov	lr, fp
  405ab8:	dceb      	bgt.n	405a92 <_vfiprintf_r+0x366>
  405aba:	46a9      	mov	r9, r5
  405abc:	4645      	mov	r5, r8
  405abe:	46d0      	mov	r8, sl
  405ac0:	46f2      	mov	sl, lr
  405ac2:	4422      	add	r2, r4
  405ac4:	f1bc 0f07 	cmp.w	ip, #7
  405ac8:	920f      	str	r2, [sp, #60]	; 0x3c
  405aca:	f8ca 9000 	str.w	r9, [sl]
  405ace:	f8ca 4004 	str.w	r4, [sl, #4]
  405ad2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  405ad6:	f300 83d2 	bgt.w	40627e <_vfiprintf_r+0xb52>
  405ada:	9b01      	ldr	r3, [sp, #4]
  405adc:	9903      	ldr	r1, [sp, #12]
  405ade:	1a5c      	subs	r4, r3, r1
  405ae0:	2c00      	cmp	r4, #0
  405ae2:	f10a 0a08 	add.w	sl, sl, #8
  405ae6:	f10c 0e01 	add.w	lr, ip, #1
  405aea:	4660      	mov	r0, ip
  405aec:	f300 826d 	bgt.w	405fca <_vfiprintf_r+0x89e>
  405af0:	9903      	ldr	r1, [sp, #12]
  405af2:	f8ca 7000 	str.w	r7, [sl]
  405af6:	440a      	add	r2, r1
  405af8:	f1be 0f07 	cmp.w	lr, #7
  405afc:	920f      	str	r2, [sp, #60]	; 0x3c
  405afe:	f8ca 1004 	str.w	r1, [sl, #4]
  405b02:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405b06:	f340 82ce 	ble.w	4060a6 <_vfiprintf_r+0x97a>
  405b0a:	2a00      	cmp	r2, #0
  405b0c:	f040 833a 	bne.w	406184 <_vfiprintf_r+0xa58>
  405b10:	0770      	lsls	r0, r6, #29
  405b12:	920e      	str	r2, [sp, #56]	; 0x38
  405b14:	d538      	bpl.n	405b88 <_vfiprintf_r+0x45c>
  405b16:	9b06      	ldr	r3, [sp, #24]
  405b18:	1b5c      	subs	r4, r3, r5
  405b1a:	2c00      	cmp	r4, #0
  405b1c:	dd34      	ble.n	405b88 <_vfiprintf_r+0x45c>
  405b1e:	46da      	mov	sl, fp
  405b20:	2c10      	cmp	r4, #16
  405b22:	f340 84ab 	ble.w	40647c <_vfiprintf_r+0xd50>
  405b26:	f8df 9104 	ldr.w	r9, [pc, #260]	; 405c2c <_vfiprintf_r+0x500>
  405b2a:	990e      	ldr	r1, [sp, #56]	; 0x38
  405b2c:	464f      	mov	r7, r9
  405b2e:	2610      	movs	r6, #16
  405b30:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405b34:	e006      	b.n	405b44 <_vfiprintf_r+0x418>
  405b36:	1c88      	adds	r0, r1, #2
  405b38:	f10a 0a08 	add.w	sl, sl, #8
  405b3c:	4619      	mov	r1, r3
  405b3e:	3c10      	subs	r4, #16
  405b40:	2c10      	cmp	r4, #16
  405b42:	dd13      	ble.n	405b6c <_vfiprintf_r+0x440>
  405b44:	1c4b      	adds	r3, r1, #1
  405b46:	3210      	adds	r2, #16
  405b48:	2b07      	cmp	r3, #7
  405b4a:	920f      	str	r2, [sp, #60]	; 0x3c
  405b4c:	f8ca 7000 	str.w	r7, [sl]
  405b50:	f8ca 6004 	str.w	r6, [sl, #4]
  405b54:	930e      	str	r3, [sp, #56]	; 0x38
  405b56:	ddee      	ble.n	405b36 <_vfiprintf_r+0x40a>
  405b58:	2a00      	cmp	r2, #0
  405b5a:	f040 828e 	bne.w	40607a <_vfiprintf_r+0x94e>
  405b5e:	3c10      	subs	r4, #16
  405b60:	2c10      	cmp	r4, #16
  405b62:	f04f 0001 	mov.w	r0, #1
  405b66:	4611      	mov	r1, r2
  405b68:	46da      	mov	sl, fp
  405b6a:	dceb      	bgt.n	405b44 <_vfiprintf_r+0x418>
  405b6c:	46b9      	mov	r9, r7
  405b6e:	4422      	add	r2, r4
  405b70:	2807      	cmp	r0, #7
  405b72:	920f      	str	r2, [sp, #60]	; 0x3c
  405b74:	f8ca 9000 	str.w	r9, [sl]
  405b78:	f8ca 4004 	str.w	r4, [sl, #4]
  405b7c:	900e      	str	r0, [sp, #56]	; 0x38
  405b7e:	f340 829b 	ble.w	4060b8 <_vfiprintf_r+0x98c>
  405b82:	2a00      	cmp	r2, #0
  405b84:	f040 8425 	bne.w	4063d2 <_vfiprintf_r+0xca6>
  405b88:	9b02      	ldr	r3, [sp, #8]
  405b8a:	9a06      	ldr	r2, [sp, #24]
  405b8c:	42aa      	cmp	r2, r5
  405b8e:	bfac      	ite	ge
  405b90:	189b      	addge	r3, r3, r2
  405b92:	195b      	addlt	r3, r3, r5
  405b94:	9302      	str	r3, [sp, #8]
  405b96:	e299      	b.n	4060cc <_vfiprintf_r+0x9a0>
  405b98:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  405b9c:	f898 3000 	ldrb.w	r3, [r8]
  405ba0:	e62b      	b.n	4057fa <_vfiprintf_r+0xce>
  405ba2:	9406      	str	r4, [sp, #24]
  405ba4:	2900      	cmp	r1, #0
  405ba6:	f040 84af 	bne.w	406508 <_vfiprintf_r+0xddc>
  405baa:	f046 0610 	orr.w	r6, r6, #16
  405bae:	06b3      	lsls	r3, r6, #26
  405bb0:	f140 8312 	bpl.w	4061d8 <_vfiprintf_r+0xaac>
  405bb4:	9904      	ldr	r1, [sp, #16]
  405bb6:	3107      	adds	r1, #7
  405bb8:	f021 0107 	bic.w	r1, r1, #7
  405bbc:	e9d1 2300 	ldrd	r2, r3, [r1]
  405bc0:	3108      	adds	r1, #8
  405bc2:	9104      	str	r1, [sp, #16]
  405bc4:	4614      	mov	r4, r2
  405bc6:	461d      	mov	r5, r3
  405bc8:	2a00      	cmp	r2, #0
  405bca:	f173 0300 	sbcs.w	r3, r3, #0
  405bce:	f2c0 8386 	blt.w	4062de <_vfiprintf_r+0xbb2>
  405bd2:	9b01      	ldr	r3, [sp, #4]
  405bd4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405bd8:	2b00      	cmp	r3, #0
  405bda:	f2c0 831a 	blt.w	406212 <_vfiprintf_r+0xae6>
  405bde:	ea54 0305 	orrs.w	r3, r4, r5
  405be2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405be6:	f000 80ed 	beq.w	405dc4 <_vfiprintf_r+0x698>
  405bea:	2d00      	cmp	r5, #0
  405bec:	bf08      	it	eq
  405bee:	2c0a      	cmpeq	r4, #10
  405bf0:	f0c0 80ed 	bcc.w	405dce <_vfiprintf_r+0x6a2>
  405bf4:	465f      	mov	r7, fp
  405bf6:	4620      	mov	r0, r4
  405bf8:	4629      	mov	r1, r5
  405bfa:	220a      	movs	r2, #10
  405bfc:	2300      	movs	r3, #0
  405bfe:	f002 f80f 	bl	407c20 <__aeabi_uldivmod>
  405c02:	3230      	adds	r2, #48	; 0x30
  405c04:	f807 2d01 	strb.w	r2, [r7, #-1]!
  405c08:	4620      	mov	r0, r4
  405c0a:	4629      	mov	r1, r5
  405c0c:	2300      	movs	r3, #0
  405c0e:	220a      	movs	r2, #10
  405c10:	f002 f806 	bl	407c20 <__aeabi_uldivmod>
  405c14:	4604      	mov	r4, r0
  405c16:	460d      	mov	r5, r1
  405c18:	ea54 0305 	orrs.w	r3, r4, r5
  405c1c:	d1eb      	bne.n	405bf6 <_vfiprintf_r+0x4ca>
  405c1e:	ebc7 030b 	rsb	r3, r7, fp
  405c22:	9303      	str	r3, [sp, #12]
  405c24:	e6a2      	b.n	40596c <_vfiprintf_r+0x240>
  405c26:	bf00      	nop
  405c28:	004091d8 	.word	0x004091d8
  405c2c:	004091f4 	.word	0x004091f4
  405c30:	004091b4 	.word	0x004091b4
  405c34:	9406      	str	r4, [sp, #24]
  405c36:	2900      	cmp	r1, #0
  405c38:	f040 8462 	bne.w	406500 <_vfiprintf_r+0xdd4>
  405c3c:	f046 0610 	orr.w	r6, r6, #16
  405c40:	f016 0320 	ands.w	r3, r6, #32
  405c44:	f000 82ae 	beq.w	4061a4 <_vfiprintf_r+0xa78>
  405c48:	9b04      	ldr	r3, [sp, #16]
  405c4a:	3307      	adds	r3, #7
  405c4c:	f023 0307 	bic.w	r3, r3, #7
  405c50:	f04f 0200 	mov.w	r2, #0
  405c54:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405c58:	e9d3 4500 	ldrd	r4, r5, [r3]
  405c5c:	f103 0208 	add.w	r2, r3, #8
  405c60:	9b01      	ldr	r3, [sp, #4]
  405c62:	9204      	str	r2, [sp, #16]
  405c64:	2b00      	cmp	r3, #0
  405c66:	f2c0 8174 	blt.w	405f52 <_vfiprintf_r+0x826>
  405c6a:	ea54 0305 	orrs.w	r3, r4, r5
  405c6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405c72:	f040 816e 	bne.w	405f52 <_vfiprintf_r+0x826>
  405c76:	9b01      	ldr	r3, [sp, #4]
  405c78:	2b00      	cmp	r3, #0
  405c7a:	f000 8430 	beq.w	4064de <_vfiprintf_r+0xdb2>
  405c7e:	f04f 0900 	mov.w	r9, #0
  405c82:	2400      	movs	r4, #0
  405c84:	2500      	movs	r5, #0
  405c86:	465f      	mov	r7, fp
  405c88:	08e2      	lsrs	r2, r4, #3
  405c8a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405c8e:	08e9      	lsrs	r1, r5, #3
  405c90:	f004 0307 	and.w	r3, r4, #7
  405c94:	460d      	mov	r5, r1
  405c96:	4614      	mov	r4, r2
  405c98:	3330      	adds	r3, #48	; 0x30
  405c9a:	ea54 0205 	orrs.w	r2, r4, r5
  405c9e:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405ca2:	d1f1      	bne.n	405c88 <_vfiprintf_r+0x55c>
  405ca4:	07f4      	lsls	r4, r6, #31
  405ca6:	d5ba      	bpl.n	405c1e <_vfiprintf_r+0x4f2>
  405ca8:	2b30      	cmp	r3, #48	; 0x30
  405caa:	d0b8      	beq.n	405c1e <_vfiprintf_r+0x4f2>
  405cac:	2230      	movs	r2, #48	; 0x30
  405cae:	1e7b      	subs	r3, r7, #1
  405cb0:	f807 2c01 	strb.w	r2, [r7, #-1]
  405cb4:	ebc3 020b 	rsb	r2, r3, fp
  405cb8:	9203      	str	r2, [sp, #12]
  405cba:	461f      	mov	r7, r3
  405cbc:	e656      	b.n	40596c <_vfiprintf_r+0x240>
  405cbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405cc2:	2400      	movs	r4, #0
  405cc4:	f818 3b01 	ldrb.w	r3, [r8], #1
  405cc8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405ccc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  405cd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405cd4:	2a09      	cmp	r2, #9
  405cd6:	d9f5      	bls.n	405cc4 <_vfiprintf_r+0x598>
  405cd8:	e591      	b.n	4057fe <_vfiprintf_r+0xd2>
  405cda:	f898 3000 	ldrb.w	r3, [r8]
  405cde:	2101      	movs	r1, #1
  405ce0:	202b      	movs	r0, #43	; 0x2b
  405ce2:	e58a      	b.n	4057fa <_vfiprintf_r+0xce>
  405ce4:	f898 3000 	ldrb.w	r3, [r8]
  405ce8:	2b2a      	cmp	r3, #42	; 0x2a
  405cea:	f108 0501 	add.w	r5, r8, #1
  405cee:	f000 83dd 	beq.w	4064ac <_vfiprintf_r+0xd80>
  405cf2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405cf6:	2a09      	cmp	r2, #9
  405cf8:	46a8      	mov	r8, r5
  405cfa:	bf98      	it	ls
  405cfc:	2500      	movls	r5, #0
  405cfe:	f200 83ce 	bhi.w	40649e <_vfiprintf_r+0xd72>
  405d02:	f818 3b01 	ldrb.w	r3, [r8], #1
  405d06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  405d0a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405d0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405d12:	2a09      	cmp	r2, #9
  405d14:	d9f5      	bls.n	405d02 <_vfiprintf_r+0x5d6>
  405d16:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  405d1a:	9201      	str	r2, [sp, #4]
  405d1c:	e56f      	b.n	4057fe <_vfiprintf_r+0xd2>
  405d1e:	9a04      	ldr	r2, [sp, #16]
  405d20:	6814      	ldr	r4, [r2, #0]
  405d22:	4613      	mov	r3, r2
  405d24:	2c00      	cmp	r4, #0
  405d26:	f103 0304 	add.w	r3, r3, #4
  405d2a:	f6ff aded 	blt.w	405908 <_vfiprintf_r+0x1dc>
  405d2e:	9304      	str	r3, [sp, #16]
  405d30:	f898 3000 	ldrb.w	r3, [r8]
  405d34:	e561      	b.n	4057fa <_vfiprintf_r+0xce>
  405d36:	9406      	str	r4, [sp, #24]
  405d38:	2900      	cmp	r1, #0
  405d3a:	d081      	beq.n	405c40 <_vfiprintf_r+0x514>
  405d3c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405d40:	e77e      	b.n	405c40 <_vfiprintf_r+0x514>
  405d42:	9a04      	ldr	r2, [sp, #16]
  405d44:	9406      	str	r4, [sp, #24]
  405d46:	6817      	ldr	r7, [r2, #0]
  405d48:	f04f 0300 	mov.w	r3, #0
  405d4c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405d50:	1d14      	adds	r4, r2, #4
  405d52:	9b01      	ldr	r3, [sp, #4]
  405d54:	2f00      	cmp	r7, #0
  405d56:	f000 8386 	beq.w	406466 <_vfiprintf_r+0xd3a>
  405d5a:	2b00      	cmp	r3, #0
  405d5c:	f2c0 835f 	blt.w	40641e <_vfiprintf_r+0xcf2>
  405d60:	461a      	mov	r2, r3
  405d62:	2100      	movs	r1, #0
  405d64:	4638      	mov	r0, r7
  405d66:	f001 f9a3 	bl	4070b0 <memchr>
  405d6a:	2800      	cmp	r0, #0
  405d6c:	f000 838f 	beq.w	40648e <_vfiprintf_r+0xd62>
  405d70:	1bc3      	subs	r3, r0, r7
  405d72:	9303      	str	r3, [sp, #12]
  405d74:	2300      	movs	r3, #0
  405d76:	9404      	str	r4, [sp, #16]
  405d78:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405d7c:	9301      	str	r3, [sp, #4]
  405d7e:	e5f5      	b.n	40596c <_vfiprintf_r+0x240>
  405d80:	9406      	str	r4, [sp, #24]
  405d82:	2900      	cmp	r1, #0
  405d84:	f040 83b9 	bne.w	4064fa <_vfiprintf_r+0xdce>
  405d88:	f016 0920 	ands.w	r9, r6, #32
  405d8c:	d135      	bne.n	405dfa <_vfiprintf_r+0x6ce>
  405d8e:	f016 0310 	ands.w	r3, r6, #16
  405d92:	d103      	bne.n	405d9c <_vfiprintf_r+0x670>
  405d94:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  405d98:	f040 832a 	bne.w	4063f0 <_vfiprintf_r+0xcc4>
  405d9c:	9a04      	ldr	r2, [sp, #16]
  405d9e:	4613      	mov	r3, r2
  405da0:	6814      	ldr	r4, [r2, #0]
  405da2:	9a01      	ldr	r2, [sp, #4]
  405da4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405da8:	2a00      	cmp	r2, #0
  405daa:	f103 0304 	add.w	r3, r3, #4
  405dae:	f04f 0500 	mov.w	r5, #0
  405db2:	f2c0 8332 	blt.w	40641a <_vfiprintf_r+0xcee>
  405db6:	ea54 0205 	orrs.w	r2, r4, r5
  405dba:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405dbe:	9304      	str	r3, [sp, #16]
  405dc0:	f47f af13 	bne.w	405bea <_vfiprintf_r+0x4be>
  405dc4:	9b01      	ldr	r3, [sp, #4]
  405dc6:	2b00      	cmp	r3, #0
  405dc8:	f43f adcc 	beq.w	405964 <_vfiprintf_r+0x238>
  405dcc:	2400      	movs	r4, #0
  405dce:	af2a      	add	r7, sp, #168	; 0xa8
  405dd0:	3430      	adds	r4, #48	; 0x30
  405dd2:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405dd6:	ebc7 030b 	rsb	r3, r7, fp
  405dda:	9303      	str	r3, [sp, #12]
  405ddc:	e5c6      	b.n	40596c <_vfiprintf_r+0x240>
  405dde:	f046 0620 	orr.w	r6, r6, #32
  405de2:	f898 3000 	ldrb.w	r3, [r8]
  405de6:	e508      	b.n	4057fa <_vfiprintf_r+0xce>
  405de8:	9406      	str	r4, [sp, #24]
  405dea:	2900      	cmp	r1, #0
  405dec:	f040 836e 	bne.w	4064cc <_vfiprintf_r+0xda0>
  405df0:	f046 0610 	orr.w	r6, r6, #16
  405df4:	f016 0920 	ands.w	r9, r6, #32
  405df8:	d0c9      	beq.n	405d8e <_vfiprintf_r+0x662>
  405dfa:	9b04      	ldr	r3, [sp, #16]
  405dfc:	3307      	adds	r3, #7
  405dfe:	f023 0307 	bic.w	r3, r3, #7
  405e02:	f04f 0200 	mov.w	r2, #0
  405e06:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405e0a:	e9d3 4500 	ldrd	r4, r5, [r3]
  405e0e:	f103 0208 	add.w	r2, r3, #8
  405e12:	9b01      	ldr	r3, [sp, #4]
  405e14:	9204      	str	r2, [sp, #16]
  405e16:	2b00      	cmp	r3, #0
  405e18:	f2c0 81f9 	blt.w	40620e <_vfiprintf_r+0xae2>
  405e1c:	ea54 0305 	orrs.w	r3, r4, r5
  405e20:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405e24:	f04f 0900 	mov.w	r9, #0
  405e28:	f47f aedf 	bne.w	405bea <_vfiprintf_r+0x4be>
  405e2c:	e7ca      	b.n	405dc4 <_vfiprintf_r+0x698>
  405e2e:	9406      	str	r4, [sp, #24]
  405e30:	2900      	cmp	r1, #0
  405e32:	f040 8351 	bne.w	4064d8 <_vfiprintf_r+0xdac>
  405e36:	06b2      	lsls	r2, r6, #26
  405e38:	48ae      	ldr	r0, [pc, #696]	; (4060f4 <_vfiprintf_r+0x9c8>)
  405e3a:	d541      	bpl.n	405ec0 <_vfiprintf_r+0x794>
  405e3c:	9a04      	ldr	r2, [sp, #16]
  405e3e:	3207      	adds	r2, #7
  405e40:	f022 0207 	bic.w	r2, r2, #7
  405e44:	e9d2 4500 	ldrd	r4, r5, [r2]
  405e48:	f102 0108 	add.w	r1, r2, #8
  405e4c:	9104      	str	r1, [sp, #16]
  405e4e:	f016 0901 	ands.w	r9, r6, #1
  405e52:	f000 8177 	beq.w	406144 <_vfiprintf_r+0xa18>
  405e56:	ea54 0205 	orrs.w	r2, r4, r5
  405e5a:	f040 8226 	bne.w	4062aa <_vfiprintf_r+0xb7e>
  405e5e:	f04f 0300 	mov.w	r3, #0
  405e62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405e66:	9b01      	ldr	r3, [sp, #4]
  405e68:	2b00      	cmp	r3, #0
  405e6a:	f2c0 8196 	blt.w	40619a <_vfiprintf_r+0xa6e>
  405e6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405e72:	e572      	b.n	40595a <_vfiprintf_r+0x22e>
  405e74:	9a04      	ldr	r2, [sp, #16]
  405e76:	9406      	str	r4, [sp, #24]
  405e78:	6813      	ldr	r3, [r2, #0]
  405e7a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405e7e:	4613      	mov	r3, r2
  405e80:	f04f 0100 	mov.w	r1, #0
  405e84:	2501      	movs	r5, #1
  405e86:	3304      	adds	r3, #4
  405e88:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405e8c:	9304      	str	r3, [sp, #16]
  405e8e:	9503      	str	r5, [sp, #12]
  405e90:	af10      	add	r7, sp, #64	; 0x40
  405e92:	2300      	movs	r3, #0
  405e94:	9301      	str	r3, [sp, #4]
  405e96:	e573      	b.n	405980 <_vfiprintf_r+0x254>
  405e98:	f898 3000 	ldrb.w	r3, [r8]
  405e9c:	2800      	cmp	r0, #0
  405e9e:	f47f acac 	bne.w	4057fa <_vfiprintf_r+0xce>
  405ea2:	2101      	movs	r1, #1
  405ea4:	2020      	movs	r0, #32
  405ea6:	e4a8      	b.n	4057fa <_vfiprintf_r+0xce>
  405ea8:	f046 0601 	orr.w	r6, r6, #1
  405eac:	f898 3000 	ldrb.w	r3, [r8]
  405eb0:	e4a3      	b.n	4057fa <_vfiprintf_r+0xce>
  405eb2:	9406      	str	r4, [sp, #24]
  405eb4:	2900      	cmp	r1, #0
  405eb6:	f040 830c 	bne.w	4064d2 <_vfiprintf_r+0xda6>
  405eba:	06b2      	lsls	r2, r6, #26
  405ebc:	488e      	ldr	r0, [pc, #568]	; (4060f8 <_vfiprintf_r+0x9cc>)
  405ebe:	d4bd      	bmi.n	405e3c <_vfiprintf_r+0x710>
  405ec0:	9904      	ldr	r1, [sp, #16]
  405ec2:	06f7      	lsls	r7, r6, #27
  405ec4:	460a      	mov	r2, r1
  405ec6:	f100 819d 	bmi.w	406204 <_vfiprintf_r+0xad8>
  405eca:	0675      	lsls	r5, r6, #25
  405ecc:	f140 819a 	bpl.w	406204 <_vfiprintf_r+0xad8>
  405ed0:	3204      	adds	r2, #4
  405ed2:	880c      	ldrh	r4, [r1, #0]
  405ed4:	9204      	str	r2, [sp, #16]
  405ed6:	2500      	movs	r5, #0
  405ed8:	e7b9      	b.n	405e4e <_vfiprintf_r+0x722>
  405eda:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  405ede:	f898 3000 	ldrb.w	r3, [r8]
  405ee2:	e48a      	b.n	4057fa <_vfiprintf_r+0xce>
  405ee4:	f898 3000 	ldrb.w	r3, [r8]
  405ee8:	2b6c      	cmp	r3, #108	; 0x6c
  405eea:	bf03      	ittte	eq
  405eec:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  405ef0:	f046 0620 	orreq.w	r6, r6, #32
  405ef4:	f108 0801 	addeq.w	r8, r8, #1
  405ef8:	f046 0610 	orrne.w	r6, r6, #16
  405efc:	e47d      	b.n	4057fa <_vfiprintf_r+0xce>
  405efe:	2900      	cmp	r1, #0
  405f00:	f040 8309 	bne.w	406516 <_vfiprintf_r+0xdea>
  405f04:	06b4      	lsls	r4, r6, #26
  405f06:	f140 821c 	bpl.w	406342 <_vfiprintf_r+0xc16>
  405f0a:	9a04      	ldr	r2, [sp, #16]
  405f0c:	9902      	ldr	r1, [sp, #8]
  405f0e:	6813      	ldr	r3, [r2, #0]
  405f10:	17cd      	asrs	r5, r1, #31
  405f12:	4608      	mov	r0, r1
  405f14:	3204      	adds	r2, #4
  405f16:	4629      	mov	r1, r5
  405f18:	9204      	str	r2, [sp, #16]
  405f1a:	e9c3 0100 	strd	r0, r1, [r3]
  405f1e:	e436      	b.n	40578e <_vfiprintf_r+0x62>
  405f20:	9406      	str	r4, [sp, #24]
  405f22:	2900      	cmp	r1, #0
  405f24:	f43f ae43 	beq.w	405bae <_vfiprintf_r+0x482>
  405f28:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f2c:	e63f      	b.n	405bae <_vfiprintf_r+0x482>
  405f2e:	9406      	str	r4, [sp, #24]
  405f30:	2900      	cmp	r1, #0
  405f32:	f040 82ed 	bne.w	406510 <_vfiprintf_r+0xde4>
  405f36:	2b00      	cmp	r3, #0
  405f38:	f000 808f 	beq.w	40605a <_vfiprintf_r+0x92e>
  405f3c:	2501      	movs	r5, #1
  405f3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405f42:	f04f 0300 	mov.w	r3, #0
  405f46:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405f4a:	9503      	str	r5, [sp, #12]
  405f4c:	af10      	add	r7, sp, #64	; 0x40
  405f4e:	e7a0      	b.n	405e92 <_vfiprintf_r+0x766>
  405f50:	9304      	str	r3, [sp, #16]
  405f52:	f04f 0900 	mov.w	r9, #0
  405f56:	e696      	b.n	405c86 <_vfiprintf_r+0x55a>
  405f58:	aa0d      	add	r2, sp, #52	; 0x34
  405f5a:	9900      	ldr	r1, [sp, #0]
  405f5c:	9309      	str	r3, [sp, #36]	; 0x24
  405f5e:	4648      	mov	r0, r9
  405f60:	f7ff fba8 	bl	4056b4 <__sprint_r.part.0>
  405f64:	2800      	cmp	r0, #0
  405f66:	d17f      	bne.n	406068 <_vfiprintf_r+0x93c>
  405f68:	980e      	ldr	r0, [sp, #56]	; 0x38
  405f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f6e:	f100 0e01 	add.w	lr, r0, #1
  405f72:	46dc      	mov	ip, fp
  405f74:	e529      	b.n	4059ca <_vfiprintf_r+0x29e>
  405f76:	980e      	ldr	r0, [sp, #56]	; 0x38
  405f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f7a:	f100 0e01 	add.w	lr, r0, #1
  405f7e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405f82:	2b00      	cmp	r3, #0
  405f84:	f43f ad50 	beq.w	405a28 <_vfiprintf_r+0x2fc>
  405f88:	3201      	adds	r2, #1
  405f8a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405f8e:	2301      	movs	r3, #1
  405f90:	f1be 0f07 	cmp.w	lr, #7
  405f94:	920f      	str	r2, [sp, #60]	; 0x3c
  405f96:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405f9a:	e88a 000a 	stmia.w	sl, {r1, r3}
  405f9e:	f340 80bf 	ble.w	406120 <_vfiprintf_r+0x9f4>
  405fa2:	2a00      	cmp	r2, #0
  405fa4:	f040 814e 	bne.w	406244 <_vfiprintf_r+0xb18>
  405fa8:	9907      	ldr	r1, [sp, #28]
  405faa:	2900      	cmp	r1, #0
  405fac:	f040 80be 	bne.w	40612c <_vfiprintf_r+0xa00>
  405fb0:	469e      	mov	lr, r3
  405fb2:	4610      	mov	r0, r2
  405fb4:	46da      	mov	sl, fp
  405fb6:	9b08      	ldr	r3, [sp, #32]
  405fb8:	2b80      	cmp	r3, #128	; 0x80
  405fba:	f43f ad50 	beq.w	405a5e <_vfiprintf_r+0x332>
  405fbe:	9b01      	ldr	r3, [sp, #4]
  405fc0:	9903      	ldr	r1, [sp, #12]
  405fc2:	1a5c      	subs	r4, r3, r1
  405fc4:	2c00      	cmp	r4, #0
  405fc6:	f77f ad93 	ble.w	405af0 <_vfiprintf_r+0x3c4>
  405fca:	2c10      	cmp	r4, #16
  405fcc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4060fc <_vfiprintf_r+0x9d0>
  405fd0:	dd25      	ble.n	40601e <_vfiprintf_r+0x8f2>
  405fd2:	46d4      	mov	ip, sl
  405fd4:	2310      	movs	r3, #16
  405fd6:	46c2      	mov	sl, r8
  405fd8:	46a8      	mov	r8, r5
  405fda:	464d      	mov	r5, r9
  405fdc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405fe0:	e007      	b.n	405ff2 <_vfiprintf_r+0x8c6>
  405fe2:	f100 0e02 	add.w	lr, r0, #2
  405fe6:	f10c 0c08 	add.w	ip, ip, #8
  405fea:	4608      	mov	r0, r1
  405fec:	3c10      	subs	r4, #16
  405fee:	2c10      	cmp	r4, #16
  405ff0:	dd11      	ble.n	406016 <_vfiprintf_r+0x8ea>
  405ff2:	1c41      	adds	r1, r0, #1
  405ff4:	3210      	adds	r2, #16
  405ff6:	2907      	cmp	r1, #7
  405ff8:	920f      	str	r2, [sp, #60]	; 0x3c
  405ffa:	f8cc 5000 	str.w	r5, [ip]
  405ffe:	f8cc 3004 	str.w	r3, [ip, #4]
  406002:	910e      	str	r1, [sp, #56]	; 0x38
  406004:	dded      	ble.n	405fe2 <_vfiprintf_r+0x8b6>
  406006:	b9d2      	cbnz	r2, 40603e <_vfiprintf_r+0x912>
  406008:	3c10      	subs	r4, #16
  40600a:	2c10      	cmp	r4, #16
  40600c:	f04f 0e01 	mov.w	lr, #1
  406010:	4610      	mov	r0, r2
  406012:	46dc      	mov	ip, fp
  406014:	dced      	bgt.n	405ff2 <_vfiprintf_r+0x8c6>
  406016:	46a9      	mov	r9, r5
  406018:	4645      	mov	r5, r8
  40601a:	46d0      	mov	r8, sl
  40601c:	46e2      	mov	sl, ip
  40601e:	4422      	add	r2, r4
  406020:	f1be 0f07 	cmp.w	lr, #7
  406024:	920f      	str	r2, [sp, #60]	; 0x3c
  406026:	f8ca 9000 	str.w	r9, [sl]
  40602a:	f8ca 4004 	str.w	r4, [sl, #4]
  40602e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406032:	dc2e      	bgt.n	406092 <_vfiprintf_r+0x966>
  406034:	f10a 0a08 	add.w	sl, sl, #8
  406038:	f10e 0e01 	add.w	lr, lr, #1
  40603c:	e558      	b.n	405af0 <_vfiprintf_r+0x3c4>
  40603e:	aa0d      	add	r2, sp, #52	; 0x34
  406040:	9900      	ldr	r1, [sp, #0]
  406042:	9301      	str	r3, [sp, #4]
  406044:	4648      	mov	r0, r9
  406046:	f7ff fb35 	bl	4056b4 <__sprint_r.part.0>
  40604a:	b968      	cbnz	r0, 406068 <_vfiprintf_r+0x93c>
  40604c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40604e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406050:	9b01      	ldr	r3, [sp, #4]
  406052:	f100 0e01 	add.w	lr, r0, #1
  406056:	46dc      	mov	ip, fp
  406058:	e7c8      	b.n	405fec <_vfiprintf_r+0x8c0>
  40605a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40605c:	b123      	cbz	r3, 406068 <_vfiprintf_r+0x93c>
  40605e:	9805      	ldr	r0, [sp, #20]
  406060:	9900      	ldr	r1, [sp, #0]
  406062:	aa0d      	add	r2, sp, #52	; 0x34
  406064:	f7ff fb26 	bl	4056b4 <__sprint_r.part.0>
  406068:	9b00      	ldr	r3, [sp, #0]
  40606a:	899b      	ldrh	r3, [r3, #12]
  40606c:	065a      	lsls	r2, r3, #25
  40606e:	f100 818b 	bmi.w	406388 <_vfiprintf_r+0xc5c>
  406072:	9802      	ldr	r0, [sp, #8]
  406074:	b02b      	add	sp, #172	; 0xac
  406076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40607a:	aa0d      	add	r2, sp, #52	; 0x34
  40607c:	9900      	ldr	r1, [sp, #0]
  40607e:	4648      	mov	r0, r9
  406080:	f7ff fb18 	bl	4056b4 <__sprint_r.part.0>
  406084:	2800      	cmp	r0, #0
  406086:	d1ef      	bne.n	406068 <_vfiprintf_r+0x93c>
  406088:	990e      	ldr	r1, [sp, #56]	; 0x38
  40608a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40608c:	1c48      	adds	r0, r1, #1
  40608e:	46da      	mov	sl, fp
  406090:	e555      	b.n	405b3e <_vfiprintf_r+0x412>
  406092:	2a00      	cmp	r2, #0
  406094:	f040 80fb 	bne.w	40628e <_vfiprintf_r+0xb62>
  406098:	9a03      	ldr	r2, [sp, #12]
  40609a:	921b      	str	r2, [sp, #108]	; 0x6c
  40609c:	2301      	movs	r3, #1
  40609e:	920f      	str	r2, [sp, #60]	; 0x3c
  4060a0:	971a      	str	r7, [sp, #104]	; 0x68
  4060a2:	930e      	str	r3, [sp, #56]	; 0x38
  4060a4:	46da      	mov	sl, fp
  4060a6:	f10a 0a08 	add.w	sl, sl, #8
  4060aa:	0771      	lsls	r1, r6, #29
  4060ac:	d504      	bpl.n	4060b8 <_vfiprintf_r+0x98c>
  4060ae:	9b06      	ldr	r3, [sp, #24]
  4060b0:	1b5c      	subs	r4, r3, r5
  4060b2:	2c00      	cmp	r4, #0
  4060b4:	f73f ad34 	bgt.w	405b20 <_vfiprintf_r+0x3f4>
  4060b8:	9b02      	ldr	r3, [sp, #8]
  4060ba:	9906      	ldr	r1, [sp, #24]
  4060bc:	42a9      	cmp	r1, r5
  4060be:	bfac      	ite	ge
  4060c0:	185b      	addge	r3, r3, r1
  4060c2:	195b      	addlt	r3, r3, r5
  4060c4:	9302      	str	r3, [sp, #8]
  4060c6:	2a00      	cmp	r2, #0
  4060c8:	f040 80b3 	bne.w	406232 <_vfiprintf_r+0xb06>
  4060cc:	2300      	movs	r3, #0
  4060ce:	930e      	str	r3, [sp, #56]	; 0x38
  4060d0:	46da      	mov	sl, fp
  4060d2:	f7ff bb5c 	b.w	40578e <_vfiprintf_r+0x62>
  4060d6:	aa0d      	add	r2, sp, #52	; 0x34
  4060d8:	9900      	ldr	r1, [sp, #0]
  4060da:	9307      	str	r3, [sp, #28]
  4060dc:	4648      	mov	r0, r9
  4060de:	f7ff fae9 	bl	4056b4 <__sprint_r.part.0>
  4060e2:	2800      	cmp	r0, #0
  4060e4:	d1c0      	bne.n	406068 <_vfiprintf_r+0x93c>
  4060e6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4060e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4060ea:	9b07      	ldr	r3, [sp, #28]
  4060ec:	f100 0c01 	add.w	ip, r0, #1
  4060f0:	46de      	mov	lr, fp
  4060f2:	e4cb      	b.n	405a8c <_vfiprintf_r+0x360>
  4060f4:	004091c4 	.word	0x004091c4
  4060f8:	004091d8 	.word	0x004091d8
  4060fc:	004091b4 	.word	0x004091b4
  406100:	2a00      	cmp	r2, #0
  406102:	f040 8133 	bne.w	40636c <_vfiprintf_r+0xc40>
  406106:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40610a:	2b00      	cmp	r3, #0
  40610c:	f000 80f5 	beq.w	4062fa <_vfiprintf_r+0xbce>
  406110:	2301      	movs	r3, #1
  406112:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  406116:	461a      	mov	r2, r3
  406118:	931b      	str	r3, [sp, #108]	; 0x6c
  40611a:	469e      	mov	lr, r3
  40611c:	911a      	str	r1, [sp, #104]	; 0x68
  40611e:	46da      	mov	sl, fp
  406120:	4670      	mov	r0, lr
  406122:	f10a 0a08 	add.w	sl, sl, #8
  406126:	f10e 0e01 	add.w	lr, lr, #1
  40612a:	e47d      	b.n	405a28 <_vfiprintf_r+0x2fc>
  40612c:	a90c      	add	r1, sp, #48	; 0x30
  40612e:	2202      	movs	r2, #2
  406130:	469e      	mov	lr, r3
  406132:	911a      	str	r1, [sp, #104]	; 0x68
  406134:	921b      	str	r2, [sp, #108]	; 0x6c
  406136:	46da      	mov	sl, fp
  406138:	4670      	mov	r0, lr
  40613a:	f10a 0a08 	add.w	sl, sl, #8
  40613e:	f10e 0e01 	add.w	lr, lr, #1
  406142:	e738      	b.n	405fb6 <_vfiprintf_r+0x88a>
  406144:	9b01      	ldr	r3, [sp, #4]
  406146:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40614a:	2b00      	cmp	r3, #0
  40614c:	f2c0 812a 	blt.w	4063a4 <_vfiprintf_r+0xc78>
  406150:	ea54 0305 	orrs.w	r3, r4, r5
  406154:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406158:	f43f abff 	beq.w	40595a <_vfiprintf_r+0x22e>
  40615c:	465f      	mov	r7, fp
  40615e:	0923      	lsrs	r3, r4, #4
  406160:	f004 010f 	and.w	r1, r4, #15
  406164:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406168:	092a      	lsrs	r2, r5, #4
  40616a:	461c      	mov	r4, r3
  40616c:	4615      	mov	r5, r2
  40616e:	5c43      	ldrb	r3, [r0, r1]
  406170:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406174:	ea54 0305 	orrs.w	r3, r4, r5
  406178:	d1f1      	bne.n	40615e <_vfiprintf_r+0xa32>
  40617a:	ebc7 030b 	rsb	r3, r7, fp
  40617e:	9303      	str	r3, [sp, #12]
  406180:	f7ff bbf4 	b.w	40596c <_vfiprintf_r+0x240>
  406184:	aa0d      	add	r2, sp, #52	; 0x34
  406186:	9900      	ldr	r1, [sp, #0]
  406188:	9805      	ldr	r0, [sp, #20]
  40618a:	f7ff fa93 	bl	4056b4 <__sprint_r.part.0>
  40618e:	2800      	cmp	r0, #0
  406190:	f47f af6a 	bne.w	406068 <_vfiprintf_r+0x93c>
  406194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406196:	46da      	mov	sl, fp
  406198:	e787      	b.n	4060aa <_vfiprintf_r+0x97e>
  40619a:	f04f 0900 	mov.w	r9, #0
  40619e:	2400      	movs	r4, #0
  4061a0:	2500      	movs	r5, #0
  4061a2:	e7db      	b.n	40615c <_vfiprintf_r+0xa30>
  4061a4:	f016 0210 	ands.w	r2, r6, #16
  4061a8:	f000 80b2 	beq.w	406310 <_vfiprintf_r+0xbe4>
  4061ac:	9904      	ldr	r1, [sp, #16]
  4061ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4061b2:	460a      	mov	r2, r1
  4061b4:	680c      	ldr	r4, [r1, #0]
  4061b6:	9901      	ldr	r1, [sp, #4]
  4061b8:	2900      	cmp	r1, #0
  4061ba:	f102 0204 	add.w	r2, r2, #4
  4061be:	f04f 0500 	mov.w	r5, #0
  4061c2:	f2c0 8159 	blt.w	406478 <_vfiprintf_r+0xd4c>
  4061c6:	ea54 0105 	orrs.w	r1, r4, r5
  4061ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4061ce:	9204      	str	r2, [sp, #16]
  4061d0:	f43f ad51 	beq.w	405c76 <_vfiprintf_r+0x54a>
  4061d4:	4699      	mov	r9, r3
  4061d6:	e556      	b.n	405c86 <_vfiprintf_r+0x55a>
  4061d8:	06f7      	lsls	r7, r6, #27
  4061da:	d40a      	bmi.n	4061f2 <_vfiprintf_r+0xac6>
  4061dc:	0675      	lsls	r5, r6, #25
  4061de:	d508      	bpl.n	4061f2 <_vfiprintf_r+0xac6>
  4061e0:	9904      	ldr	r1, [sp, #16]
  4061e2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4061e6:	3104      	adds	r1, #4
  4061e8:	17e5      	asrs	r5, r4, #31
  4061ea:	4622      	mov	r2, r4
  4061ec:	462b      	mov	r3, r5
  4061ee:	9104      	str	r1, [sp, #16]
  4061f0:	e4ea      	b.n	405bc8 <_vfiprintf_r+0x49c>
  4061f2:	9a04      	ldr	r2, [sp, #16]
  4061f4:	6814      	ldr	r4, [r2, #0]
  4061f6:	4613      	mov	r3, r2
  4061f8:	3304      	adds	r3, #4
  4061fa:	17e5      	asrs	r5, r4, #31
  4061fc:	9304      	str	r3, [sp, #16]
  4061fe:	4622      	mov	r2, r4
  406200:	462b      	mov	r3, r5
  406202:	e4e1      	b.n	405bc8 <_vfiprintf_r+0x49c>
  406204:	6814      	ldr	r4, [r2, #0]
  406206:	3204      	adds	r2, #4
  406208:	9204      	str	r2, [sp, #16]
  40620a:	2500      	movs	r5, #0
  40620c:	e61f      	b.n	405e4e <_vfiprintf_r+0x722>
  40620e:	f04f 0900 	mov.w	r9, #0
  406212:	ea54 0305 	orrs.w	r3, r4, r5
  406216:	f47f ace8 	bne.w	405bea <_vfiprintf_r+0x4be>
  40621a:	e5d8      	b.n	405dce <_vfiprintf_r+0x6a2>
  40621c:	aa0d      	add	r2, sp, #52	; 0x34
  40621e:	9900      	ldr	r1, [sp, #0]
  406220:	9805      	ldr	r0, [sp, #20]
  406222:	f7ff fa47 	bl	4056b4 <__sprint_r.part.0>
  406226:	2800      	cmp	r0, #0
  406228:	f47f af1e 	bne.w	406068 <_vfiprintf_r+0x93c>
  40622c:	46da      	mov	sl, fp
  40622e:	f7ff bb48 	b.w	4058c2 <_vfiprintf_r+0x196>
  406232:	aa0d      	add	r2, sp, #52	; 0x34
  406234:	9900      	ldr	r1, [sp, #0]
  406236:	9805      	ldr	r0, [sp, #20]
  406238:	f7ff fa3c 	bl	4056b4 <__sprint_r.part.0>
  40623c:	2800      	cmp	r0, #0
  40623e:	f43f af45 	beq.w	4060cc <_vfiprintf_r+0x9a0>
  406242:	e711      	b.n	406068 <_vfiprintf_r+0x93c>
  406244:	aa0d      	add	r2, sp, #52	; 0x34
  406246:	9900      	ldr	r1, [sp, #0]
  406248:	9805      	ldr	r0, [sp, #20]
  40624a:	f7ff fa33 	bl	4056b4 <__sprint_r.part.0>
  40624e:	2800      	cmp	r0, #0
  406250:	f47f af0a 	bne.w	406068 <_vfiprintf_r+0x93c>
  406254:	980e      	ldr	r0, [sp, #56]	; 0x38
  406256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406258:	f100 0e01 	add.w	lr, r0, #1
  40625c:	46da      	mov	sl, fp
  40625e:	f7ff bbe3 	b.w	405a28 <_vfiprintf_r+0x2fc>
  406262:	aa0d      	add	r2, sp, #52	; 0x34
  406264:	9900      	ldr	r1, [sp, #0]
  406266:	9805      	ldr	r0, [sp, #20]
  406268:	f7ff fa24 	bl	4056b4 <__sprint_r.part.0>
  40626c:	2800      	cmp	r0, #0
  40626e:	f47f aefb 	bne.w	406068 <_vfiprintf_r+0x93c>
  406272:	980e      	ldr	r0, [sp, #56]	; 0x38
  406274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406276:	f100 0e01 	add.w	lr, r0, #1
  40627a:	46da      	mov	sl, fp
  40627c:	e69b      	b.n	405fb6 <_vfiprintf_r+0x88a>
  40627e:	2a00      	cmp	r2, #0
  406280:	f040 80d8 	bne.w	406434 <_vfiprintf_r+0xd08>
  406284:	f04f 0e01 	mov.w	lr, #1
  406288:	4610      	mov	r0, r2
  40628a:	46da      	mov	sl, fp
  40628c:	e697      	b.n	405fbe <_vfiprintf_r+0x892>
  40628e:	aa0d      	add	r2, sp, #52	; 0x34
  406290:	9900      	ldr	r1, [sp, #0]
  406292:	9805      	ldr	r0, [sp, #20]
  406294:	f7ff fa0e 	bl	4056b4 <__sprint_r.part.0>
  406298:	2800      	cmp	r0, #0
  40629a:	f47f aee5 	bne.w	406068 <_vfiprintf_r+0x93c>
  40629e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4062a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4062a2:	f103 0e01 	add.w	lr, r3, #1
  4062a6:	46da      	mov	sl, fp
  4062a8:	e422      	b.n	405af0 <_vfiprintf_r+0x3c4>
  4062aa:	2230      	movs	r2, #48	; 0x30
  4062ac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4062b0:	9a01      	ldr	r2, [sp, #4]
  4062b2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4062b6:	2a00      	cmp	r2, #0
  4062b8:	f04f 0300 	mov.w	r3, #0
  4062bc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4062c0:	f046 0302 	orr.w	r3, r6, #2
  4062c4:	f2c0 80cb 	blt.w	40645e <_vfiprintf_r+0xd32>
  4062c8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4062cc:	f046 0602 	orr.w	r6, r6, #2
  4062d0:	f04f 0900 	mov.w	r9, #0
  4062d4:	e742      	b.n	40615c <_vfiprintf_r+0xa30>
  4062d6:	f04f 0900 	mov.w	r9, #0
  4062da:	4890      	ldr	r0, [pc, #576]	; (40651c <_vfiprintf_r+0xdf0>)
  4062dc:	e73e      	b.n	40615c <_vfiprintf_r+0xa30>
  4062de:	9b01      	ldr	r3, [sp, #4]
  4062e0:	4264      	negs	r4, r4
  4062e2:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4062e6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4062ea:	2b00      	cmp	r3, #0
  4062ec:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4062f0:	f6ff ac7b 	blt.w	405bea <_vfiprintf_r+0x4be>
  4062f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4062f8:	e477      	b.n	405bea <_vfiprintf_r+0x4be>
  4062fa:	9b07      	ldr	r3, [sp, #28]
  4062fc:	2b00      	cmp	r3, #0
  4062fe:	d072      	beq.n	4063e6 <_vfiprintf_r+0xcba>
  406300:	ab0c      	add	r3, sp, #48	; 0x30
  406302:	2202      	movs	r2, #2
  406304:	931a      	str	r3, [sp, #104]	; 0x68
  406306:	921b      	str	r2, [sp, #108]	; 0x6c
  406308:	f04f 0e01 	mov.w	lr, #1
  40630c:	46da      	mov	sl, fp
  40630e:	e713      	b.n	406138 <_vfiprintf_r+0xa0c>
  406310:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  406314:	d048      	beq.n	4063a8 <_vfiprintf_r+0xc7c>
  406316:	9904      	ldr	r1, [sp, #16]
  406318:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40631c:	460b      	mov	r3, r1
  40631e:	880c      	ldrh	r4, [r1, #0]
  406320:	9901      	ldr	r1, [sp, #4]
  406322:	2900      	cmp	r1, #0
  406324:	f103 0304 	add.w	r3, r3, #4
  406328:	f04f 0500 	mov.w	r5, #0
  40632c:	f6ff ae10 	blt.w	405f50 <_vfiprintf_r+0x824>
  406330:	ea54 0105 	orrs.w	r1, r4, r5
  406334:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406338:	9304      	str	r3, [sp, #16]
  40633a:	f43f ac9c 	beq.w	405c76 <_vfiprintf_r+0x54a>
  40633e:	4691      	mov	r9, r2
  406340:	e4a1      	b.n	405c86 <_vfiprintf_r+0x55a>
  406342:	06f0      	lsls	r0, r6, #27
  406344:	d40a      	bmi.n	40635c <_vfiprintf_r+0xc30>
  406346:	0671      	lsls	r1, r6, #25
  406348:	d508      	bpl.n	40635c <_vfiprintf_r+0xc30>
  40634a:	9a04      	ldr	r2, [sp, #16]
  40634c:	6813      	ldr	r3, [r2, #0]
  40634e:	3204      	adds	r2, #4
  406350:	9204      	str	r2, [sp, #16]
  406352:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  406356:	801a      	strh	r2, [r3, #0]
  406358:	f7ff ba19 	b.w	40578e <_vfiprintf_r+0x62>
  40635c:	9a04      	ldr	r2, [sp, #16]
  40635e:	6813      	ldr	r3, [r2, #0]
  406360:	3204      	adds	r2, #4
  406362:	9204      	str	r2, [sp, #16]
  406364:	9a02      	ldr	r2, [sp, #8]
  406366:	601a      	str	r2, [r3, #0]
  406368:	f7ff ba11 	b.w	40578e <_vfiprintf_r+0x62>
  40636c:	aa0d      	add	r2, sp, #52	; 0x34
  40636e:	9900      	ldr	r1, [sp, #0]
  406370:	9805      	ldr	r0, [sp, #20]
  406372:	f7ff f99f 	bl	4056b4 <__sprint_r.part.0>
  406376:	2800      	cmp	r0, #0
  406378:	f47f ae76 	bne.w	406068 <_vfiprintf_r+0x93c>
  40637c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40637e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406380:	f100 0e01 	add.w	lr, r0, #1
  406384:	46da      	mov	sl, fp
  406386:	e5fa      	b.n	405f7e <_vfiprintf_r+0x852>
  406388:	f04f 30ff 	mov.w	r0, #4294967295
  40638c:	f7ff bab6 	b.w	4058fc <_vfiprintf_r+0x1d0>
  406390:	4862      	ldr	r0, [pc, #392]	; (40651c <_vfiprintf_r+0xdf0>)
  406392:	4616      	mov	r6, r2
  406394:	ea54 0205 	orrs.w	r2, r4, r5
  406398:	9304      	str	r3, [sp, #16]
  40639a:	f04f 0900 	mov.w	r9, #0
  40639e:	f47f aedd 	bne.w	40615c <_vfiprintf_r+0xa30>
  4063a2:	e6fc      	b.n	40619e <_vfiprintf_r+0xa72>
  4063a4:	9b04      	ldr	r3, [sp, #16]
  4063a6:	e7f5      	b.n	406394 <_vfiprintf_r+0xc68>
  4063a8:	9a04      	ldr	r2, [sp, #16]
  4063aa:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4063ae:	4613      	mov	r3, r2
  4063b0:	6814      	ldr	r4, [r2, #0]
  4063b2:	9a01      	ldr	r2, [sp, #4]
  4063b4:	2a00      	cmp	r2, #0
  4063b6:	f103 0304 	add.w	r3, r3, #4
  4063ba:	f04f 0500 	mov.w	r5, #0
  4063be:	f6ff adc7 	blt.w	405f50 <_vfiprintf_r+0x824>
  4063c2:	ea54 0205 	orrs.w	r2, r4, r5
  4063c6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4063ca:	9304      	str	r3, [sp, #16]
  4063cc:	f47f ac5b 	bne.w	405c86 <_vfiprintf_r+0x55a>
  4063d0:	e451      	b.n	405c76 <_vfiprintf_r+0x54a>
  4063d2:	aa0d      	add	r2, sp, #52	; 0x34
  4063d4:	9900      	ldr	r1, [sp, #0]
  4063d6:	9805      	ldr	r0, [sp, #20]
  4063d8:	f7ff f96c 	bl	4056b4 <__sprint_r.part.0>
  4063dc:	2800      	cmp	r0, #0
  4063de:	f47f ae43 	bne.w	406068 <_vfiprintf_r+0x93c>
  4063e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4063e4:	e668      	b.n	4060b8 <_vfiprintf_r+0x98c>
  4063e6:	4610      	mov	r0, r2
  4063e8:	f04f 0e01 	mov.w	lr, #1
  4063ec:	46da      	mov	sl, fp
  4063ee:	e5e6      	b.n	405fbe <_vfiprintf_r+0x892>
  4063f0:	9904      	ldr	r1, [sp, #16]
  4063f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4063f6:	460a      	mov	r2, r1
  4063f8:	880c      	ldrh	r4, [r1, #0]
  4063fa:	9901      	ldr	r1, [sp, #4]
  4063fc:	2900      	cmp	r1, #0
  4063fe:	f102 0204 	add.w	r2, r2, #4
  406402:	f04f 0500 	mov.w	r5, #0
  406406:	db4e      	blt.n	4064a6 <_vfiprintf_r+0xd7a>
  406408:	ea54 0105 	orrs.w	r1, r4, r5
  40640c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406410:	9204      	str	r2, [sp, #16]
  406412:	4699      	mov	r9, r3
  406414:	f47f abe9 	bne.w	405bea <_vfiprintf_r+0x4be>
  406418:	e4d4      	b.n	405dc4 <_vfiprintf_r+0x698>
  40641a:	9304      	str	r3, [sp, #16]
  40641c:	e6f9      	b.n	406212 <_vfiprintf_r+0xae6>
  40641e:	4638      	mov	r0, r7
  406420:	9404      	str	r4, [sp, #16]
  406422:	f7fe fe6d 	bl	405100 <strlen>
  406426:	2300      	movs	r3, #0
  406428:	9003      	str	r0, [sp, #12]
  40642a:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40642e:	9301      	str	r3, [sp, #4]
  406430:	f7ff ba9c 	b.w	40596c <_vfiprintf_r+0x240>
  406434:	aa0d      	add	r2, sp, #52	; 0x34
  406436:	9900      	ldr	r1, [sp, #0]
  406438:	9805      	ldr	r0, [sp, #20]
  40643a:	f7ff f93b 	bl	4056b4 <__sprint_r.part.0>
  40643e:	2800      	cmp	r0, #0
  406440:	f47f ae12 	bne.w	406068 <_vfiprintf_r+0x93c>
  406444:	980e      	ldr	r0, [sp, #56]	; 0x38
  406446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406448:	f100 0e01 	add.w	lr, r0, #1
  40644c:	46da      	mov	sl, fp
  40644e:	e5b6      	b.n	405fbe <_vfiprintf_r+0x892>
  406450:	980e      	ldr	r0, [sp, #56]	; 0x38
  406452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406454:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 406524 <_vfiprintf_r+0xdf8>
  406458:	3001      	adds	r0, #1
  40645a:	f7ff bad2 	b.w	405a02 <_vfiprintf_r+0x2d6>
  40645e:	461e      	mov	r6, r3
  406460:	f04f 0900 	mov.w	r9, #0
  406464:	e67a      	b.n	40615c <_vfiprintf_r+0xa30>
  406466:	2b06      	cmp	r3, #6
  406468:	bf28      	it	cs
  40646a:	2306      	movcs	r3, #6
  40646c:	9303      	str	r3, [sp, #12]
  40646e:	9404      	str	r4, [sp, #16]
  406470:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  406474:	4f2a      	ldr	r7, [pc, #168]	; (406520 <_vfiprintf_r+0xdf4>)
  406476:	e50c      	b.n	405e92 <_vfiprintf_r+0x766>
  406478:	9204      	str	r2, [sp, #16]
  40647a:	e56a      	b.n	405f52 <_vfiprintf_r+0x826>
  40647c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40647e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406524 <_vfiprintf_r+0xdf8>
  406482:	3001      	adds	r0, #1
  406484:	f7ff bb73 	b.w	405b6e <_vfiprintf_r+0x442>
  406488:	46f4      	mov	ip, lr
  40648a:	f7ff bb1a 	b.w	405ac2 <_vfiprintf_r+0x396>
  40648e:	9b01      	ldr	r3, [sp, #4]
  406490:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406494:	9303      	str	r3, [sp, #12]
  406496:	9404      	str	r4, [sp, #16]
  406498:	9001      	str	r0, [sp, #4]
  40649a:	f7ff ba67 	b.w	40596c <_vfiprintf_r+0x240>
  40649e:	2200      	movs	r2, #0
  4064a0:	9201      	str	r2, [sp, #4]
  4064a2:	f7ff b9ac 	b.w	4057fe <_vfiprintf_r+0xd2>
  4064a6:	9204      	str	r2, [sp, #16]
  4064a8:	4699      	mov	r9, r3
  4064aa:	e6b2      	b.n	406212 <_vfiprintf_r+0xae6>
  4064ac:	9a04      	ldr	r2, [sp, #16]
  4064ae:	6813      	ldr	r3, [r2, #0]
  4064b0:	9301      	str	r3, [sp, #4]
  4064b2:	3204      	adds	r2, #4
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	9204      	str	r2, [sp, #16]
  4064b8:	f898 3001 	ldrb.w	r3, [r8, #1]
  4064bc:	46a8      	mov	r8, r5
  4064be:	f6bf a99c 	bge.w	4057fa <_vfiprintf_r+0xce>
  4064c2:	f04f 32ff 	mov.w	r2, #4294967295
  4064c6:	9201      	str	r2, [sp, #4]
  4064c8:	f7ff b997 	b.w	4057fa <_vfiprintf_r+0xce>
  4064cc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4064d0:	e48e      	b.n	405df0 <_vfiprintf_r+0x6c4>
  4064d2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4064d6:	e4f0      	b.n	405eba <_vfiprintf_r+0x78e>
  4064d8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4064dc:	e4ab      	b.n	405e36 <_vfiprintf_r+0x70a>
  4064de:	4699      	mov	r9, r3
  4064e0:	07f3      	lsls	r3, r6, #31
  4064e2:	d505      	bpl.n	4064f0 <_vfiprintf_r+0xdc4>
  4064e4:	af2a      	add	r7, sp, #168	; 0xa8
  4064e6:	2330      	movs	r3, #48	; 0x30
  4064e8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4064ec:	f7ff bb97 	b.w	405c1e <_vfiprintf_r+0x4f2>
  4064f0:	9b01      	ldr	r3, [sp, #4]
  4064f2:	9303      	str	r3, [sp, #12]
  4064f4:	465f      	mov	r7, fp
  4064f6:	f7ff ba39 	b.w	40596c <_vfiprintf_r+0x240>
  4064fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4064fe:	e443      	b.n	405d88 <_vfiprintf_r+0x65c>
  406500:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406504:	f7ff bb9a 	b.w	405c3c <_vfiprintf_r+0x510>
  406508:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40650c:	f7ff bb4d 	b.w	405baa <_vfiprintf_r+0x47e>
  406510:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406514:	e50f      	b.n	405f36 <_vfiprintf_r+0x80a>
  406516:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40651a:	e4f3      	b.n	405f04 <_vfiprintf_r+0x7d8>
  40651c:	004091d8 	.word	0x004091d8
  406520:	004091ec 	.word	0x004091ec
  406524:	004091f4 	.word	0x004091f4

00406528 <__sbprintf>:
  406528:	b5f0      	push	{r4, r5, r6, r7, lr}
  40652a:	460c      	mov	r4, r1
  40652c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  406530:	8989      	ldrh	r1, [r1, #12]
  406532:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406534:	89e5      	ldrh	r5, [r4, #14]
  406536:	9619      	str	r6, [sp, #100]	; 0x64
  406538:	f021 0102 	bic.w	r1, r1, #2
  40653c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40653e:	f8ad 500e 	strh.w	r5, [sp, #14]
  406542:	2500      	movs	r5, #0
  406544:	69e7      	ldr	r7, [r4, #28]
  406546:	f8ad 100c 	strh.w	r1, [sp, #12]
  40654a:	9609      	str	r6, [sp, #36]	; 0x24
  40654c:	9506      	str	r5, [sp, #24]
  40654e:	ae1a      	add	r6, sp, #104	; 0x68
  406550:	f44f 6580 	mov.w	r5, #1024	; 0x400
  406554:	4669      	mov	r1, sp
  406556:	9600      	str	r6, [sp, #0]
  406558:	9604      	str	r6, [sp, #16]
  40655a:	9502      	str	r5, [sp, #8]
  40655c:	9505      	str	r5, [sp, #20]
  40655e:	9707      	str	r7, [sp, #28]
  406560:	4606      	mov	r6, r0
  406562:	f7ff f8e3 	bl	40572c <_vfiprintf_r>
  406566:	1e05      	subs	r5, r0, #0
  406568:	db07      	blt.n	40657a <__sbprintf+0x52>
  40656a:	4630      	mov	r0, r6
  40656c:	4669      	mov	r1, sp
  40656e:	f000 f929 	bl	4067c4 <_fflush_r>
  406572:	2800      	cmp	r0, #0
  406574:	bf18      	it	ne
  406576:	f04f 35ff 	movne.w	r5, #4294967295
  40657a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40657e:	065b      	lsls	r3, r3, #25
  406580:	d503      	bpl.n	40658a <__sbprintf+0x62>
  406582:	89a3      	ldrh	r3, [r4, #12]
  406584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406588:	81a3      	strh	r3, [r4, #12]
  40658a:	4628      	mov	r0, r5
  40658c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  406590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406592:	bf00      	nop

00406594 <__swsetup_r>:
  406594:	b538      	push	{r3, r4, r5, lr}
  406596:	4b30      	ldr	r3, [pc, #192]	; (406658 <__swsetup_r+0xc4>)
  406598:	681b      	ldr	r3, [r3, #0]
  40659a:	4605      	mov	r5, r0
  40659c:	460c      	mov	r4, r1
  40659e:	b113      	cbz	r3, 4065a6 <__swsetup_r+0x12>
  4065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4065a2:	2a00      	cmp	r2, #0
  4065a4:	d038      	beq.n	406618 <__swsetup_r+0x84>
  4065a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4065aa:	b293      	uxth	r3, r2
  4065ac:	0718      	lsls	r0, r3, #28
  4065ae:	d50c      	bpl.n	4065ca <__swsetup_r+0x36>
  4065b0:	6920      	ldr	r0, [r4, #16]
  4065b2:	b1a8      	cbz	r0, 4065e0 <__swsetup_r+0x4c>
  4065b4:	f013 0201 	ands.w	r2, r3, #1
  4065b8:	d01e      	beq.n	4065f8 <__swsetup_r+0x64>
  4065ba:	6963      	ldr	r3, [r4, #20]
  4065bc:	2200      	movs	r2, #0
  4065be:	425b      	negs	r3, r3
  4065c0:	61a3      	str	r3, [r4, #24]
  4065c2:	60a2      	str	r2, [r4, #8]
  4065c4:	b1f0      	cbz	r0, 406604 <__swsetup_r+0x70>
  4065c6:	2000      	movs	r0, #0
  4065c8:	bd38      	pop	{r3, r4, r5, pc}
  4065ca:	06d9      	lsls	r1, r3, #27
  4065cc:	d53c      	bpl.n	406648 <__swsetup_r+0xb4>
  4065ce:	0758      	lsls	r0, r3, #29
  4065d0:	d426      	bmi.n	406620 <__swsetup_r+0x8c>
  4065d2:	6920      	ldr	r0, [r4, #16]
  4065d4:	f042 0308 	orr.w	r3, r2, #8
  4065d8:	81a3      	strh	r3, [r4, #12]
  4065da:	b29b      	uxth	r3, r3
  4065dc:	2800      	cmp	r0, #0
  4065de:	d1e9      	bne.n	4065b4 <__swsetup_r+0x20>
  4065e0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4065e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4065e8:	d0e4      	beq.n	4065b4 <__swsetup_r+0x20>
  4065ea:	4628      	mov	r0, r5
  4065ec:	4621      	mov	r1, r4
  4065ee:	f000 fd15 	bl	40701c <__smakebuf_r>
  4065f2:	89a3      	ldrh	r3, [r4, #12]
  4065f4:	6920      	ldr	r0, [r4, #16]
  4065f6:	e7dd      	b.n	4065b4 <__swsetup_r+0x20>
  4065f8:	0799      	lsls	r1, r3, #30
  4065fa:	bf58      	it	pl
  4065fc:	6962      	ldrpl	r2, [r4, #20]
  4065fe:	60a2      	str	r2, [r4, #8]
  406600:	2800      	cmp	r0, #0
  406602:	d1e0      	bne.n	4065c6 <__swsetup_r+0x32>
  406604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406608:	061a      	lsls	r2, r3, #24
  40660a:	d5dd      	bpl.n	4065c8 <__swsetup_r+0x34>
  40660c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406610:	81a3      	strh	r3, [r4, #12]
  406612:	f04f 30ff 	mov.w	r0, #4294967295
  406616:	bd38      	pop	{r3, r4, r5, pc}
  406618:	4618      	mov	r0, r3
  40661a:	f000 f967 	bl	4068ec <__sinit>
  40661e:	e7c2      	b.n	4065a6 <__swsetup_r+0x12>
  406620:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406622:	b151      	cbz	r1, 40663a <__swsetup_r+0xa6>
  406624:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406628:	4299      	cmp	r1, r3
  40662a:	d004      	beq.n	406636 <__swsetup_r+0xa2>
  40662c:	4628      	mov	r0, r5
  40662e:	f000 fa27 	bl	406a80 <_free_r>
  406632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406636:	2300      	movs	r3, #0
  406638:	6323      	str	r3, [r4, #48]	; 0x30
  40663a:	2300      	movs	r3, #0
  40663c:	6920      	ldr	r0, [r4, #16]
  40663e:	6063      	str	r3, [r4, #4]
  406640:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406644:	6020      	str	r0, [r4, #0]
  406646:	e7c5      	b.n	4065d4 <__swsetup_r+0x40>
  406648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40664c:	2309      	movs	r3, #9
  40664e:	602b      	str	r3, [r5, #0]
  406650:	f04f 30ff 	mov.w	r0, #4294967295
  406654:	81a2      	strh	r2, [r4, #12]
  406656:	bd38      	pop	{r3, r4, r5, pc}
  406658:	20400448 	.word	0x20400448

0040665c <register_fini>:
  40665c:	4b02      	ldr	r3, [pc, #8]	; (406668 <register_fini+0xc>)
  40665e:	b113      	cbz	r3, 406666 <register_fini+0xa>
  406660:	4802      	ldr	r0, [pc, #8]	; (40666c <register_fini+0x10>)
  406662:	f000 b805 	b.w	406670 <atexit>
  406666:	4770      	bx	lr
  406668:	00000000 	.word	0x00000000
  40666c:	00406901 	.word	0x00406901

00406670 <atexit>:
  406670:	2300      	movs	r3, #0
  406672:	4601      	mov	r1, r0
  406674:	461a      	mov	r2, r3
  406676:	4618      	mov	r0, r3
  406678:	f001 b9da 	b.w	407a30 <__register_exitproc>

0040667c <__sflush_r>:
  40667c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406680:	b29a      	uxth	r2, r3
  406682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406686:	460d      	mov	r5, r1
  406688:	0711      	lsls	r1, r2, #28
  40668a:	4680      	mov	r8, r0
  40668c:	d43c      	bmi.n	406708 <__sflush_r+0x8c>
  40668e:	686a      	ldr	r2, [r5, #4]
  406690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406694:	2a00      	cmp	r2, #0
  406696:	81ab      	strh	r3, [r5, #12]
  406698:	dd73      	ble.n	406782 <__sflush_r+0x106>
  40669a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40669c:	2c00      	cmp	r4, #0
  40669e:	d04b      	beq.n	406738 <__sflush_r+0xbc>
  4066a0:	b29b      	uxth	r3, r3
  4066a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4066a6:	2100      	movs	r1, #0
  4066a8:	b292      	uxth	r2, r2
  4066aa:	f8d8 6000 	ldr.w	r6, [r8]
  4066ae:	f8c8 1000 	str.w	r1, [r8]
  4066b2:	2a00      	cmp	r2, #0
  4066b4:	d069      	beq.n	40678a <__sflush_r+0x10e>
  4066b6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4066b8:	075f      	lsls	r7, r3, #29
  4066ba:	d505      	bpl.n	4066c8 <__sflush_r+0x4c>
  4066bc:	6869      	ldr	r1, [r5, #4]
  4066be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4066c0:	1a52      	subs	r2, r2, r1
  4066c2:	b10b      	cbz	r3, 4066c8 <__sflush_r+0x4c>
  4066c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4066c6:	1ad2      	subs	r2, r2, r3
  4066c8:	2300      	movs	r3, #0
  4066ca:	69e9      	ldr	r1, [r5, #28]
  4066cc:	4640      	mov	r0, r8
  4066ce:	47a0      	blx	r4
  4066d0:	1c44      	adds	r4, r0, #1
  4066d2:	d03c      	beq.n	40674e <__sflush_r+0xd2>
  4066d4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4066d8:	692a      	ldr	r2, [r5, #16]
  4066da:	602a      	str	r2, [r5, #0]
  4066dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4066e0:	2200      	movs	r2, #0
  4066e2:	81ab      	strh	r3, [r5, #12]
  4066e4:	04db      	lsls	r3, r3, #19
  4066e6:	606a      	str	r2, [r5, #4]
  4066e8:	d449      	bmi.n	40677e <__sflush_r+0x102>
  4066ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4066ec:	f8c8 6000 	str.w	r6, [r8]
  4066f0:	b311      	cbz	r1, 406738 <__sflush_r+0xbc>
  4066f2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4066f6:	4299      	cmp	r1, r3
  4066f8:	d002      	beq.n	406700 <__sflush_r+0x84>
  4066fa:	4640      	mov	r0, r8
  4066fc:	f000 f9c0 	bl	406a80 <_free_r>
  406700:	2000      	movs	r0, #0
  406702:	6328      	str	r0, [r5, #48]	; 0x30
  406704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406708:	692e      	ldr	r6, [r5, #16]
  40670a:	b1ae      	cbz	r6, 406738 <__sflush_r+0xbc>
  40670c:	682c      	ldr	r4, [r5, #0]
  40670e:	602e      	str	r6, [r5, #0]
  406710:	0790      	lsls	r0, r2, #30
  406712:	bf0c      	ite	eq
  406714:	696b      	ldreq	r3, [r5, #20]
  406716:	2300      	movne	r3, #0
  406718:	1ba4      	subs	r4, r4, r6
  40671a:	60ab      	str	r3, [r5, #8]
  40671c:	e00a      	b.n	406734 <__sflush_r+0xb8>
  40671e:	4623      	mov	r3, r4
  406720:	4632      	mov	r2, r6
  406722:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406724:	69e9      	ldr	r1, [r5, #28]
  406726:	4640      	mov	r0, r8
  406728:	47b8      	blx	r7
  40672a:	2800      	cmp	r0, #0
  40672c:	eba4 0400 	sub.w	r4, r4, r0
  406730:	4406      	add	r6, r0
  406732:	dd04      	ble.n	40673e <__sflush_r+0xc2>
  406734:	2c00      	cmp	r4, #0
  406736:	dcf2      	bgt.n	40671e <__sflush_r+0xa2>
  406738:	2000      	movs	r0, #0
  40673a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40673e:	89ab      	ldrh	r3, [r5, #12]
  406740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406744:	81ab      	strh	r3, [r5, #12]
  406746:	f04f 30ff 	mov.w	r0, #4294967295
  40674a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40674e:	f8d8 2000 	ldr.w	r2, [r8]
  406752:	2a1d      	cmp	r2, #29
  406754:	d8f3      	bhi.n	40673e <__sflush_r+0xc2>
  406756:	4b1a      	ldr	r3, [pc, #104]	; (4067c0 <__sflush_r+0x144>)
  406758:	40d3      	lsrs	r3, r2
  40675a:	f003 0301 	and.w	r3, r3, #1
  40675e:	f083 0401 	eor.w	r4, r3, #1
  406762:	2b00      	cmp	r3, #0
  406764:	d0eb      	beq.n	40673e <__sflush_r+0xc2>
  406766:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40676a:	6929      	ldr	r1, [r5, #16]
  40676c:	6029      	str	r1, [r5, #0]
  40676e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406772:	04d9      	lsls	r1, r3, #19
  406774:	606c      	str	r4, [r5, #4]
  406776:	81ab      	strh	r3, [r5, #12]
  406778:	d5b7      	bpl.n	4066ea <__sflush_r+0x6e>
  40677a:	2a00      	cmp	r2, #0
  40677c:	d1b5      	bne.n	4066ea <__sflush_r+0x6e>
  40677e:	6528      	str	r0, [r5, #80]	; 0x50
  406780:	e7b3      	b.n	4066ea <__sflush_r+0x6e>
  406782:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406784:	2a00      	cmp	r2, #0
  406786:	dc88      	bgt.n	40669a <__sflush_r+0x1e>
  406788:	e7d6      	b.n	406738 <__sflush_r+0xbc>
  40678a:	2301      	movs	r3, #1
  40678c:	69e9      	ldr	r1, [r5, #28]
  40678e:	4640      	mov	r0, r8
  406790:	47a0      	blx	r4
  406792:	1c43      	adds	r3, r0, #1
  406794:	4602      	mov	r2, r0
  406796:	d002      	beq.n	40679e <__sflush_r+0x122>
  406798:	89ab      	ldrh	r3, [r5, #12]
  40679a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40679c:	e78c      	b.n	4066b8 <__sflush_r+0x3c>
  40679e:	f8d8 3000 	ldr.w	r3, [r8]
  4067a2:	2b00      	cmp	r3, #0
  4067a4:	d0f8      	beq.n	406798 <__sflush_r+0x11c>
  4067a6:	2b1d      	cmp	r3, #29
  4067a8:	d001      	beq.n	4067ae <__sflush_r+0x132>
  4067aa:	2b16      	cmp	r3, #22
  4067ac:	d102      	bne.n	4067b4 <__sflush_r+0x138>
  4067ae:	f8c8 6000 	str.w	r6, [r8]
  4067b2:	e7c1      	b.n	406738 <__sflush_r+0xbc>
  4067b4:	89ab      	ldrh	r3, [r5, #12]
  4067b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067ba:	81ab      	strh	r3, [r5, #12]
  4067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067c0:	20400001 	.word	0x20400001

004067c4 <_fflush_r>:
  4067c4:	b510      	push	{r4, lr}
  4067c6:	4604      	mov	r4, r0
  4067c8:	b082      	sub	sp, #8
  4067ca:	b108      	cbz	r0, 4067d0 <_fflush_r+0xc>
  4067cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4067ce:	b153      	cbz	r3, 4067e6 <_fflush_r+0x22>
  4067d0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4067d4:	b908      	cbnz	r0, 4067da <_fflush_r+0x16>
  4067d6:	b002      	add	sp, #8
  4067d8:	bd10      	pop	{r4, pc}
  4067da:	4620      	mov	r0, r4
  4067dc:	b002      	add	sp, #8
  4067de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4067e2:	f7ff bf4b 	b.w	40667c <__sflush_r>
  4067e6:	9101      	str	r1, [sp, #4]
  4067e8:	f000 f880 	bl	4068ec <__sinit>
  4067ec:	9901      	ldr	r1, [sp, #4]
  4067ee:	e7ef      	b.n	4067d0 <_fflush_r+0xc>

004067f0 <_cleanup_r>:
  4067f0:	4901      	ldr	r1, [pc, #4]	; (4067f8 <_cleanup_r+0x8>)
  4067f2:	f000 bbaf 	b.w	406f54 <_fwalk_reent>
  4067f6:	bf00      	nop
  4067f8:	00407af9 	.word	0x00407af9

004067fc <__sinit.part.1>:
  4067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406800:	4b35      	ldr	r3, [pc, #212]	; (4068d8 <__sinit.part.1+0xdc>)
  406802:	6845      	ldr	r5, [r0, #4]
  406804:	63c3      	str	r3, [r0, #60]	; 0x3c
  406806:	2400      	movs	r4, #0
  406808:	4607      	mov	r7, r0
  40680a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40680e:	2304      	movs	r3, #4
  406810:	2103      	movs	r1, #3
  406812:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  406816:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40681a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40681e:	b083      	sub	sp, #12
  406820:	602c      	str	r4, [r5, #0]
  406822:	606c      	str	r4, [r5, #4]
  406824:	60ac      	str	r4, [r5, #8]
  406826:	666c      	str	r4, [r5, #100]	; 0x64
  406828:	81ec      	strh	r4, [r5, #14]
  40682a:	612c      	str	r4, [r5, #16]
  40682c:	616c      	str	r4, [r5, #20]
  40682e:	61ac      	str	r4, [r5, #24]
  406830:	81ab      	strh	r3, [r5, #12]
  406832:	4621      	mov	r1, r4
  406834:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406838:	2208      	movs	r2, #8
  40683a:	f7fe f983 	bl	404b44 <memset>
  40683e:	68be      	ldr	r6, [r7, #8]
  406840:	f8df b098 	ldr.w	fp, [pc, #152]	; 4068dc <__sinit.part.1+0xe0>
  406844:	f8df a098 	ldr.w	sl, [pc, #152]	; 4068e0 <__sinit.part.1+0xe4>
  406848:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4068e4 <__sinit.part.1+0xe8>
  40684c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4068e8 <__sinit.part.1+0xec>
  406850:	f8c5 b020 	str.w	fp, [r5, #32]
  406854:	2301      	movs	r3, #1
  406856:	2209      	movs	r2, #9
  406858:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40685c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406860:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406864:	61ed      	str	r5, [r5, #28]
  406866:	4621      	mov	r1, r4
  406868:	81f3      	strh	r3, [r6, #14]
  40686a:	81b2      	strh	r2, [r6, #12]
  40686c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406870:	6034      	str	r4, [r6, #0]
  406872:	6074      	str	r4, [r6, #4]
  406874:	60b4      	str	r4, [r6, #8]
  406876:	6674      	str	r4, [r6, #100]	; 0x64
  406878:	6134      	str	r4, [r6, #16]
  40687a:	6174      	str	r4, [r6, #20]
  40687c:	61b4      	str	r4, [r6, #24]
  40687e:	2208      	movs	r2, #8
  406880:	9301      	str	r3, [sp, #4]
  406882:	f7fe f95f 	bl	404b44 <memset>
  406886:	68fd      	ldr	r5, [r7, #12]
  406888:	61f6      	str	r6, [r6, #28]
  40688a:	2012      	movs	r0, #18
  40688c:	2202      	movs	r2, #2
  40688e:	f8c6 b020 	str.w	fp, [r6, #32]
  406892:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  406896:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40689a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40689e:	4621      	mov	r1, r4
  4068a0:	81a8      	strh	r0, [r5, #12]
  4068a2:	81ea      	strh	r2, [r5, #14]
  4068a4:	602c      	str	r4, [r5, #0]
  4068a6:	606c      	str	r4, [r5, #4]
  4068a8:	60ac      	str	r4, [r5, #8]
  4068aa:	666c      	str	r4, [r5, #100]	; 0x64
  4068ac:	612c      	str	r4, [r5, #16]
  4068ae:	616c      	str	r4, [r5, #20]
  4068b0:	61ac      	str	r4, [r5, #24]
  4068b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4068b6:	2208      	movs	r2, #8
  4068b8:	f7fe f944 	bl	404b44 <memset>
  4068bc:	9b01      	ldr	r3, [sp, #4]
  4068be:	61ed      	str	r5, [r5, #28]
  4068c0:	f8c5 b020 	str.w	fp, [r5, #32]
  4068c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4068c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4068cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4068d0:	63bb      	str	r3, [r7, #56]	; 0x38
  4068d2:	b003      	add	sp, #12
  4068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068d8:	004067f1 	.word	0x004067f1
  4068dc:	00407791 	.word	0x00407791
  4068e0:	004077b5 	.word	0x004077b5
  4068e4:	004077f1 	.word	0x004077f1
  4068e8:	00407811 	.word	0x00407811

004068ec <__sinit>:
  4068ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4068ee:	b103      	cbz	r3, 4068f2 <__sinit+0x6>
  4068f0:	4770      	bx	lr
  4068f2:	f7ff bf83 	b.w	4067fc <__sinit.part.1>
  4068f6:	bf00      	nop

004068f8 <__sfp_lock_acquire>:
  4068f8:	4770      	bx	lr
  4068fa:	bf00      	nop

004068fc <__sfp_lock_release>:
  4068fc:	4770      	bx	lr
  4068fe:	bf00      	nop

00406900 <__libc_fini_array>:
  406900:	b538      	push	{r3, r4, r5, lr}
  406902:	4d07      	ldr	r5, [pc, #28]	; (406920 <__libc_fini_array+0x20>)
  406904:	4c07      	ldr	r4, [pc, #28]	; (406924 <__libc_fini_array+0x24>)
  406906:	1b2c      	subs	r4, r5, r4
  406908:	10a4      	asrs	r4, r4, #2
  40690a:	d005      	beq.n	406918 <__libc_fini_array+0x18>
  40690c:	3c01      	subs	r4, #1
  40690e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406912:	4798      	blx	r3
  406914:	2c00      	cmp	r4, #0
  406916:	d1f9      	bne.n	40690c <__libc_fini_array+0xc>
  406918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40691c:	f002 bc7c 	b.w	409218 <_fini>
  406920:	00409228 	.word	0x00409228
  406924:	00409224 	.word	0x00409224

00406928 <__fputwc>:
  406928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40692c:	b082      	sub	sp, #8
  40692e:	4680      	mov	r8, r0
  406930:	4689      	mov	r9, r1
  406932:	4614      	mov	r4, r2
  406934:	f000 fb3c 	bl	406fb0 <__locale_mb_cur_max>
  406938:	2801      	cmp	r0, #1
  40693a:	d033      	beq.n	4069a4 <__fputwc+0x7c>
  40693c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406940:	464a      	mov	r2, r9
  406942:	a901      	add	r1, sp, #4
  406944:	4640      	mov	r0, r8
  406946:	f001 f825 	bl	407994 <_wcrtomb_r>
  40694a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40694e:	4682      	mov	sl, r0
  406950:	d021      	beq.n	406996 <__fputwc+0x6e>
  406952:	b388      	cbz	r0, 4069b8 <__fputwc+0x90>
  406954:	f89d 6004 	ldrb.w	r6, [sp, #4]
  406958:	2500      	movs	r5, #0
  40695a:	e008      	b.n	40696e <__fputwc+0x46>
  40695c:	6823      	ldr	r3, [r4, #0]
  40695e:	1c5a      	adds	r2, r3, #1
  406960:	6022      	str	r2, [r4, #0]
  406962:	701e      	strb	r6, [r3, #0]
  406964:	3501      	adds	r5, #1
  406966:	4555      	cmp	r5, sl
  406968:	d226      	bcs.n	4069b8 <__fputwc+0x90>
  40696a:	ab01      	add	r3, sp, #4
  40696c:	5d5e      	ldrb	r6, [r3, r5]
  40696e:	68a3      	ldr	r3, [r4, #8]
  406970:	3b01      	subs	r3, #1
  406972:	2b00      	cmp	r3, #0
  406974:	60a3      	str	r3, [r4, #8]
  406976:	daf1      	bge.n	40695c <__fputwc+0x34>
  406978:	69a7      	ldr	r7, [r4, #24]
  40697a:	42bb      	cmp	r3, r7
  40697c:	4631      	mov	r1, r6
  40697e:	4622      	mov	r2, r4
  406980:	4640      	mov	r0, r8
  406982:	db01      	blt.n	406988 <__fputwc+0x60>
  406984:	2e0a      	cmp	r6, #10
  406986:	d1e9      	bne.n	40695c <__fputwc+0x34>
  406988:	f000 ffae 	bl	4078e8 <__swbuf_r>
  40698c:	1c43      	adds	r3, r0, #1
  40698e:	d1e9      	bne.n	406964 <__fputwc+0x3c>
  406990:	b002      	add	sp, #8
  406992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406996:	89a3      	ldrh	r3, [r4, #12]
  406998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40699c:	81a3      	strh	r3, [r4, #12]
  40699e:	b002      	add	sp, #8
  4069a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069a4:	f109 33ff 	add.w	r3, r9, #4294967295
  4069a8:	2bfe      	cmp	r3, #254	; 0xfe
  4069aa:	d8c7      	bhi.n	40693c <__fputwc+0x14>
  4069ac:	fa5f f689 	uxtb.w	r6, r9
  4069b0:	4682      	mov	sl, r0
  4069b2:	f88d 6004 	strb.w	r6, [sp, #4]
  4069b6:	e7cf      	b.n	406958 <__fputwc+0x30>
  4069b8:	4648      	mov	r0, r9
  4069ba:	b002      	add	sp, #8
  4069bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004069c0 <_fputwc_r>:
  4069c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4069c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4069c8:	d10a      	bne.n	4069e0 <_fputwc_r+0x20>
  4069ca:	b410      	push	{r4}
  4069cc:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4069ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4069d2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4069d6:	6654      	str	r4, [r2, #100]	; 0x64
  4069d8:	8193      	strh	r3, [r2, #12]
  4069da:	bc10      	pop	{r4}
  4069dc:	f7ff bfa4 	b.w	406928 <__fputwc>
  4069e0:	f7ff bfa2 	b.w	406928 <__fputwc>

004069e4 <_malloc_trim_r>:
  4069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4069e6:	4f23      	ldr	r7, [pc, #140]	; (406a74 <_malloc_trim_r+0x90>)
  4069e8:	460c      	mov	r4, r1
  4069ea:	4606      	mov	r6, r0
  4069ec:	f7fe f8f8 	bl	404be0 <__malloc_lock>
  4069f0:	68bb      	ldr	r3, [r7, #8]
  4069f2:	685d      	ldr	r5, [r3, #4]
  4069f4:	f025 0503 	bic.w	r5, r5, #3
  4069f8:	1b29      	subs	r1, r5, r4
  4069fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4069fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406a02:	f021 010f 	bic.w	r1, r1, #15
  406a06:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406a0a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406a0e:	db07      	blt.n	406a20 <_malloc_trim_r+0x3c>
  406a10:	2100      	movs	r1, #0
  406a12:	4630      	mov	r0, r6
  406a14:	f7fe f924 	bl	404c60 <_sbrk_r>
  406a18:	68bb      	ldr	r3, [r7, #8]
  406a1a:	442b      	add	r3, r5
  406a1c:	4298      	cmp	r0, r3
  406a1e:	d004      	beq.n	406a2a <_malloc_trim_r+0x46>
  406a20:	4630      	mov	r0, r6
  406a22:	f7fe f8df 	bl	404be4 <__malloc_unlock>
  406a26:	2000      	movs	r0, #0
  406a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a2a:	4261      	negs	r1, r4
  406a2c:	4630      	mov	r0, r6
  406a2e:	f7fe f917 	bl	404c60 <_sbrk_r>
  406a32:	3001      	adds	r0, #1
  406a34:	d00d      	beq.n	406a52 <_malloc_trim_r+0x6e>
  406a36:	4b10      	ldr	r3, [pc, #64]	; (406a78 <_malloc_trim_r+0x94>)
  406a38:	68ba      	ldr	r2, [r7, #8]
  406a3a:	6819      	ldr	r1, [r3, #0]
  406a3c:	1b2d      	subs	r5, r5, r4
  406a3e:	f045 0501 	orr.w	r5, r5, #1
  406a42:	4630      	mov	r0, r6
  406a44:	1b09      	subs	r1, r1, r4
  406a46:	6055      	str	r5, [r2, #4]
  406a48:	6019      	str	r1, [r3, #0]
  406a4a:	f7fe f8cb 	bl	404be4 <__malloc_unlock>
  406a4e:	2001      	movs	r0, #1
  406a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a52:	2100      	movs	r1, #0
  406a54:	4630      	mov	r0, r6
  406a56:	f7fe f903 	bl	404c60 <_sbrk_r>
  406a5a:	68ba      	ldr	r2, [r7, #8]
  406a5c:	1a83      	subs	r3, r0, r2
  406a5e:	2b0f      	cmp	r3, #15
  406a60:	ddde      	ble.n	406a20 <_malloc_trim_r+0x3c>
  406a62:	4c06      	ldr	r4, [pc, #24]	; (406a7c <_malloc_trim_r+0x98>)
  406a64:	4904      	ldr	r1, [pc, #16]	; (406a78 <_malloc_trim_r+0x94>)
  406a66:	6824      	ldr	r4, [r4, #0]
  406a68:	f043 0301 	orr.w	r3, r3, #1
  406a6c:	1b00      	subs	r0, r0, r4
  406a6e:	6053      	str	r3, [r2, #4]
  406a70:	6008      	str	r0, [r1, #0]
  406a72:	e7d5      	b.n	406a20 <_malloc_trim_r+0x3c>
  406a74:	2040044c 	.word	0x2040044c
  406a78:	20400f20 	.word	0x20400f20
  406a7c:	20400858 	.word	0x20400858

00406a80 <_free_r>:
  406a80:	2900      	cmp	r1, #0
  406a82:	d045      	beq.n	406b10 <_free_r+0x90>
  406a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a88:	460d      	mov	r5, r1
  406a8a:	4680      	mov	r8, r0
  406a8c:	f7fe f8a8 	bl	404be0 <__malloc_lock>
  406a90:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406a94:	496a      	ldr	r1, [pc, #424]	; (406c40 <_free_r+0x1c0>)
  406a96:	f027 0301 	bic.w	r3, r7, #1
  406a9a:	f1a5 0408 	sub.w	r4, r5, #8
  406a9e:	18e2      	adds	r2, r4, r3
  406aa0:	688e      	ldr	r6, [r1, #8]
  406aa2:	6850      	ldr	r0, [r2, #4]
  406aa4:	42b2      	cmp	r2, r6
  406aa6:	f020 0003 	bic.w	r0, r0, #3
  406aaa:	d062      	beq.n	406b72 <_free_r+0xf2>
  406aac:	07fe      	lsls	r6, r7, #31
  406aae:	6050      	str	r0, [r2, #4]
  406ab0:	d40b      	bmi.n	406aca <_free_r+0x4a>
  406ab2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406ab6:	1be4      	subs	r4, r4, r7
  406ab8:	f101 0e08 	add.w	lr, r1, #8
  406abc:	68a5      	ldr	r5, [r4, #8]
  406abe:	4575      	cmp	r5, lr
  406ac0:	443b      	add	r3, r7
  406ac2:	d06f      	beq.n	406ba4 <_free_r+0x124>
  406ac4:	68e7      	ldr	r7, [r4, #12]
  406ac6:	60ef      	str	r7, [r5, #12]
  406ac8:	60bd      	str	r5, [r7, #8]
  406aca:	1815      	adds	r5, r2, r0
  406acc:	686d      	ldr	r5, [r5, #4]
  406ace:	07ed      	lsls	r5, r5, #31
  406ad0:	d542      	bpl.n	406b58 <_free_r+0xd8>
  406ad2:	f043 0201 	orr.w	r2, r3, #1
  406ad6:	6062      	str	r2, [r4, #4]
  406ad8:	50e3      	str	r3, [r4, r3]
  406ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406ade:	d218      	bcs.n	406b12 <_free_r+0x92>
  406ae0:	08db      	lsrs	r3, r3, #3
  406ae2:	1c5a      	adds	r2, r3, #1
  406ae4:	684d      	ldr	r5, [r1, #4]
  406ae6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  406aea:	60a7      	str	r7, [r4, #8]
  406aec:	2001      	movs	r0, #1
  406aee:	109b      	asrs	r3, r3, #2
  406af0:	fa00 f303 	lsl.w	r3, r0, r3
  406af4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  406af8:	431d      	orrs	r5, r3
  406afa:	3808      	subs	r0, #8
  406afc:	60e0      	str	r0, [r4, #12]
  406afe:	604d      	str	r5, [r1, #4]
  406b00:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  406b04:	60fc      	str	r4, [r7, #12]
  406b06:	4640      	mov	r0, r8
  406b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b0c:	f7fe b86a 	b.w	404be4 <__malloc_unlock>
  406b10:	4770      	bx	lr
  406b12:	0a5a      	lsrs	r2, r3, #9
  406b14:	2a04      	cmp	r2, #4
  406b16:	d853      	bhi.n	406bc0 <_free_r+0x140>
  406b18:	099a      	lsrs	r2, r3, #6
  406b1a:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406b1e:	007f      	lsls	r7, r7, #1
  406b20:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406b24:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  406b28:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  406b2c:	4944      	ldr	r1, [pc, #272]	; (406c40 <_free_r+0x1c0>)
  406b2e:	3808      	subs	r0, #8
  406b30:	4290      	cmp	r0, r2
  406b32:	d04d      	beq.n	406bd0 <_free_r+0x150>
  406b34:	6851      	ldr	r1, [r2, #4]
  406b36:	f021 0103 	bic.w	r1, r1, #3
  406b3a:	428b      	cmp	r3, r1
  406b3c:	d202      	bcs.n	406b44 <_free_r+0xc4>
  406b3e:	6892      	ldr	r2, [r2, #8]
  406b40:	4290      	cmp	r0, r2
  406b42:	d1f7      	bne.n	406b34 <_free_r+0xb4>
  406b44:	68d0      	ldr	r0, [r2, #12]
  406b46:	60e0      	str	r0, [r4, #12]
  406b48:	60a2      	str	r2, [r4, #8]
  406b4a:	6084      	str	r4, [r0, #8]
  406b4c:	60d4      	str	r4, [r2, #12]
  406b4e:	4640      	mov	r0, r8
  406b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b54:	f7fe b846 	b.w	404be4 <__malloc_unlock>
  406b58:	6895      	ldr	r5, [r2, #8]
  406b5a:	4f3a      	ldr	r7, [pc, #232]	; (406c44 <_free_r+0x1c4>)
  406b5c:	42bd      	cmp	r5, r7
  406b5e:	4403      	add	r3, r0
  406b60:	d03f      	beq.n	406be2 <_free_r+0x162>
  406b62:	68d0      	ldr	r0, [r2, #12]
  406b64:	60e8      	str	r0, [r5, #12]
  406b66:	f043 0201 	orr.w	r2, r3, #1
  406b6a:	6085      	str	r5, [r0, #8]
  406b6c:	6062      	str	r2, [r4, #4]
  406b6e:	50e3      	str	r3, [r4, r3]
  406b70:	e7b3      	b.n	406ada <_free_r+0x5a>
  406b72:	07ff      	lsls	r7, r7, #31
  406b74:	4403      	add	r3, r0
  406b76:	d407      	bmi.n	406b88 <_free_r+0x108>
  406b78:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406b7c:	1aa4      	subs	r4, r4, r2
  406b7e:	4413      	add	r3, r2
  406b80:	68a0      	ldr	r0, [r4, #8]
  406b82:	68e2      	ldr	r2, [r4, #12]
  406b84:	60c2      	str	r2, [r0, #12]
  406b86:	6090      	str	r0, [r2, #8]
  406b88:	4a2f      	ldr	r2, [pc, #188]	; (406c48 <_free_r+0x1c8>)
  406b8a:	6812      	ldr	r2, [r2, #0]
  406b8c:	f043 0001 	orr.w	r0, r3, #1
  406b90:	4293      	cmp	r3, r2
  406b92:	6060      	str	r0, [r4, #4]
  406b94:	608c      	str	r4, [r1, #8]
  406b96:	d3b6      	bcc.n	406b06 <_free_r+0x86>
  406b98:	4b2c      	ldr	r3, [pc, #176]	; (406c4c <_free_r+0x1cc>)
  406b9a:	4640      	mov	r0, r8
  406b9c:	6819      	ldr	r1, [r3, #0]
  406b9e:	f7ff ff21 	bl	4069e4 <_malloc_trim_r>
  406ba2:	e7b0      	b.n	406b06 <_free_r+0x86>
  406ba4:	1811      	adds	r1, r2, r0
  406ba6:	6849      	ldr	r1, [r1, #4]
  406ba8:	07c9      	lsls	r1, r1, #31
  406baa:	d444      	bmi.n	406c36 <_free_r+0x1b6>
  406bac:	6891      	ldr	r1, [r2, #8]
  406bae:	68d2      	ldr	r2, [r2, #12]
  406bb0:	60ca      	str	r2, [r1, #12]
  406bb2:	4403      	add	r3, r0
  406bb4:	f043 0001 	orr.w	r0, r3, #1
  406bb8:	6091      	str	r1, [r2, #8]
  406bba:	6060      	str	r0, [r4, #4]
  406bbc:	50e3      	str	r3, [r4, r3]
  406bbe:	e7a2      	b.n	406b06 <_free_r+0x86>
  406bc0:	2a14      	cmp	r2, #20
  406bc2:	d817      	bhi.n	406bf4 <_free_r+0x174>
  406bc4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406bc8:	007f      	lsls	r7, r7, #1
  406bca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406bce:	e7a9      	b.n	406b24 <_free_r+0xa4>
  406bd0:	10aa      	asrs	r2, r5, #2
  406bd2:	684b      	ldr	r3, [r1, #4]
  406bd4:	2501      	movs	r5, #1
  406bd6:	fa05 f202 	lsl.w	r2, r5, r2
  406bda:	4313      	orrs	r3, r2
  406bdc:	604b      	str	r3, [r1, #4]
  406bde:	4602      	mov	r2, r0
  406be0:	e7b1      	b.n	406b46 <_free_r+0xc6>
  406be2:	f043 0201 	orr.w	r2, r3, #1
  406be6:	614c      	str	r4, [r1, #20]
  406be8:	610c      	str	r4, [r1, #16]
  406bea:	60e5      	str	r5, [r4, #12]
  406bec:	60a5      	str	r5, [r4, #8]
  406bee:	6062      	str	r2, [r4, #4]
  406bf0:	50e3      	str	r3, [r4, r3]
  406bf2:	e788      	b.n	406b06 <_free_r+0x86>
  406bf4:	2a54      	cmp	r2, #84	; 0x54
  406bf6:	d806      	bhi.n	406c06 <_free_r+0x186>
  406bf8:	0b1a      	lsrs	r2, r3, #12
  406bfa:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406bfe:	007f      	lsls	r7, r7, #1
  406c00:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406c04:	e78e      	b.n	406b24 <_free_r+0xa4>
  406c06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406c0a:	d806      	bhi.n	406c1a <_free_r+0x19a>
  406c0c:	0bda      	lsrs	r2, r3, #15
  406c0e:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406c12:	007f      	lsls	r7, r7, #1
  406c14:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406c18:	e784      	b.n	406b24 <_free_r+0xa4>
  406c1a:	f240 5054 	movw	r0, #1364	; 0x554
  406c1e:	4282      	cmp	r2, r0
  406c20:	d806      	bhi.n	406c30 <_free_r+0x1b0>
  406c22:	0c9a      	lsrs	r2, r3, #18
  406c24:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406c28:	007f      	lsls	r7, r7, #1
  406c2a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c2e:	e779      	b.n	406b24 <_free_r+0xa4>
  406c30:	27fe      	movs	r7, #254	; 0xfe
  406c32:	257e      	movs	r5, #126	; 0x7e
  406c34:	e776      	b.n	406b24 <_free_r+0xa4>
  406c36:	f043 0201 	orr.w	r2, r3, #1
  406c3a:	6062      	str	r2, [r4, #4]
  406c3c:	50e3      	str	r3, [r4, r3]
  406c3e:	e762      	b.n	406b06 <_free_r+0x86>
  406c40:	2040044c 	.word	0x2040044c
  406c44:	20400454 	.word	0x20400454
  406c48:	20400854 	.word	0x20400854
  406c4c:	20400f1c 	.word	0x20400f1c

00406c50 <__sfvwrite_r>:
  406c50:	6893      	ldr	r3, [r2, #8]
  406c52:	2b00      	cmp	r3, #0
  406c54:	d076      	beq.n	406d44 <__sfvwrite_r+0xf4>
  406c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c5a:	898b      	ldrh	r3, [r1, #12]
  406c5c:	b085      	sub	sp, #20
  406c5e:	460c      	mov	r4, r1
  406c60:	0719      	lsls	r1, r3, #28
  406c62:	9001      	str	r0, [sp, #4]
  406c64:	4616      	mov	r6, r2
  406c66:	d529      	bpl.n	406cbc <__sfvwrite_r+0x6c>
  406c68:	6922      	ldr	r2, [r4, #16]
  406c6a:	b33a      	cbz	r2, 406cbc <__sfvwrite_r+0x6c>
  406c6c:	f003 0802 	and.w	r8, r3, #2
  406c70:	fa1f f088 	uxth.w	r0, r8
  406c74:	6835      	ldr	r5, [r6, #0]
  406c76:	2800      	cmp	r0, #0
  406c78:	d02f      	beq.n	406cda <__sfvwrite_r+0x8a>
  406c7a:	f04f 0900 	mov.w	r9, #0
  406c7e:	4fb4      	ldr	r7, [pc, #720]	; (406f50 <__sfvwrite_r+0x300>)
  406c80:	46c8      	mov	r8, r9
  406c82:	46b2      	mov	sl, r6
  406c84:	45b8      	cmp	r8, r7
  406c86:	4643      	mov	r3, r8
  406c88:	464a      	mov	r2, r9
  406c8a:	bf28      	it	cs
  406c8c:	463b      	movcs	r3, r7
  406c8e:	9801      	ldr	r0, [sp, #4]
  406c90:	f1b8 0f00 	cmp.w	r8, #0
  406c94:	d050      	beq.n	406d38 <__sfvwrite_r+0xe8>
  406c96:	69e1      	ldr	r1, [r4, #28]
  406c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406c9a:	47b0      	blx	r6
  406c9c:	2800      	cmp	r0, #0
  406c9e:	dd71      	ble.n	406d84 <__sfvwrite_r+0x134>
  406ca0:	f8da 3008 	ldr.w	r3, [sl, #8]
  406ca4:	1a1b      	subs	r3, r3, r0
  406ca6:	4481      	add	r9, r0
  406ca8:	ebc0 0808 	rsb	r8, r0, r8
  406cac:	f8ca 3008 	str.w	r3, [sl, #8]
  406cb0:	2b00      	cmp	r3, #0
  406cb2:	d1e7      	bne.n	406c84 <__sfvwrite_r+0x34>
  406cb4:	2000      	movs	r0, #0
  406cb6:	b005      	add	sp, #20
  406cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cbc:	4621      	mov	r1, r4
  406cbe:	9801      	ldr	r0, [sp, #4]
  406cc0:	f7ff fc68 	bl	406594 <__swsetup_r>
  406cc4:	2800      	cmp	r0, #0
  406cc6:	f040 813a 	bne.w	406f3e <__sfvwrite_r+0x2ee>
  406cca:	89a3      	ldrh	r3, [r4, #12]
  406ccc:	6835      	ldr	r5, [r6, #0]
  406cce:	f003 0802 	and.w	r8, r3, #2
  406cd2:	fa1f f088 	uxth.w	r0, r8
  406cd6:	2800      	cmp	r0, #0
  406cd8:	d1cf      	bne.n	406c7a <__sfvwrite_r+0x2a>
  406cda:	f013 0901 	ands.w	r9, r3, #1
  406cde:	d15b      	bne.n	406d98 <__sfvwrite_r+0x148>
  406ce0:	464f      	mov	r7, r9
  406ce2:	9602      	str	r6, [sp, #8]
  406ce4:	b31f      	cbz	r7, 406d2e <__sfvwrite_r+0xde>
  406ce6:	059a      	lsls	r2, r3, #22
  406ce8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406cec:	d52c      	bpl.n	406d48 <__sfvwrite_r+0xf8>
  406cee:	4547      	cmp	r7, r8
  406cf0:	46c2      	mov	sl, r8
  406cf2:	f0c0 80a4 	bcc.w	406e3e <__sfvwrite_r+0x1ee>
  406cf6:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406cfa:	f040 80b1 	bne.w	406e60 <__sfvwrite_r+0x210>
  406cfe:	6820      	ldr	r0, [r4, #0]
  406d00:	4652      	mov	r2, sl
  406d02:	4649      	mov	r1, r9
  406d04:	f000 faf0 	bl	4072e8 <memmove>
  406d08:	68a0      	ldr	r0, [r4, #8]
  406d0a:	6823      	ldr	r3, [r4, #0]
  406d0c:	ebc8 0000 	rsb	r0, r8, r0
  406d10:	4453      	add	r3, sl
  406d12:	60a0      	str	r0, [r4, #8]
  406d14:	6023      	str	r3, [r4, #0]
  406d16:	4638      	mov	r0, r7
  406d18:	9a02      	ldr	r2, [sp, #8]
  406d1a:	6893      	ldr	r3, [r2, #8]
  406d1c:	1a1b      	subs	r3, r3, r0
  406d1e:	4481      	add	r9, r0
  406d20:	1a3f      	subs	r7, r7, r0
  406d22:	6093      	str	r3, [r2, #8]
  406d24:	2b00      	cmp	r3, #0
  406d26:	d0c5      	beq.n	406cb4 <__sfvwrite_r+0x64>
  406d28:	89a3      	ldrh	r3, [r4, #12]
  406d2a:	2f00      	cmp	r7, #0
  406d2c:	d1db      	bne.n	406ce6 <__sfvwrite_r+0x96>
  406d2e:	f8d5 9000 	ldr.w	r9, [r5]
  406d32:	686f      	ldr	r7, [r5, #4]
  406d34:	3508      	adds	r5, #8
  406d36:	e7d5      	b.n	406ce4 <__sfvwrite_r+0x94>
  406d38:	f8d5 9000 	ldr.w	r9, [r5]
  406d3c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406d40:	3508      	adds	r5, #8
  406d42:	e79f      	b.n	406c84 <__sfvwrite_r+0x34>
  406d44:	2000      	movs	r0, #0
  406d46:	4770      	bx	lr
  406d48:	6820      	ldr	r0, [r4, #0]
  406d4a:	6923      	ldr	r3, [r4, #16]
  406d4c:	4298      	cmp	r0, r3
  406d4e:	d803      	bhi.n	406d58 <__sfvwrite_r+0x108>
  406d50:	6961      	ldr	r1, [r4, #20]
  406d52:	428f      	cmp	r7, r1
  406d54:	f080 80b7 	bcs.w	406ec6 <__sfvwrite_r+0x276>
  406d58:	45b8      	cmp	r8, r7
  406d5a:	bf28      	it	cs
  406d5c:	46b8      	movcs	r8, r7
  406d5e:	4642      	mov	r2, r8
  406d60:	4649      	mov	r1, r9
  406d62:	f000 fac1 	bl	4072e8 <memmove>
  406d66:	68a3      	ldr	r3, [r4, #8]
  406d68:	6822      	ldr	r2, [r4, #0]
  406d6a:	ebc8 0303 	rsb	r3, r8, r3
  406d6e:	4442      	add	r2, r8
  406d70:	60a3      	str	r3, [r4, #8]
  406d72:	6022      	str	r2, [r4, #0]
  406d74:	2b00      	cmp	r3, #0
  406d76:	d149      	bne.n	406e0c <__sfvwrite_r+0x1bc>
  406d78:	4621      	mov	r1, r4
  406d7a:	9801      	ldr	r0, [sp, #4]
  406d7c:	f7ff fd22 	bl	4067c4 <_fflush_r>
  406d80:	2800      	cmp	r0, #0
  406d82:	d043      	beq.n	406e0c <__sfvwrite_r+0x1bc>
  406d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406d8c:	f04f 30ff 	mov.w	r0, #4294967295
  406d90:	81a3      	strh	r3, [r4, #12]
  406d92:	b005      	add	sp, #20
  406d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d98:	4680      	mov	r8, r0
  406d9a:	9002      	str	r0, [sp, #8]
  406d9c:	4682      	mov	sl, r0
  406d9e:	4681      	mov	r9, r0
  406da0:	f1b9 0f00 	cmp.w	r9, #0
  406da4:	d02a      	beq.n	406dfc <__sfvwrite_r+0x1ac>
  406da6:	9b02      	ldr	r3, [sp, #8]
  406da8:	2b00      	cmp	r3, #0
  406daa:	d04c      	beq.n	406e46 <__sfvwrite_r+0x1f6>
  406dac:	6820      	ldr	r0, [r4, #0]
  406dae:	6923      	ldr	r3, [r4, #16]
  406db0:	6962      	ldr	r2, [r4, #20]
  406db2:	45c8      	cmp	r8, r9
  406db4:	46c3      	mov	fp, r8
  406db6:	bf28      	it	cs
  406db8:	46cb      	movcs	fp, r9
  406dba:	4298      	cmp	r0, r3
  406dbc:	465f      	mov	r7, fp
  406dbe:	d904      	bls.n	406dca <__sfvwrite_r+0x17a>
  406dc0:	68a3      	ldr	r3, [r4, #8]
  406dc2:	4413      	add	r3, r2
  406dc4:	459b      	cmp	fp, r3
  406dc6:	f300 8090 	bgt.w	406eea <__sfvwrite_r+0x29a>
  406dca:	4593      	cmp	fp, r2
  406dcc:	db20      	blt.n	406e10 <__sfvwrite_r+0x1c0>
  406dce:	4613      	mov	r3, r2
  406dd0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406dd2:	69e1      	ldr	r1, [r4, #28]
  406dd4:	9801      	ldr	r0, [sp, #4]
  406dd6:	4652      	mov	r2, sl
  406dd8:	47b8      	blx	r7
  406dda:	1e07      	subs	r7, r0, #0
  406ddc:	ddd2      	ble.n	406d84 <__sfvwrite_r+0x134>
  406dde:	ebb8 0807 	subs.w	r8, r8, r7
  406de2:	d023      	beq.n	406e2c <__sfvwrite_r+0x1dc>
  406de4:	68b3      	ldr	r3, [r6, #8]
  406de6:	1bdb      	subs	r3, r3, r7
  406de8:	44ba      	add	sl, r7
  406dea:	ebc7 0909 	rsb	r9, r7, r9
  406dee:	60b3      	str	r3, [r6, #8]
  406df0:	2b00      	cmp	r3, #0
  406df2:	f43f af5f 	beq.w	406cb4 <__sfvwrite_r+0x64>
  406df6:	f1b9 0f00 	cmp.w	r9, #0
  406dfa:	d1d4      	bne.n	406da6 <__sfvwrite_r+0x156>
  406dfc:	2300      	movs	r3, #0
  406dfe:	f8d5 a000 	ldr.w	sl, [r5]
  406e02:	f8d5 9004 	ldr.w	r9, [r5, #4]
  406e06:	9302      	str	r3, [sp, #8]
  406e08:	3508      	adds	r5, #8
  406e0a:	e7c9      	b.n	406da0 <__sfvwrite_r+0x150>
  406e0c:	4640      	mov	r0, r8
  406e0e:	e783      	b.n	406d18 <__sfvwrite_r+0xc8>
  406e10:	465a      	mov	r2, fp
  406e12:	4651      	mov	r1, sl
  406e14:	f000 fa68 	bl	4072e8 <memmove>
  406e18:	68a2      	ldr	r2, [r4, #8]
  406e1a:	6823      	ldr	r3, [r4, #0]
  406e1c:	ebcb 0202 	rsb	r2, fp, r2
  406e20:	445b      	add	r3, fp
  406e22:	ebb8 0807 	subs.w	r8, r8, r7
  406e26:	60a2      	str	r2, [r4, #8]
  406e28:	6023      	str	r3, [r4, #0]
  406e2a:	d1db      	bne.n	406de4 <__sfvwrite_r+0x194>
  406e2c:	4621      	mov	r1, r4
  406e2e:	9801      	ldr	r0, [sp, #4]
  406e30:	f7ff fcc8 	bl	4067c4 <_fflush_r>
  406e34:	2800      	cmp	r0, #0
  406e36:	d1a5      	bne.n	406d84 <__sfvwrite_r+0x134>
  406e38:	f8cd 8008 	str.w	r8, [sp, #8]
  406e3c:	e7d2      	b.n	406de4 <__sfvwrite_r+0x194>
  406e3e:	6820      	ldr	r0, [r4, #0]
  406e40:	46b8      	mov	r8, r7
  406e42:	46ba      	mov	sl, r7
  406e44:	e75c      	b.n	406d00 <__sfvwrite_r+0xb0>
  406e46:	464a      	mov	r2, r9
  406e48:	210a      	movs	r1, #10
  406e4a:	4650      	mov	r0, sl
  406e4c:	f000 f930 	bl	4070b0 <memchr>
  406e50:	2800      	cmp	r0, #0
  406e52:	d06f      	beq.n	406f34 <__sfvwrite_r+0x2e4>
  406e54:	3001      	adds	r0, #1
  406e56:	2301      	movs	r3, #1
  406e58:	ebca 0800 	rsb	r8, sl, r0
  406e5c:	9302      	str	r3, [sp, #8]
  406e5e:	e7a5      	b.n	406dac <__sfvwrite_r+0x15c>
  406e60:	6962      	ldr	r2, [r4, #20]
  406e62:	6820      	ldr	r0, [r4, #0]
  406e64:	6921      	ldr	r1, [r4, #16]
  406e66:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406e6a:	ebc1 0a00 	rsb	sl, r1, r0
  406e6e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406e72:	f10a 0001 	add.w	r0, sl, #1
  406e76:	ea4f 0868 	mov.w	r8, r8, asr #1
  406e7a:	4438      	add	r0, r7
  406e7c:	4540      	cmp	r0, r8
  406e7e:	4642      	mov	r2, r8
  406e80:	bf84      	itt	hi
  406e82:	4680      	movhi	r8, r0
  406e84:	4642      	movhi	r2, r8
  406e86:	055b      	lsls	r3, r3, #21
  406e88:	d542      	bpl.n	406f10 <__sfvwrite_r+0x2c0>
  406e8a:	4611      	mov	r1, r2
  406e8c:	9801      	ldr	r0, [sp, #4]
  406e8e:	f7fd fba1 	bl	4045d4 <_malloc_r>
  406e92:	4683      	mov	fp, r0
  406e94:	2800      	cmp	r0, #0
  406e96:	d055      	beq.n	406f44 <__sfvwrite_r+0x2f4>
  406e98:	4652      	mov	r2, sl
  406e9a:	6921      	ldr	r1, [r4, #16]
  406e9c:	f000 f98a 	bl	4071b4 <memcpy>
  406ea0:	89a3      	ldrh	r3, [r4, #12]
  406ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406eaa:	81a3      	strh	r3, [r4, #12]
  406eac:	ebca 0308 	rsb	r3, sl, r8
  406eb0:	eb0b 000a 	add.w	r0, fp, sl
  406eb4:	f8c4 8014 	str.w	r8, [r4, #20]
  406eb8:	f8c4 b010 	str.w	fp, [r4, #16]
  406ebc:	6020      	str	r0, [r4, #0]
  406ebe:	60a3      	str	r3, [r4, #8]
  406ec0:	46b8      	mov	r8, r7
  406ec2:	46ba      	mov	sl, r7
  406ec4:	e71c      	b.n	406d00 <__sfvwrite_r+0xb0>
  406ec6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  406eca:	42bb      	cmp	r3, r7
  406ecc:	bf28      	it	cs
  406ece:	463b      	movcs	r3, r7
  406ed0:	464a      	mov	r2, r9
  406ed2:	fb93 f3f1 	sdiv	r3, r3, r1
  406ed6:	9801      	ldr	r0, [sp, #4]
  406ed8:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406eda:	fb01 f303 	mul.w	r3, r1, r3
  406ede:	69e1      	ldr	r1, [r4, #28]
  406ee0:	47b0      	blx	r6
  406ee2:	2800      	cmp	r0, #0
  406ee4:	f73f af18 	bgt.w	406d18 <__sfvwrite_r+0xc8>
  406ee8:	e74c      	b.n	406d84 <__sfvwrite_r+0x134>
  406eea:	461a      	mov	r2, r3
  406eec:	4651      	mov	r1, sl
  406eee:	9303      	str	r3, [sp, #12]
  406ef0:	f000 f9fa 	bl	4072e8 <memmove>
  406ef4:	6822      	ldr	r2, [r4, #0]
  406ef6:	9b03      	ldr	r3, [sp, #12]
  406ef8:	9801      	ldr	r0, [sp, #4]
  406efa:	441a      	add	r2, r3
  406efc:	6022      	str	r2, [r4, #0]
  406efe:	4621      	mov	r1, r4
  406f00:	f7ff fc60 	bl	4067c4 <_fflush_r>
  406f04:	9b03      	ldr	r3, [sp, #12]
  406f06:	2800      	cmp	r0, #0
  406f08:	f47f af3c 	bne.w	406d84 <__sfvwrite_r+0x134>
  406f0c:	461f      	mov	r7, r3
  406f0e:	e766      	b.n	406dde <__sfvwrite_r+0x18e>
  406f10:	9801      	ldr	r0, [sp, #4]
  406f12:	f000 fa4d 	bl	4073b0 <_realloc_r>
  406f16:	4683      	mov	fp, r0
  406f18:	2800      	cmp	r0, #0
  406f1a:	d1c7      	bne.n	406eac <__sfvwrite_r+0x25c>
  406f1c:	9d01      	ldr	r5, [sp, #4]
  406f1e:	6921      	ldr	r1, [r4, #16]
  406f20:	4628      	mov	r0, r5
  406f22:	f7ff fdad 	bl	406a80 <_free_r>
  406f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f2a:	220c      	movs	r2, #12
  406f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406f30:	602a      	str	r2, [r5, #0]
  406f32:	e729      	b.n	406d88 <__sfvwrite_r+0x138>
  406f34:	2301      	movs	r3, #1
  406f36:	f109 0801 	add.w	r8, r9, #1
  406f3a:	9302      	str	r3, [sp, #8]
  406f3c:	e736      	b.n	406dac <__sfvwrite_r+0x15c>
  406f3e:	f04f 30ff 	mov.w	r0, #4294967295
  406f42:	e6b8      	b.n	406cb6 <__sfvwrite_r+0x66>
  406f44:	9a01      	ldr	r2, [sp, #4]
  406f46:	230c      	movs	r3, #12
  406f48:	6013      	str	r3, [r2, #0]
  406f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f4e:	e71b      	b.n	406d88 <__sfvwrite_r+0x138>
  406f50:	7ffffc00 	.word	0x7ffffc00

00406f54 <_fwalk_reent>:
  406f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406f58:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406f5c:	d01f      	beq.n	406f9e <_fwalk_reent+0x4a>
  406f5e:	4688      	mov	r8, r1
  406f60:	4606      	mov	r6, r0
  406f62:	f04f 0900 	mov.w	r9, #0
  406f66:	687d      	ldr	r5, [r7, #4]
  406f68:	68bc      	ldr	r4, [r7, #8]
  406f6a:	3d01      	subs	r5, #1
  406f6c:	d411      	bmi.n	406f92 <_fwalk_reent+0x3e>
  406f6e:	89a3      	ldrh	r3, [r4, #12]
  406f70:	2b01      	cmp	r3, #1
  406f72:	f105 35ff 	add.w	r5, r5, #4294967295
  406f76:	d908      	bls.n	406f8a <_fwalk_reent+0x36>
  406f78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406f7c:	3301      	adds	r3, #1
  406f7e:	4621      	mov	r1, r4
  406f80:	4630      	mov	r0, r6
  406f82:	d002      	beq.n	406f8a <_fwalk_reent+0x36>
  406f84:	47c0      	blx	r8
  406f86:	ea49 0900 	orr.w	r9, r9, r0
  406f8a:	1c6b      	adds	r3, r5, #1
  406f8c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406f90:	d1ed      	bne.n	406f6e <_fwalk_reent+0x1a>
  406f92:	683f      	ldr	r7, [r7, #0]
  406f94:	2f00      	cmp	r7, #0
  406f96:	d1e6      	bne.n	406f66 <_fwalk_reent+0x12>
  406f98:	4648      	mov	r0, r9
  406f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406f9e:	46b9      	mov	r9, r7
  406fa0:	4648      	mov	r0, r9
  406fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406fa6:	bf00      	nop

00406fa8 <__locale_charset>:
  406fa8:	4800      	ldr	r0, [pc, #0]	; (406fac <__locale_charset+0x4>)
  406faa:	4770      	bx	lr
  406fac:	2040085c 	.word	0x2040085c

00406fb0 <__locale_mb_cur_max>:
  406fb0:	4b01      	ldr	r3, [pc, #4]	; (406fb8 <__locale_mb_cur_max+0x8>)
  406fb2:	6818      	ldr	r0, [r3, #0]
  406fb4:	4770      	bx	lr
  406fb6:	bf00      	nop
  406fb8:	2040087c 	.word	0x2040087c

00406fbc <__swhatbuf_r>:
  406fbc:	b570      	push	{r4, r5, r6, lr}
  406fbe:	460d      	mov	r5, r1
  406fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406fc4:	2900      	cmp	r1, #0
  406fc6:	b090      	sub	sp, #64	; 0x40
  406fc8:	4614      	mov	r4, r2
  406fca:	461e      	mov	r6, r3
  406fcc:	db14      	blt.n	406ff8 <__swhatbuf_r+0x3c>
  406fce:	aa01      	add	r2, sp, #4
  406fd0:	f000 fdd4 	bl	407b7c <_fstat_r>
  406fd4:	2800      	cmp	r0, #0
  406fd6:	db0f      	blt.n	406ff8 <__swhatbuf_r+0x3c>
  406fd8:	9a02      	ldr	r2, [sp, #8]
  406fda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406fde:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406fe2:	fab2 f282 	clz	r2, r2
  406fe6:	0952      	lsrs	r2, r2, #5
  406fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406fec:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406ff0:	6032      	str	r2, [r6, #0]
  406ff2:	6023      	str	r3, [r4, #0]
  406ff4:	b010      	add	sp, #64	; 0x40
  406ff6:	bd70      	pop	{r4, r5, r6, pc}
  406ff8:	89a8      	ldrh	r0, [r5, #12]
  406ffa:	f000 0080 	and.w	r0, r0, #128	; 0x80
  406ffe:	b282      	uxth	r2, r0
  407000:	2000      	movs	r0, #0
  407002:	6030      	str	r0, [r6, #0]
  407004:	b11a      	cbz	r2, 40700e <__swhatbuf_r+0x52>
  407006:	2340      	movs	r3, #64	; 0x40
  407008:	6023      	str	r3, [r4, #0]
  40700a:	b010      	add	sp, #64	; 0x40
  40700c:	bd70      	pop	{r4, r5, r6, pc}
  40700e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407012:	4610      	mov	r0, r2
  407014:	6023      	str	r3, [r4, #0]
  407016:	b010      	add	sp, #64	; 0x40
  407018:	bd70      	pop	{r4, r5, r6, pc}
  40701a:	bf00      	nop

0040701c <__smakebuf_r>:
  40701c:	898a      	ldrh	r2, [r1, #12]
  40701e:	0792      	lsls	r2, r2, #30
  407020:	460b      	mov	r3, r1
  407022:	d506      	bpl.n	407032 <__smakebuf_r+0x16>
  407024:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407028:	2101      	movs	r1, #1
  40702a:	601a      	str	r2, [r3, #0]
  40702c:	611a      	str	r2, [r3, #16]
  40702e:	6159      	str	r1, [r3, #20]
  407030:	4770      	bx	lr
  407032:	b5f0      	push	{r4, r5, r6, r7, lr}
  407034:	b083      	sub	sp, #12
  407036:	ab01      	add	r3, sp, #4
  407038:	466a      	mov	r2, sp
  40703a:	460c      	mov	r4, r1
  40703c:	4605      	mov	r5, r0
  40703e:	f7ff ffbd 	bl	406fbc <__swhatbuf_r>
  407042:	9900      	ldr	r1, [sp, #0]
  407044:	4606      	mov	r6, r0
  407046:	4628      	mov	r0, r5
  407048:	f7fd fac4 	bl	4045d4 <_malloc_r>
  40704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407050:	b1d0      	cbz	r0, 407088 <__smakebuf_r+0x6c>
  407052:	9a01      	ldr	r2, [sp, #4]
  407054:	4f12      	ldr	r7, [pc, #72]	; (4070a0 <__smakebuf_r+0x84>)
  407056:	9900      	ldr	r1, [sp, #0]
  407058:	63ef      	str	r7, [r5, #60]	; 0x3c
  40705a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40705e:	81a3      	strh	r3, [r4, #12]
  407060:	6020      	str	r0, [r4, #0]
  407062:	6120      	str	r0, [r4, #16]
  407064:	6161      	str	r1, [r4, #20]
  407066:	b91a      	cbnz	r2, 407070 <__smakebuf_r+0x54>
  407068:	4333      	orrs	r3, r6
  40706a:	81a3      	strh	r3, [r4, #12]
  40706c:	b003      	add	sp, #12
  40706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407070:	4628      	mov	r0, r5
  407072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407076:	f000 fd95 	bl	407ba4 <_isatty_r>
  40707a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40707e:	2800      	cmp	r0, #0
  407080:	d0f2      	beq.n	407068 <__smakebuf_r+0x4c>
  407082:	f043 0301 	orr.w	r3, r3, #1
  407086:	e7ef      	b.n	407068 <__smakebuf_r+0x4c>
  407088:	059a      	lsls	r2, r3, #22
  40708a:	d4ef      	bmi.n	40706c <__smakebuf_r+0x50>
  40708c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407090:	f043 0302 	orr.w	r3, r3, #2
  407094:	2101      	movs	r1, #1
  407096:	81a3      	strh	r3, [r4, #12]
  407098:	6022      	str	r2, [r4, #0]
  40709a:	6122      	str	r2, [r4, #16]
  40709c:	6161      	str	r1, [r4, #20]
  40709e:	e7e5      	b.n	40706c <__smakebuf_r+0x50>
  4070a0:	004067f1 	.word	0x004067f1
	...

004070b0 <memchr>:
  4070b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4070b4:	2a10      	cmp	r2, #16
  4070b6:	db2b      	blt.n	407110 <memchr+0x60>
  4070b8:	f010 0f07 	tst.w	r0, #7
  4070bc:	d008      	beq.n	4070d0 <memchr+0x20>
  4070be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4070c2:	3a01      	subs	r2, #1
  4070c4:	428b      	cmp	r3, r1
  4070c6:	d02d      	beq.n	407124 <memchr+0x74>
  4070c8:	f010 0f07 	tst.w	r0, #7
  4070cc:	b342      	cbz	r2, 407120 <memchr+0x70>
  4070ce:	d1f6      	bne.n	4070be <memchr+0xe>
  4070d0:	b4f0      	push	{r4, r5, r6, r7}
  4070d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4070d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4070da:	f022 0407 	bic.w	r4, r2, #7
  4070de:	f07f 0700 	mvns.w	r7, #0
  4070e2:	2300      	movs	r3, #0
  4070e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4070e8:	3c08      	subs	r4, #8
  4070ea:	ea85 0501 	eor.w	r5, r5, r1
  4070ee:	ea86 0601 	eor.w	r6, r6, r1
  4070f2:	fa85 f547 	uadd8	r5, r5, r7
  4070f6:	faa3 f587 	sel	r5, r3, r7
  4070fa:	fa86 f647 	uadd8	r6, r6, r7
  4070fe:	faa5 f687 	sel	r6, r5, r7
  407102:	b98e      	cbnz	r6, 407128 <memchr+0x78>
  407104:	d1ee      	bne.n	4070e4 <memchr+0x34>
  407106:	bcf0      	pop	{r4, r5, r6, r7}
  407108:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40710c:	f002 0207 	and.w	r2, r2, #7
  407110:	b132      	cbz	r2, 407120 <memchr+0x70>
  407112:	f810 3b01 	ldrb.w	r3, [r0], #1
  407116:	3a01      	subs	r2, #1
  407118:	ea83 0301 	eor.w	r3, r3, r1
  40711c:	b113      	cbz	r3, 407124 <memchr+0x74>
  40711e:	d1f8      	bne.n	407112 <memchr+0x62>
  407120:	2000      	movs	r0, #0
  407122:	4770      	bx	lr
  407124:	3801      	subs	r0, #1
  407126:	4770      	bx	lr
  407128:	2d00      	cmp	r5, #0
  40712a:	bf06      	itte	eq
  40712c:	4635      	moveq	r5, r6
  40712e:	3803      	subeq	r0, #3
  407130:	3807      	subne	r0, #7
  407132:	f015 0f01 	tst.w	r5, #1
  407136:	d107      	bne.n	407148 <memchr+0x98>
  407138:	3001      	adds	r0, #1
  40713a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40713e:	bf02      	ittt	eq
  407140:	3001      	addeq	r0, #1
  407142:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407146:	3001      	addeq	r0, #1
  407148:	bcf0      	pop	{r4, r5, r6, r7}
  40714a:	3801      	subs	r0, #1
  40714c:	4770      	bx	lr
  40714e:	bf00      	nop

00407150 <memcmp>:
  407150:	2a03      	cmp	r2, #3
  407152:	b470      	push	{r4, r5, r6}
  407154:	d926      	bls.n	4071a4 <memcmp+0x54>
  407156:	ea40 0301 	orr.w	r3, r0, r1
  40715a:	079b      	lsls	r3, r3, #30
  40715c:	d011      	beq.n	407182 <memcmp+0x32>
  40715e:	7804      	ldrb	r4, [r0, #0]
  407160:	780d      	ldrb	r5, [r1, #0]
  407162:	42ac      	cmp	r4, r5
  407164:	d122      	bne.n	4071ac <memcmp+0x5c>
  407166:	4402      	add	r2, r0
  407168:	1c43      	adds	r3, r0, #1
  40716a:	e005      	b.n	407178 <memcmp+0x28>
  40716c:	f813 4b01 	ldrb.w	r4, [r3], #1
  407170:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  407174:	42ac      	cmp	r4, r5
  407176:	d119      	bne.n	4071ac <memcmp+0x5c>
  407178:	4293      	cmp	r3, r2
  40717a:	d1f7      	bne.n	40716c <memcmp+0x1c>
  40717c:	2000      	movs	r0, #0
  40717e:	bc70      	pop	{r4, r5, r6}
  407180:	4770      	bx	lr
  407182:	460c      	mov	r4, r1
  407184:	4603      	mov	r3, r0
  407186:	681e      	ldr	r6, [r3, #0]
  407188:	6825      	ldr	r5, [r4, #0]
  40718a:	42ae      	cmp	r6, r5
  40718c:	4618      	mov	r0, r3
  40718e:	4621      	mov	r1, r4
  407190:	f103 0304 	add.w	r3, r3, #4
  407194:	f104 0404 	add.w	r4, r4, #4
  407198:	d1e1      	bne.n	40715e <memcmp+0xe>
  40719a:	3a04      	subs	r2, #4
  40719c:	2a03      	cmp	r2, #3
  40719e:	4618      	mov	r0, r3
  4071a0:	4621      	mov	r1, r4
  4071a2:	d8f0      	bhi.n	407186 <memcmp+0x36>
  4071a4:	2a00      	cmp	r2, #0
  4071a6:	d1da      	bne.n	40715e <memcmp+0xe>
  4071a8:	4610      	mov	r0, r2
  4071aa:	e7e8      	b.n	40717e <memcmp+0x2e>
  4071ac:	1b60      	subs	r0, r4, r5
  4071ae:	bc70      	pop	{r4, r5, r6}
  4071b0:	4770      	bx	lr
  4071b2:	bf00      	nop

004071b4 <memcpy>:
  4071b4:	4684      	mov	ip, r0
  4071b6:	ea41 0300 	orr.w	r3, r1, r0
  4071ba:	f013 0303 	ands.w	r3, r3, #3
  4071be:	d16d      	bne.n	40729c <memcpy+0xe8>
  4071c0:	3a40      	subs	r2, #64	; 0x40
  4071c2:	d341      	bcc.n	407248 <memcpy+0x94>
  4071c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4071c8:	f840 3b04 	str.w	r3, [r0], #4
  4071cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4071d0:	f840 3b04 	str.w	r3, [r0], #4
  4071d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4071d8:	f840 3b04 	str.w	r3, [r0], #4
  4071dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4071e0:	f840 3b04 	str.w	r3, [r0], #4
  4071e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4071e8:	f840 3b04 	str.w	r3, [r0], #4
  4071ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4071f0:	f840 3b04 	str.w	r3, [r0], #4
  4071f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4071f8:	f840 3b04 	str.w	r3, [r0], #4
  4071fc:	f851 3b04 	ldr.w	r3, [r1], #4
  407200:	f840 3b04 	str.w	r3, [r0], #4
  407204:	f851 3b04 	ldr.w	r3, [r1], #4
  407208:	f840 3b04 	str.w	r3, [r0], #4
  40720c:	f851 3b04 	ldr.w	r3, [r1], #4
  407210:	f840 3b04 	str.w	r3, [r0], #4
  407214:	f851 3b04 	ldr.w	r3, [r1], #4
  407218:	f840 3b04 	str.w	r3, [r0], #4
  40721c:	f851 3b04 	ldr.w	r3, [r1], #4
  407220:	f840 3b04 	str.w	r3, [r0], #4
  407224:	f851 3b04 	ldr.w	r3, [r1], #4
  407228:	f840 3b04 	str.w	r3, [r0], #4
  40722c:	f851 3b04 	ldr.w	r3, [r1], #4
  407230:	f840 3b04 	str.w	r3, [r0], #4
  407234:	f851 3b04 	ldr.w	r3, [r1], #4
  407238:	f840 3b04 	str.w	r3, [r0], #4
  40723c:	f851 3b04 	ldr.w	r3, [r1], #4
  407240:	f840 3b04 	str.w	r3, [r0], #4
  407244:	3a40      	subs	r2, #64	; 0x40
  407246:	d2bd      	bcs.n	4071c4 <memcpy+0x10>
  407248:	3230      	adds	r2, #48	; 0x30
  40724a:	d311      	bcc.n	407270 <memcpy+0xbc>
  40724c:	f851 3b04 	ldr.w	r3, [r1], #4
  407250:	f840 3b04 	str.w	r3, [r0], #4
  407254:	f851 3b04 	ldr.w	r3, [r1], #4
  407258:	f840 3b04 	str.w	r3, [r0], #4
  40725c:	f851 3b04 	ldr.w	r3, [r1], #4
  407260:	f840 3b04 	str.w	r3, [r0], #4
  407264:	f851 3b04 	ldr.w	r3, [r1], #4
  407268:	f840 3b04 	str.w	r3, [r0], #4
  40726c:	3a10      	subs	r2, #16
  40726e:	d2ed      	bcs.n	40724c <memcpy+0x98>
  407270:	320c      	adds	r2, #12
  407272:	d305      	bcc.n	407280 <memcpy+0xcc>
  407274:	f851 3b04 	ldr.w	r3, [r1], #4
  407278:	f840 3b04 	str.w	r3, [r0], #4
  40727c:	3a04      	subs	r2, #4
  40727e:	d2f9      	bcs.n	407274 <memcpy+0xc0>
  407280:	3204      	adds	r2, #4
  407282:	d008      	beq.n	407296 <memcpy+0xe2>
  407284:	07d2      	lsls	r2, r2, #31
  407286:	bf1c      	itt	ne
  407288:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40728c:	f800 3b01 	strbne.w	r3, [r0], #1
  407290:	d301      	bcc.n	407296 <memcpy+0xe2>
  407292:	880b      	ldrh	r3, [r1, #0]
  407294:	8003      	strh	r3, [r0, #0]
  407296:	4660      	mov	r0, ip
  407298:	4770      	bx	lr
  40729a:	bf00      	nop
  40729c:	2a08      	cmp	r2, #8
  40729e:	d313      	bcc.n	4072c8 <memcpy+0x114>
  4072a0:	078b      	lsls	r3, r1, #30
  4072a2:	d08d      	beq.n	4071c0 <memcpy+0xc>
  4072a4:	f010 0303 	ands.w	r3, r0, #3
  4072a8:	d08a      	beq.n	4071c0 <memcpy+0xc>
  4072aa:	f1c3 0304 	rsb	r3, r3, #4
  4072ae:	1ad2      	subs	r2, r2, r3
  4072b0:	07db      	lsls	r3, r3, #31
  4072b2:	bf1c      	itt	ne
  4072b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4072b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4072bc:	d380      	bcc.n	4071c0 <memcpy+0xc>
  4072be:	f831 3b02 	ldrh.w	r3, [r1], #2
  4072c2:	f820 3b02 	strh.w	r3, [r0], #2
  4072c6:	e77b      	b.n	4071c0 <memcpy+0xc>
  4072c8:	3a04      	subs	r2, #4
  4072ca:	d3d9      	bcc.n	407280 <memcpy+0xcc>
  4072cc:	3a01      	subs	r2, #1
  4072ce:	f811 3b01 	ldrb.w	r3, [r1], #1
  4072d2:	f800 3b01 	strb.w	r3, [r0], #1
  4072d6:	d2f9      	bcs.n	4072cc <memcpy+0x118>
  4072d8:	780b      	ldrb	r3, [r1, #0]
  4072da:	7003      	strb	r3, [r0, #0]
  4072dc:	784b      	ldrb	r3, [r1, #1]
  4072de:	7043      	strb	r3, [r0, #1]
  4072e0:	788b      	ldrb	r3, [r1, #2]
  4072e2:	7083      	strb	r3, [r0, #2]
  4072e4:	4660      	mov	r0, ip
  4072e6:	4770      	bx	lr

004072e8 <memmove>:
  4072e8:	4288      	cmp	r0, r1
  4072ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  4072ec:	d90d      	bls.n	40730a <memmove+0x22>
  4072ee:	188b      	adds	r3, r1, r2
  4072f0:	4298      	cmp	r0, r3
  4072f2:	d20a      	bcs.n	40730a <memmove+0x22>
  4072f4:	1881      	adds	r1, r0, r2
  4072f6:	2a00      	cmp	r2, #0
  4072f8:	d051      	beq.n	40739e <memmove+0xb6>
  4072fa:	1a9a      	subs	r2, r3, r2
  4072fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407300:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407304:	4293      	cmp	r3, r2
  407306:	d1f9      	bne.n	4072fc <memmove+0x14>
  407308:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40730a:	2a0f      	cmp	r2, #15
  40730c:	d948      	bls.n	4073a0 <memmove+0xb8>
  40730e:	ea41 0300 	orr.w	r3, r1, r0
  407312:	079b      	lsls	r3, r3, #30
  407314:	d146      	bne.n	4073a4 <memmove+0xbc>
  407316:	f100 0410 	add.w	r4, r0, #16
  40731a:	f101 0310 	add.w	r3, r1, #16
  40731e:	4615      	mov	r5, r2
  407320:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407324:	f844 6c10 	str.w	r6, [r4, #-16]
  407328:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40732c:	f844 6c0c 	str.w	r6, [r4, #-12]
  407330:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407334:	f844 6c08 	str.w	r6, [r4, #-8]
  407338:	3d10      	subs	r5, #16
  40733a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40733e:	f844 6c04 	str.w	r6, [r4, #-4]
  407342:	2d0f      	cmp	r5, #15
  407344:	f103 0310 	add.w	r3, r3, #16
  407348:	f104 0410 	add.w	r4, r4, #16
  40734c:	d8e8      	bhi.n	407320 <memmove+0x38>
  40734e:	f1a2 0310 	sub.w	r3, r2, #16
  407352:	f023 030f 	bic.w	r3, r3, #15
  407356:	f002 0e0f 	and.w	lr, r2, #15
  40735a:	3310      	adds	r3, #16
  40735c:	f1be 0f03 	cmp.w	lr, #3
  407360:	4419      	add	r1, r3
  407362:	4403      	add	r3, r0
  407364:	d921      	bls.n	4073aa <memmove+0xc2>
  407366:	1f1e      	subs	r6, r3, #4
  407368:	460d      	mov	r5, r1
  40736a:	4674      	mov	r4, lr
  40736c:	3c04      	subs	r4, #4
  40736e:	f855 7b04 	ldr.w	r7, [r5], #4
  407372:	f846 7f04 	str.w	r7, [r6, #4]!
  407376:	2c03      	cmp	r4, #3
  407378:	d8f8      	bhi.n	40736c <memmove+0x84>
  40737a:	f1ae 0404 	sub.w	r4, lr, #4
  40737e:	f024 0403 	bic.w	r4, r4, #3
  407382:	3404      	adds	r4, #4
  407384:	4423      	add	r3, r4
  407386:	4421      	add	r1, r4
  407388:	f002 0203 	and.w	r2, r2, #3
  40738c:	b162      	cbz	r2, 4073a8 <memmove+0xc0>
  40738e:	3b01      	subs	r3, #1
  407390:	440a      	add	r2, r1
  407392:	f811 4b01 	ldrb.w	r4, [r1], #1
  407396:	f803 4f01 	strb.w	r4, [r3, #1]!
  40739a:	428a      	cmp	r2, r1
  40739c:	d1f9      	bne.n	407392 <memmove+0xaa>
  40739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073a0:	4603      	mov	r3, r0
  4073a2:	e7f3      	b.n	40738c <memmove+0xa4>
  4073a4:	4603      	mov	r3, r0
  4073a6:	e7f2      	b.n	40738e <memmove+0xa6>
  4073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073aa:	4672      	mov	r2, lr
  4073ac:	e7ee      	b.n	40738c <memmove+0xa4>
  4073ae:	bf00      	nop

004073b0 <_realloc_r>:
  4073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073b4:	4617      	mov	r7, r2
  4073b6:	b083      	sub	sp, #12
  4073b8:	2900      	cmp	r1, #0
  4073ba:	f000 80c1 	beq.w	407540 <_realloc_r+0x190>
  4073be:	460e      	mov	r6, r1
  4073c0:	4681      	mov	r9, r0
  4073c2:	f107 050b 	add.w	r5, r7, #11
  4073c6:	f7fd fc0b 	bl	404be0 <__malloc_lock>
  4073ca:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4073ce:	2d16      	cmp	r5, #22
  4073d0:	f02e 0403 	bic.w	r4, lr, #3
  4073d4:	f1a6 0808 	sub.w	r8, r6, #8
  4073d8:	d840      	bhi.n	40745c <_realloc_r+0xac>
  4073da:	2210      	movs	r2, #16
  4073dc:	4615      	mov	r5, r2
  4073de:	42af      	cmp	r7, r5
  4073e0:	d841      	bhi.n	407466 <_realloc_r+0xb6>
  4073e2:	4294      	cmp	r4, r2
  4073e4:	da75      	bge.n	4074d2 <_realloc_r+0x122>
  4073e6:	4bc9      	ldr	r3, [pc, #804]	; (40770c <_realloc_r+0x35c>)
  4073e8:	6899      	ldr	r1, [r3, #8]
  4073ea:	eb08 0004 	add.w	r0, r8, r4
  4073ee:	4288      	cmp	r0, r1
  4073f0:	6841      	ldr	r1, [r0, #4]
  4073f2:	f000 80d9 	beq.w	4075a8 <_realloc_r+0x1f8>
  4073f6:	f021 0301 	bic.w	r3, r1, #1
  4073fa:	4403      	add	r3, r0
  4073fc:	685b      	ldr	r3, [r3, #4]
  4073fe:	07db      	lsls	r3, r3, #31
  407400:	d57d      	bpl.n	4074fe <_realloc_r+0x14e>
  407402:	f01e 0f01 	tst.w	lr, #1
  407406:	d035      	beq.n	407474 <_realloc_r+0xc4>
  407408:	4639      	mov	r1, r7
  40740a:	4648      	mov	r0, r9
  40740c:	f7fd f8e2 	bl	4045d4 <_malloc_r>
  407410:	4607      	mov	r7, r0
  407412:	b1e0      	cbz	r0, 40744e <_realloc_r+0x9e>
  407414:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407418:	f023 0301 	bic.w	r3, r3, #1
  40741c:	4443      	add	r3, r8
  40741e:	f1a0 0208 	sub.w	r2, r0, #8
  407422:	429a      	cmp	r2, r3
  407424:	f000 8144 	beq.w	4076b0 <_realloc_r+0x300>
  407428:	1f22      	subs	r2, r4, #4
  40742a:	2a24      	cmp	r2, #36	; 0x24
  40742c:	f200 8131 	bhi.w	407692 <_realloc_r+0x2e2>
  407430:	2a13      	cmp	r2, #19
  407432:	f200 8104 	bhi.w	40763e <_realloc_r+0x28e>
  407436:	4603      	mov	r3, r0
  407438:	4632      	mov	r2, r6
  40743a:	6811      	ldr	r1, [r2, #0]
  40743c:	6019      	str	r1, [r3, #0]
  40743e:	6851      	ldr	r1, [r2, #4]
  407440:	6059      	str	r1, [r3, #4]
  407442:	6892      	ldr	r2, [r2, #8]
  407444:	609a      	str	r2, [r3, #8]
  407446:	4631      	mov	r1, r6
  407448:	4648      	mov	r0, r9
  40744a:	f7ff fb19 	bl	406a80 <_free_r>
  40744e:	4648      	mov	r0, r9
  407450:	f7fd fbc8 	bl	404be4 <__malloc_unlock>
  407454:	4638      	mov	r0, r7
  407456:	b003      	add	sp, #12
  407458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40745c:	f025 0507 	bic.w	r5, r5, #7
  407460:	2d00      	cmp	r5, #0
  407462:	462a      	mov	r2, r5
  407464:	dabb      	bge.n	4073de <_realloc_r+0x2e>
  407466:	230c      	movs	r3, #12
  407468:	2000      	movs	r0, #0
  40746a:	f8c9 3000 	str.w	r3, [r9]
  40746e:	b003      	add	sp, #12
  407470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407474:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407478:	ebc3 0a08 	rsb	sl, r3, r8
  40747c:	f8da 3004 	ldr.w	r3, [sl, #4]
  407480:	f023 0c03 	bic.w	ip, r3, #3
  407484:	eb04 030c 	add.w	r3, r4, ip
  407488:	4293      	cmp	r3, r2
  40748a:	dbbd      	blt.n	407408 <_realloc_r+0x58>
  40748c:	4657      	mov	r7, sl
  40748e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407492:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407496:	1f22      	subs	r2, r4, #4
  407498:	2a24      	cmp	r2, #36	; 0x24
  40749a:	60c1      	str	r1, [r0, #12]
  40749c:	6088      	str	r0, [r1, #8]
  40749e:	f200 8117 	bhi.w	4076d0 <_realloc_r+0x320>
  4074a2:	2a13      	cmp	r2, #19
  4074a4:	f240 8112 	bls.w	4076cc <_realloc_r+0x31c>
  4074a8:	6831      	ldr	r1, [r6, #0]
  4074aa:	f8ca 1008 	str.w	r1, [sl, #8]
  4074ae:	6871      	ldr	r1, [r6, #4]
  4074b0:	f8ca 100c 	str.w	r1, [sl, #12]
  4074b4:	2a1b      	cmp	r2, #27
  4074b6:	f200 812b 	bhi.w	407710 <_realloc_r+0x360>
  4074ba:	3608      	adds	r6, #8
  4074bc:	f10a 0210 	add.w	r2, sl, #16
  4074c0:	6831      	ldr	r1, [r6, #0]
  4074c2:	6011      	str	r1, [r2, #0]
  4074c4:	6871      	ldr	r1, [r6, #4]
  4074c6:	6051      	str	r1, [r2, #4]
  4074c8:	68b1      	ldr	r1, [r6, #8]
  4074ca:	6091      	str	r1, [r2, #8]
  4074cc:	463e      	mov	r6, r7
  4074ce:	461c      	mov	r4, r3
  4074d0:	46d0      	mov	r8, sl
  4074d2:	1b63      	subs	r3, r4, r5
  4074d4:	2b0f      	cmp	r3, #15
  4074d6:	d81d      	bhi.n	407514 <_realloc_r+0x164>
  4074d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4074dc:	f003 0301 	and.w	r3, r3, #1
  4074e0:	4323      	orrs	r3, r4
  4074e2:	4444      	add	r4, r8
  4074e4:	f8c8 3004 	str.w	r3, [r8, #4]
  4074e8:	6863      	ldr	r3, [r4, #4]
  4074ea:	f043 0301 	orr.w	r3, r3, #1
  4074ee:	6063      	str	r3, [r4, #4]
  4074f0:	4648      	mov	r0, r9
  4074f2:	f7fd fb77 	bl	404be4 <__malloc_unlock>
  4074f6:	4630      	mov	r0, r6
  4074f8:	b003      	add	sp, #12
  4074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074fe:	f021 0103 	bic.w	r1, r1, #3
  407502:	4421      	add	r1, r4
  407504:	4291      	cmp	r1, r2
  407506:	db21      	blt.n	40754c <_realloc_r+0x19c>
  407508:	68c3      	ldr	r3, [r0, #12]
  40750a:	6882      	ldr	r2, [r0, #8]
  40750c:	460c      	mov	r4, r1
  40750e:	60d3      	str	r3, [r2, #12]
  407510:	609a      	str	r2, [r3, #8]
  407512:	e7de      	b.n	4074d2 <_realloc_r+0x122>
  407514:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407518:	eb08 0105 	add.w	r1, r8, r5
  40751c:	f002 0201 	and.w	r2, r2, #1
  407520:	4315      	orrs	r5, r2
  407522:	f043 0201 	orr.w	r2, r3, #1
  407526:	440b      	add	r3, r1
  407528:	f8c8 5004 	str.w	r5, [r8, #4]
  40752c:	604a      	str	r2, [r1, #4]
  40752e:	685a      	ldr	r2, [r3, #4]
  407530:	f042 0201 	orr.w	r2, r2, #1
  407534:	3108      	adds	r1, #8
  407536:	605a      	str	r2, [r3, #4]
  407538:	4648      	mov	r0, r9
  40753a:	f7ff faa1 	bl	406a80 <_free_r>
  40753e:	e7d7      	b.n	4074f0 <_realloc_r+0x140>
  407540:	4611      	mov	r1, r2
  407542:	b003      	add	sp, #12
  407544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407548:	f7fd b844 	b.w	4045d4 <_malloc_r>
  40754c:	f01e 0f01 	tst.w	lr, #1
  407550:	f47f af5a 	bne.w	407408 <_realloc_r+0x58>
  407554:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407558:	ebc3 0a08 	rsb	sl, r3, r8
  40755c:	f8da 3004 	ldr.w	r3, [sl, #4]
  407560:	f023 0c03 	bic.w	ip, r3, #3
  407564:	eb01 0e0c 	add.w	lr, r1, ip
  407568:	4596      	cmp	lr, r2
  40756a:	db8b      	blt.n	407484 <_realloc_r+0xd4>
  40756c:	68c3      	ldr	r3, [r0, #12]
  40756e:	6882      	ldr	r2, [r0, #8]
  407570:	4657      	mov	r7, sl
  407572:	60d3      	str	r3, [r2, #12]
  407574:	609a      	str	r2, [r3, #8]
  407576:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40757a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40757e:	60cb      	str	r3, [r1, #12]
  407580:	1f22      	subs	r2, r4, #4
  407582:	2a24      	cmp	r2, #36	; 0x24
  407584:	6099      	str	r1, [r3, #8]
  407586:	f200 8099 	bhi.w	4076bc <_realloc_r+0x30c>
  40758a:	2a13      	cmp	r2, #19
  40758c:	d962      	bls.n	407654 <_realloc_r+0x2a4>
  40758e:	6833      	ldr	r3, [r6, #0]
  407590:	f8ca 3008 	str.w	r3, [sl, #8]
  407594:	6873      	ldr	r3, [r6, #4]
  407596:	f8ca 300c 	str.w	r3, [sl, #12]
  40759a:	2a1b      	cmp	r2, #27
  40759c:	f200 80a0 	bhi.w	4076e0 <_realloc_r+0x330>
  4075a0:	3608      	adds	r6, #8
  4075a2:	f10a 0310 	add.w	r3, sl, #16
  4075a6:	e056      	b.n	407656 <_realloc_r+0x2a6>
  4075a8:	f021 0b03 	bic.w	fp, r1, #3
  4075ac:	44a3      	add	fp, r4
  4075ae:	f105 0010 	add.w	r0, r5, #16
  4075b2:	4583      	cmp	fp, r0
  4075b4:	da59      	bge.n	40766a <_realloc_r+0x2ba>
  4075b6:	f01e 0f01 	tst.w	lr, #1
  4075ba:	f47f af25 	bne.w	407408 <_realloc_r+0x58>
  4075be:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4075c2:	ebc1 0a08 	rsb	sl, r1, r8
  4075c6:	f8da 1004 	ldr.w	r1, [sl, #4]
  4075ca:	f021 0c03 	bic.w	ip, r1, #3
  4075ce:	44e3      	add	fp, ip
  4075d0:	4558      	cmp	r0, fp
  4075d2:	f73f af57 	bgt.w	407484 <_realloc_r+0xd4>
  4075d6:	4657      	mov	r7, sl
  4075d8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4075dc:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4075e0:	1f22      	subs	r2, r4, #4
  4075e2:	2a24      	cmp	r2, #36	; 0x24
  4075e4:	60c1      	str	r1, [r0, #12]
  4075e6:	6088      	str	r0, [r1, #8]
  4075e8:	f200 80b4 	bhi.w	407754 <_realloc_r+0x3a4>
  4075ec:	2a13      	cmp	r2, #19
  4075ee:	f240 80a5 	bls.w	40773c <_realloc_r+0x38c>
  4075f2:	6831      	ldr	r1, [r6, #0]
  4075f4:	f8ca 1008 	str.w	r1, [sl, #8]
  4075f8:	6871      	ldr	r1, [r6, #4]
  4075fa:	f8ca 100c 	str.w	r1, [sl, #12]
  4075fe:	2a1b      	cmp	r2, #27
  407600:	f200 80af 	bhi.w	407762 <_realloc_r+0x3b2>
  407604:	3608      	adds	r6, #8
  407606:	f10a 0210 	add.w	r2, sl, #16
  40760a:	6831      	ldr	r1, [r6, #0]
  40760c:	6011      	str	r1, [r2, #0]
  40760e:	6871      	ldr	r1, [r6, #4]
  407610:	6051      	str	r1, [r2, #4]
  407612:	68b1      	ldr	r1, [r6, #8]
  407614:	6091      	str	r1, [r2, #8]
  407616:	eb0a 0105 	add.w	r1, sl, r5
  40761a:	ebc5 020b 	rsb	r2, r5, fp
  40761e:	f042 0201 	orr.w	r2, r2, #1
  407622:	6099      	str	r1, [r3, #8]
  407624:	604a      	str	r2, [r1, #4]
  407626:	f8da 3004 	ldr.w	r3, [sl, #4]
  40762a:	f003 0301 	and.w	r3, r3, #1
  40762e:	431d      	orrs	r5, r3
  407630:	4648      	mov	r0, r9
  407632:	f8ca 5004 	str.w	r5, [sl, #4]
  407636:	f7fd fad5 	bl	404be4 <__malloc_unlock>
  40763a:	4638      	mov	r0, r7
  40763c:	e75c      	b.n	4074f8 <_realloc_r+0x148>
  40763e:	6833      	ldr	r3, [r6, #0]
  407640:	6003      	str	r3, [r0, #0]
  407642:	6873      	ldr	r3, [r6, #4]
  407644:	6043      	str	r3, [r0, #4]
  407646:	2a1b      	cmp	r2, #27
  407648:	d827      	bhi.n	40769a <_realloc_r+0x2ea>
  40764a:	f100 0308 	add.w	r3, r0, #8
  40764e:	f106 0208 	add.w	r2, r6, #8
  407652:	e6f2      	b.n	40743a <_realloc_r+0x8a>
  407654:	463b      	mov	r3, r7
  407656:	6832      	ldr	r2, [r6, #0]
  407658:	601a      	str	r2, [r3, #0]
  40765a:	6872      	ldr	r2, [r6, #4]
  40765c:	605a      	str	r2, [r3, #4]
  40765e:	68b2      	ldr	r2, [r6, #8]
  407660:	609a      	str	r2, [r3, #8]
  407662:	463e      	mov	r6, r7
  407664:	4674      	mov	r4, lr
  407666:	46d0      	mov	r8, sl
  407668:	e733      	b.n	4074d2 <_realloc_r+0x122>
  40766a:	eb08 0105 	add.w	r1, r8, r5
  40766e:	ebc5 0b0b 	rsb	fp, r5, fp
  407672:	f04b 0201 	orr.w	r2, fp, #1
  407676:	6099      	str	r1, [r3, #8]
  407678:	604a      	str	r2, [r1, #4]
  40767a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40767e:	f003 0301 	and.w	r3, r3, #1
  407682:	431d      	orrs	r5, r3
  407684:	4648      	mov	r0, r9
  407686:	f846 5c04 	str.w	r5, [r6, #-4]
  40768a:	f7fd faab 	bl	404be4 <__malloc_unlock>
  40768e:	4630      	mov	r0, r6
  407690:	e732      	b.n	4074f8 <_realloc_r+0x148>
  407692:	4631      	mov	r1, r6
  407694:	f7ff fe28 	bl	4072e8 <memmove>
  407698:	e6d5      	b.n	407446 <_realloc_r+0x96>
  40769a:	68b3      	ldr	r3, [r6, #8]
  40769c:	6083      	str	r3, [r0, #8]
  40769e:	68f3      	ldr	r3, [r6, #12]
  4076a0:	60c3      	str	r3, [r0, #12]
  4076a2:	2a24      	cmp	r2, #36	; 0x24
  4076a4:	d028      	beq.n	4076f8 <_realloc_r+0x348>
  4076a6:	f100 0310 	add.w	r3, r0, #16
  4076aa:	f106 0210 	add.w	r2, r6, #16
  4076ae:	e6c4      	b.n	40743a <_realloc_r+0x8a>
  4076b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4076b4:	f023 0303 	bic.w	r3, r3, #3
  4076b8:	441c      	add	r4, r3
  4076ba:	e70a      	b.n	4074d2 <_realloc_r+0x122>
  4076bc:	4631      	mov	r1, r6
  4076be:	4638      	mov	r0, r7
  4076c0:	4674      	mov	r4, lr
  4076c2:	46d0      	mov	r8, sl
  4076c4:	f7ff fe10 	bl	4072e8 <memmove>
  4076c8:	463e      	mov	r6, r7
  4076ca:	e702      	b.n	4074d2 <_realloc_r+0x122>
  4076cc:	463a      	mov	r2, r7
  4076ce:	e6f7      	b.n	4074c0 <_realloc_r+0x110>
  4076d0:	4631      	mov	r1, r6
  4076d2:	4638      	mov	r0, r7
  4076d4:	461c      	mov	r4, r3
  4076d6:	46d0      	mov	r8, sl
  4076d8:	f7ff fe06 	bl	4072e8 <memmove>
  4076dc:	463e      	mov	r6, r7
  4076de:	e6f8      	b.n	4074d2 <_realloc_r+0x122>
  4076e0:	68b3      	ldr	r3, [r6, #8]
  4076e2:	f8ca 3010 	str.w	r3, [sl, #16]
  4076e6:	68f3      	ldr	r3, [r6, #12]
  4076e8:	f8ca 3014 	str.w	r3, [sl, #20]
  4076ec:	2a24      	cmp	r2, #36	; 0x24
  4076ee:	d01b      	beq.n	407728 <_realloc_r+0x378>
  4076f0:	3610      	adds	r6, #16
  4076f2:	f10a 0318 	add.w	r3, sl, #24
  4076f6:	e7ae      	b.n	407656 <_realloc_r+0x2a6>
  4076f8:	6933      	ldr	r3, [r6, #16]
  4076fa:	6103      	str	r3, [r0, #16]
  4076fc:	6973      	ldr	r3, [r6, #20]
  4076fe:	6143      	str	r3, [r0, #20]
  407700:	f106 0218 	add.w	r2, r6, #24
  407704:	f100 0318 	add.w	r3, r0, #24
  407708:	e697      	b.n	40743a <_realloc_r+0x8a>
  40770a:	bf00      	nop
  40770c:	2040044c 	.word	0x2040044c
  407710:	68b1      	ldr	r1, [r6, #8]
  407712:	f8ca 1010 	str.w	r1, [sl, #16]
  407716:	68f1      	ldr	r1, [r6, #12]
  407718:	f8ca 1014 	str.w	r1, [sl, #20]
  40771c:	2a24      	cmp	r2, #36	; 0x24
  40771e:	d00f      	beq.n	407740 <_realloc_r+0x390>
  407720:	3610      	adds	r6, #16
  407722:	f10a 0218 	add.w	r2, sl, #24
  407726:	e6cb      	b.n	4074c0 <_realloc_r+0x110>
  407728:	6933      	ldr	r3, [r6, #16]
  40772a:	f8ca 3018 	str.w	r3, [sl, #24]
  40772e:	6973      	ldr	r3, [r6, #20]
  407730:	f8ca 301c 	str.w	r3, [sl, #28]
  407734:	3618      	adds	r6, #24
  407736:	f10a 0320 	add.w	r3, sl, #32
  40773a:	e78c      	b.n	407656 <_realloc_r+0x2a6>
  40773c:	463a      	mov	r2, r7
  40773e:	e764      	b.n	40760a <_realloc_r+0x25a>
  407740:	6932      	ldr	r2, [r6, #16]
  407742:	f8ca 2018 	str.w	r2, [sl, #24]
  407746:	6972      	ldr	r2, [r6, #20]
  407748:	f8ca 201c 	str.w	r2, [sl, #28]
  40774c:	3618      	adds	r6, #24
  40774e:	f10a 0220 	add.w	r2, sl, #32
  407752:	e6b5      	b.n	4074c0 <_realloc_r+0x110>
  407754:	4631      	mov	r1, r6
  407756:	4638      	mov	r0, r7
  407758:	9301      	str	r3, [sp, #4]
  40775a:	f7ff fdc5 	bl	4072e8 <memmove>
  40775e:	9b01      	ldr	r3, [sp, #4]
  407760:	e759      	b.n	407616 <_realloc_r+0x266>
  407762:	68b1      	ldr	r1, [r6, #8]
  407764:	f8ca 1010 	str.w	r1, [sl, #16]
  407768:	68f1      	ldr	r1, [r6, #12]
  40776a:	f8ca 1014 	str.w	r1, [sl, #20]
  40776e:	2a24      	cmp	r2, #36	; 0x24
  407770:	d003      	beq.n	40777a <_realloc_r+0x3ca>
  407772:	3610      	adds	r6, #16
  407774:	f10a 0218 	add.w	r2, sl, #24
  407778:	e747      	b.n	40760a <_realloc_r+0x25a>
  40777a:	6932      	ldr	r2, [r6, #16]
  40777c:	f8ca 2018 	str.w	r2, [sl, #24]
  407780:	6972      	ldr	r2, [r6, #20]
  407782:	f8ca 201c 	str.w	r2, [sl, #28]
  407786:	3618      	adds	r6, #24
  407788:	f10a 0220 	add.w	r2, sl, #32
  40778c:	e73d      	b.n	40760a <_realloc_r+0x25a>
  40778e:	bf00      	nop

00407790 <__sread>:
  407790:	b510      	push	{r4, lr}
  407792:	460c      	mov	r4, r1
  407794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407798:	f000 fa2c 	bl	407bf4 <_read_r>
  40779c:	2800      	cmp	r0, #0
  40779e:	db03      	blt.n	4077a8 <__sread+0x18>
  4077a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4077a2:	4403      	add	r3, r0
  4077a4:	6523      	str	r3, [r4, #80]	; 0x50
  4077a6:	bd10      	pop	{r4, pc}
  4077a8:	89a3      	ldrh	r3, [r4, #12]
  4077aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4077ae:	81a3      	strh	r3, [r4, #12]
  4077b0:	bd10      	pop	{r4, pc}
  4077b2:	bf00      	nop

004077b4 <__swrite>:
  4077b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4077b8:	4616      	mov	r6, r2
  4077ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4077be:	461f      	mov	r7, r3
  4077c0:	05d3      	lsls	r3, r2, #23
  4077c2:	460c      	mov	r4, r1
  4077c4:	4605      	mov	r5, r0
  4077c6:	d507      	bpl.n	4077d8 <__swrite+0x24>
  4077c8:	2200      	movs	r2, #0
  4077ca:	2302      	movs	r3, #2
  4077cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4077d0:	f000 f9fa 	bl	407bc8 <_lseek_r>
  4077d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4077d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4077dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4077e0:	81a2      	strh	r2, [r4, #12]
  4077e2:	463b      	mov	r3, r7
  4077e4:	4632      	mov	r2, r6
  4077e6:	4628      	mov	r0, r5
  4077e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4077ec:	f000 b90a 	b.w	407a04 <_write_r>

004077f0 <__sseek>:
  4077f0:	b510      	push	{r4, lr}
  4077f2:	460c      	mov	r4, r1
  4077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4077f8:	f000 f9e6 	bl	407bc8 <_lseek_r>
  4077fc:	89a3      	ldrh	r3, [r4, #12]
  4077fe:	1c42      	adds	r2, r0, #1
  407800:	bf0e      	itee	eq
  407802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40780a:	6520      	strne	r0, [r4, #80]	; 0x50
  40780c:	81a3      	strh	r3, [r4, #12]
  40780e:	bd10      	pop	{r4, pc}

00407810 <__sclose>:
  407810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407814:	f000 b95e 	b.w	407ad4 <_close_r>

00407818 <strchr>:
  407818:	b470      	push	{r4, r5, r6}
  40781a:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  40781e:	d034      	beq.n	40788a <strchr+0x72>
  407820:	0785      	lsls	r5, r0, #30
  407822:	d00f      	beq.n	407844 <strchr+0x2c>
  407824:	7803      	ldrb	r3, [r0, #0]
  407826:	2b00      	cmp	r3, #0
  407828:	d05a      	beq.n	4078e0 <strchr+0xc8>
  40782a:	429c      	cmp	r4, r3
  40782c:	d02b      	beq.n	407886 <strchr+0x6e>
  40782e:	1c43      	adds	r3, r0, #1
  407830:	e005      	b.n	40783e <strchr+0x26>
  407832:	f813 2b01 	ldrb.w	r2, [r3], #1
  407836:	2a00      	cmp	r2, #0
  407838:	d04f      	beq.n	4078da <strchr+0xc2>
  40783a:	4294      	cmp	r4, r2
  40783c:	d023      	beq.n	407886 <strchr+0x6e>
  40783e:	079a      	lsls	r2, r3, #30
  407840:	4618      	mov	r0, r3
  407842:	d1f6      	bne.n	407832 <strchr+0x1a>
  407844:	020e      	lsls	r6, r1, #8
  407846:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  40784a:	4326      	orrs	r6, r4
  40784c:	6803      	ldr	r3, [r0, #0]
  40784e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407852:	e001      	b.n	407858 <strchr+0x40>
  407854:	f850 3f04 	ldr.w	r3, [r0, #4]!
  407858:	ea86 0503 	eor.w	r5, r6, r3
  40785c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407860:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  407864:	ea22 0205 	bic.w	r2, r2, r5
  407868:	ea21 0303 	bic.w	r3, r1, r3
  40786c:	4313      	orrs	r3, r2
  40786e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407872:	d0ef      	beq.n	407854 <strchr+0x3c>
  407874:	7803      	ldrb	r3, [r0, #0]
  407876:	b923      	cbnz	r3, 407882 <strchr+0x6a>
  407878:	e032      	b.n	4078e0 <strchr+0xc8>
  40787a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40787e:	2b00      	cmp	r3, #0
  407880:	d02e      	beq.n	4078e0 <strchr+0xc8>
  407882:	429c      	cmp	r4, r3
  407884:	d1f9      	bne.n	40787a <strchr+0x62>
  407886:	bc70      	pop	{r4, r5, r6}
  407888:	4770      	bx	lr
  40788a:	0784      	lsls	r4, r0, #30
  40788c:	d00b      	beq.n	4078a6 <strchr+0x8e>
  40788e:	7803      	ldrb	r3, [r0, #0]
  407890:	2b00      	cmp	r3, #0
  407892:	d0f8      	beq.n	407886 <strchr+0x6e>
  407894:	1c43      	adds	r3, r0, #1
  407896:	e003      	b.n	4078a0 <strchr+0x88>
  407898:	7802      	ldrb	r2, [r0, #0]
  40789a:	3301      	adds	r3, #1
  40789c:	2a00      	cmp	r2, #0
  40789e:	d0f2      	beq.n	407886 <strchr+0x6e>
  4078a0:	0799      	lsls	r1, r3, #30
  4078a2:	4618      	mov	r0, r3
  4078a4:	d1f8      	bne.n	407898 <strchr+0x80>
  4078a6:	6802      	ldr	r2, [r0, #0]
  4078a8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4078ac:	ea23 0302 	bic.w	r3, r3, r2
  4078b0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4078b4:	d108      	bne.n	4078c8 <strchr+0xb0>
  4078b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4078ba:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4078be:	ea23 0302 	bic.w	r3, r3, r2
  4078c2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4078c6:	d0f6      	beq.n	4078b6 <strchr+0x9e>
  4078c8:	7803      	ldrb	r3, [r0, #0]
  4078ca:	2b00      	cmp	r3, #0
  4078cc:	d0db      	beq.n	407886 <strchr+0x6e>
  4078ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4078d2:	2b00      	cmp	r3, #0
  4078d4:	d1fb      	bne.n	4078ce <strchr+0xb6>
  4078d6:	bc70      	pop	{r4, r5, r6}
  4078d8:	4770      	bx	lr
  4078da:	4610      	mov	r0, r2
  4078dc:	bc70      	pop	{r4, r5, r6}
  4078de:	4770      	bx	lr
  4078e0:	4618      	mov	r0, r3
  4078e2:	bc70      	pop	{r4, r5, r6}
  4078e4:	4770      	bx	lr
  4078e6:	bf00      	nop

004078e8 <__swbuf_r>:
  4078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078ea:	460e      	mov	r6, r1
  4078ec:	4614      	mov	r4, r2
  4078ee:	4607      	mov	r7, r0
  4078f0:	b110      	cbz	r0, 4078f8 <__swbuf_r+0x10>
  4078f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4078f4:	2b00      	cmp	r3, #0
  4078f6:	d04a      	beq.n	40798e <__swbuf_r+0xa6>
  4078f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4078fc:	69a3      	ldr	r3, [r4, #24]
  4078fe:	60a3      	str	r3, [r4, #8]
  407900:	b291      	uxth	r1, r2
  407902:	0708      	lsls	r0, r1, #28
  407904:	d538      	bpl.n	407978 <__swbuf_r+0x90>
  407906:	6923      	ldr	r3, [r4, #16]
  407908:	2b00      	cmp	r3, #0
  40790a:	d035      	beq.n	407978 <__swbuf_r+0x90>
  40790c:	0489      	lsls	r1, r1, #18
  40790e:	b2f5      	uxtb	r5, r6
  407910:	d515      	bpl.n	40793e <__swbuf_r+0x56>
  407912:	6822      	ldr	r2, [r4, #0]
  407914:	6961      	ldr	r1, [r4, #20]
  407916:	1ad3      	subs	r3, r2, r3
  407918:	428b      	cmp	r3, r1
  40791a:	da1c      	bge.n	407956 <__swbuf_r+0x6e>
  40791c:	3301      	adds	r3, #1
  40791e:	68a1      	ldr	r1, [r4, #8]
  407920:	1c50      	adds	r0, r2, #1
  407922:	3901      	subs	r1, #1
  407924:	60a1      	str	r1, [r4, #8]
  407926:	6020      	str	r0, [r4, #0]
  407928:	7016      	strb	r6, [r2, #0]
  40792a:	6962      	ldr	r2, [r4, #20]
  40792c:	429a      	cmp	r2, r3
  40792e:	d01a      	beq.n	407966 <__swbuf_r+0x7e>
  407930:	89a3      	ldrh	r3, [r4, #12]
  407932:	07db      	lsls	r3, r3, #31
  407934:	d501      	bpl.n	40793a <__swbuf_r+0x52>
  407936:	2d0a      	cmp	r5, #10
  407938:	d015      	beq.n	407966 <__swbuf_r+0x7e>
  40793a:	4628      	mov	r0, r5
  40793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40793e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407944:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407948:	81a2      	strh	r2, [r4, #12]
  40794a:	6822      	ldr	r2, [r4, #0]
  40794c:	6661      	str	r1, [r4, #100]	; 0x64
  40794e:	6961      	ldr	r1, [r4, #20]
  407950:	1ad3      	subs	r3, r2, r3
  407952:	428b      	cmp	r3, r1
  407954:	dbe2      	blt.n	40791c <__swbuf_r+0x34>
  407956:	4621      	mov	r1, r4
  407958:	4638      	mov	r0, r7
  40795a:	f7fe ff33 	bl	4067c4 <_fflush_r>
  40795e:	b940      	cbnz	r0, 407972 <__swbuf_r+0x8a>
  407960:	6822      	ldr	r2, [r4, #0]
  407962:	2301      	movs	r3, #1
  407964:	e7db      	b.n	40791e <__swbuf_r+0x36>
  407966:	4621      	mov	r1, r4
  407968:	4638      	mov	r0, r7
  40796a:	f7fe ff2b 	bl	4067c4 <_fflush_r>
  40796e:	2800      	cmp	r0, #0
  407970:	d0e3      	beq.n	40793a <__swbuf_r+0x52>
  407972:	f04f 30ff 	mov.w	r0, #4294967295
  407976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407978:	4621      	mov	r1, r4
  40797a:	4638      	mov	r0, r7
  40797c:	f7fe fe0a 	bl	406594 <__swsetup_r>
  407980:	2800      	cmp	r0, #0
  407982:	d1f6      	bne.n	407972 <__swbuf_r+0x8a>
  407984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407988:	6923      	ldr	r3, [r4, #16]
  40798a:	b291      	uxth	r1, r2
  40798c:	e7be      	b.n	40790c <__swbuf_r+0x24>
  40798e:	f7fe ffad 	bl	4068ec <__sinit>
  407992:	e7b1      	b.n	4078f8 <__swbuf_r+0x10>

00407994 <_wcrtomb_r>:
  407994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407998:	4605      	mov	r5, r0
  40799a:	b086      	sub	sp, #24
  40799c:	461e      	mov	r6, r3
  40799e:	460c      	mov	r4, r1
  4079a0:	b1a1      	cbz	r1, 4079cc <_wcrtomb_r+0x38>
  4079a2:	4b10      	ldr	r3, [pc, #64]	; (4079e4 <_wcrtomb_r+0x50>)
  4079a4:	4617      	mov	r7, r2
  4079a6:	f8d3 8000 	ldr.w	r8, [r3]
  4079aa:	f7ff fafd 	bl	406fa8 <__locale_charset>
  4079ae:	9600      	str	r6, [sp, #0]
  4079b0:	4603      	mov	r3, r0
  4079b2:	463a      	mov	r2, r7
  4079b4:	4621      	mov	r1, r4
  4079b6:	4628      	mov	r0, r5
  4079b8:	47c0      	blx	r8
  4079ba:	1c43      	adds	r3, r0, #1
  4079bc:	d103      	bne.n	4079c6 <_wcrtomb_r+0x32>
  4079be:	2200      	movs	r2, #0
  4079c0:	238a      	movs	r3, #138	; 0x8a
  4079c2:	6032      	str	r2, [r6, #0]
  4079c4:	602b      	str	r3, [r5, #0]
  4079c6:	b006      	add	sp, #24
  4079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079cc:	4b05      	ldr	r3, [pc, #20]	; (4079e4 <_wcrtomb_r+0x50>)
  4079ce:	681f      	ldr	r7, [r3, #0]
  4079d0:	f7ff faea 	bl	406fa8 <__locale_charset>
  4079d4:	9600      	str	r6, [sp, #0]
  4079d6:	4603      	mov	r3, r0
  4079d8:	4622      	mov	r2, r4
  4079da:	a903      	add	r1, sp, #12
  4079dc:	4628      	mov	r0, r5
  4079de:	47b8      	blx	r7
  4079e0:	e7eb      	b.n	4079ba <_wcrtomb_r+0x26>
  4079e2:	bf00      	nop
  4079e4:	20400880 	.word	0x20400880

004079e8 <__ascii_wctomb>:
  4079e8:	b121      	cbz	r1, 4079f4 <__ascii_wctomb+0xc>
  4079ea:	2aff      	cmp	r2, #255	; 0xff
  4079ec:	d804      	bhi.n	4079f8 <__ascii_wctomb+0x10>
  4079ee:	700a      	strb	r2, [r1, #0]
  4079f0:	2001      	movs	r0, #1
  4079f2:	4770      	bx	lr
  4079f4:	4608      	mov	r0, r1
  4079f6:	4770      	bx	lr
  4079f8:	238a      	movs	r3, #138	; 0x8a
  4079fa:	6003      	str	r3, [r0, #0]
  4079fc:	f04f 30ff 	mov.w	r0, #4294967295
  407a00:	4770      	bx	lr
  407a02:	bf00      	nop

00407a04 <_write_r>:
  407a04:	b570      	push	{r4, r5, r6, lr}
  407a06:	460d      	mov	r5, r1
  407a08:	4c08      	ldr	r4, [pc, #32]	; (407a2c <_write_r+0x28>)
  407a0a:	4611      	mov	r1, r2
  407a0c:	4606      	mov	r6, r0
  407a0e:	461a      	mov	r2, r3
  407a10:	4628      	mov	r0, r5
  407a12:	2300      	movs	r3, #0
  407a14:	6023      	str	r3, [r4, #0]
  407a16:	f7fb fbe9 	bl	4031ec <_write>
  407a1a:	1c43      	adds	r3, r0, #1
  407a1c:	d000      	beq.n	407a20 <_write_r+0x1c>
  407a1e:	bd70      	pop	{r4, r5, r6, pc}
  407a20:	6823      	ldr	r3, [r4, #0]
  407a22:	2b00      	cmp	r3, #0
  407a24:	d0fb      	beq.n	407a1e <_write_r+0x1a>
  407a26:	6033      	str	r3, [r6, #0]
  407a28:	bd70      	pop	{r4, r5, r6, pc}
  407a2a:	bf00      	nop
  407a2c:	20401014 	.word	0x20401014

00407a30 <__register_exitproc>:
  407a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407a34:	4c25      	ldr	r4, [pc, #148]	; (407acc <__register_exitproc+0x9c>)
  407a36:	6825      	ldr	r5, [r4, #0]
  407a38:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407a3c:	4606      	mov	r6, r0
  407a3e:	4688      	mov	r8, r1
  407a40:	4692      	mov	sl, r2
  407a42:	4699      	mov	r9, r3
  407a44:	b3c4      	cbz	r4, 407ab8 <__register_exitproc+0x88>
  407a46:	6860      	ldr	r0, [r4, #4]
  407a48:	281f      	cmp	r0, #31
  407a4a:	dc17      	bgt.n	407a7c <__register_exitproc+0x4c>
  407a4c:	1c43      	adds	r3, r0, #1
  407a4e:	b176      	cbz	r6, 407a6e <__register_exitproc+0x3e>
  407a50:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407a54:	2201      	movs	r2, #1
  407a56:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407a5a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407a5e:	4082      	lsls	r2, r0
  407a60:	4311      	orrs	r1, r2
  407a62:	2e02      	cmp	r6, #2
  407a64:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407a68:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407a6c:	d01e      	beq.n	407aac <__register_exitproc+0x7c>
  407a6e:	3002      	adds	r0, #2
  407a70:	6063      	str	r3, [r4, #4]
  407a72:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  407a76:	2000      	movs	r0, #0
  407a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a7c:	4b14      	ldr	r3, [pc, #80]	; (407ad0 <__register_exitproc+0xa0>)
  407a7e:	b303      	cbz	r3, 407ac2 <__register_exitproc+0x92>
  407a80:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407a84:	f7fc fd96 	bl	4045b4 <malloc>
  407a88:	4604      	mov	r4, r0
  407a8a:	b1d0      	cbz	r0, 407ac2 <__register_exitproc+0x92>
  407a8c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407a90:	2700      	movs	r7, #0
  407a92:	e880 0088 	stmia.w	r0, {r3, r7}
  407a96:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407a9a:	4638      	mov	r0, r7
  407a9c:	2301      	movs	r3, #1
  407a9e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  407aa2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  407aa6:	2e00      	cmp	r6, #0
  407aa8:	d0e1      	beq.n	407a6e <__register_exitproc+0x3e>
  407aaa:	e7d1      	b.n	407a50 <__register_exitproc+0x20>
  407aac:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407ab0:	430a      	orrs	r2, r1
  407ab2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  407ab6:	e7da      	b.n	407a6e <__register_exitproc+0x3e>
  407ab8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407abc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407ac0:	e7c1      	b.n	407a46 <__register_exitproc+0x16>
  407ac2:	f04f 30ff 	mov.w	r0, #4294967295
  407ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407aca:	bf00      	nop
  407acc:	004091b0 	.word	0x004091b0
  407ad0:	004045b5 	.word	0x004045b5

00407ad4 <_close_r>:
  407ad4:	b538      	push	{r3, r4, r5, lr}
  407ad6:	4c07      	ldr	r4, [pc, #28]	; (407af4 <_close_r+0x20>)
  407ad8:	2300      	movs	r3, #0
  407ada:	4605      	mov	r5, r0
  407adc:	4608      	mov	r0, r1
  407ade:	6023      	str	r3, [r4, #0]
  407ae0:	f7fc f9dc 	bl	403e9c <_close>
  407ae4:	1c43      	adds	r3, r0, #1
  407ae6:	d000      	beq.n	407aea <_close_r+0x16>
  407ae8:	bd38      	pop	{r3, r4, r5, pc}
  407aea:	6823      	ldr	r3, [r4, #0]
  407aec:	2b00      	cmp	r3, #0
  407aee:	d0fb      	beq.n	407ae8 <_close_r+0x14>
  407af0:	602b      	str	r3, [r5, #0]
  407af2:	bd38      	pop	{r3, r4, r5, pc}
  407af4:	20401014 	.word	0x20401014

00407af8 <_fclose_r>:
  407af8:	2900      	cmp	r1, #0
  407afa:	d03d      	beq.n	407b78 <_fclose_r+0x80>
  407afc:	b570      	push	{r4, r5, r6, lr}
  407afe:	4605      	mov	r5, r0
  407b00:	460c      	mov	r4, r1
  407b02:	b108      	cbz	r0, 407b08 <_fclose_r+0x10>
  407b04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407b06:	b37b      	cbz	r3, 407b68 <_fclose_r+0x70>
  407b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b0c:	b90b      	cbnz	r3, 407b12 <_fclose_r+0x1a>
  407b0e:	2000      	movs	r0, #0
  407b10:	bd70      	pop	{r4, r5, r6, pc}
  407b12:	4621      	mov	r1, r4
  407b14:	4628      	mov	r0, r5
  407b16:	f7fe fdb1 	bl	40667c <__sflush_r>
  407b1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407b1c:	4606      	mov	r6, r0
  407b1e:	b133      	cbz	r3, 407b2e <_fclose_r+0x36>
  407b20:	69e1      	ldr	r1, [r4, #28]
  407b22:	4628      	mov	r0, r5
  407b24:	4798      	blx	r3
  407b26:	2800      	cmp	r0, #0
  407b28:	bfb8      	it	lt
  407b2a:	f04f 36ff 	movlt.w	r6, #4294967295
  407b2e:	89a3      	ldrh	r3, [r4, #12]
  407b30:	061b      	lsls	r3, r3, #24
  407b32:	d41c      	bmi.n	407b6e <_fclose_r+0x76>
  407b34:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407b36:	b141      	cbz	r1, 407b4a <_fclose_r+0x52>
  407b38:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407b3c:	4299      	cmp	r1, r3
  407b3e:	d002      	beq.n	407b46 <_fclose_r+0x4e>
  407b40:	4628      	mov	r0, r5
  407b42:	f7fe ff9d 	bl	406a80 <_free_r>
  407b46:	2300      	movs	r3, #0
  407b48:	6323      	str	r3, [r4, #48]	; 0x30
  407b4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407b4c:	b121      	cbz	r1, 407b58 <_fclose_r+0x60>
  407b4e:	4628      	mov	r0, r5
  407b50:	f7fe ff96 	bl	406a80 <_free_r>
  407b54:	2300      	movs	r3, #0
  407b56:	6463      	str	r3, [r4, #68]	; 0x44
  407b58:	f7fe fece 	bl	4068f8 <__sfp_lock_acquire>
  407b5c:	2300      	movs	r3, #0
  407b5e:	81a3      	strh	r3, [r4, #12]
  407b60:	f7fe fecc 	bl	4068fc <__sfp_lock_release>
  407b64:	4630      	mov	r0, r6
  407b66:	bd70      	pop	{r4, r5, r6, pc}
  407b68:	f7fe fec0 	bl	4068ec <__sinit>
  407b6c:	e7cc      	b.n	407b08 <_fclose_r+0x10>
  407b6e:	6921      	ldr	r1, [r4, #16]
  407b70:	4628      	mov	r0, r5
  407b72:	f7fe ff85 	bl	406a80 <_free_r>
  407b76:	e7dd      	b.n	407b34 <_fclose_r+0x3c>
  407b78:	2000      	movs	r0, #0
  407b7a:	4770      	bx	lr

00407b7c <_fstat_r>:
  407b7c:	b538      	push	{r3, r4, r5, lr}
  407b7e:	460b      	mov	r3, r1
  407b80:	4c07      	ldr	r4, [pc, #28]	; (407ba0 <_fstat_r+0x24>)
  407b82:	4605      	mov	r5, r0
  407b84:	4611      	mov	r1, r2
  407b86:	4618      	mov	r0, r3
  407b88:	2300      	movs	r3, #0
  407b8a:	6023      	str	r3, [r4, #0]
  407b8c:	f7fc f98a 	bl	403ea4 <_fstat>
  407b90:	1c43      	adds	r3, r0, #1
  407b92:	d000      	beq.n	407b96 <_fstat_r+0x1a>
  407b94:	bd38      	pop	{r3, r4, r5, pc}
  407b96:	6823      	ldr	r3, [r4, #0]
  407b98:	2b00      	cmp	r3, #0
  407b9a:	d0fb      	beq.n	407b94 <_fstat_r+0x18>
  407b9c:	602b      	str	r3, [r5, #0]
  407b9e:	bd38      	pop	{r3, r4, r5, pc}
  407ba0:	20401014 	.word	0x20401014

00407ba4 <_isatty_r>:
  407ba4:	b538      	push	{r3, r4, r5, lr}
  407ba6:	4c07      	ldr	r4, [pc, #28]	; (407bc4 <_isatty_r+0x20>)
  407ba8:	2300      	movs	r3, #0
  407baa:	4605      	mov	r5, r0
  407bac:	4608      	mov	r0, r1
  407bae:	6023      	str	r3, [r4, #0]
  407bb0:	f7fc f97e 	bl	403eb0 <_isatty>
  407bb4:	1c43      	adds	r3, r0, #1
  407bb6:	d000      	beq.n	407bba <_isatty_r+0x16>
  407bb8:	bd38      	pop	{r3, r4, r5, pc}
  407bba:	6823      	ldr	r3, [r4, #0]
  407bbc:	2b00      	cmp	r3, #0
  407bbe:	d0fb      	beq.n	407bb8 <_isatty_r+0x14>
  407bc0:	602b      	str	r3, [r5, #0]
  407bc2:	bd38      	pop	{r3, r4, r5, pc}
  407bc4:	20401014 	.word	0x20401014

00407bc8 <_lseek_r>:
  407bc8:	b570      	push	{r4, r5, r6, lr}
  407bca:	460d      	mov	r5, r1
  407bcc:	4c08      	ldr	r4, [pc, #32]	; (407bf0 <_lseek_r+0x28>)
  407bce:	4611      	mov	r1, r2
  407bd0:	4606      	mov	r6, r0
  407bd2:	461a      	mov	r2, r3
  407bd4:	4628      	mov	r0, r5
  407bd6:	2300      	movs	r3, #0
  407bd8:	6023      	str	r3, [r4, #0]
  407bda:	f7fc f96b 	bl	403eb4 <_lseek>
  407bde:	1c43      	adds	r3, r0, #1
  407be0:	d000      	beq.n	407be4 <_lseek_r+0x1c>
  407be2:	bd70      	pop	{r4, r5, r6, pc}
  407be4:	6823      	ldr	r3, [r4, #0]
  407be6:	2b00      	cmp	r3, #0
  407be8:	d0fb      	beq.n	407be2 <_lseek_r+0x1a>
  407bea:	6033      	str	r3, [r6, #0]
  407bec:	bd70      	pop	{r4, r5, r6, pc}
  407bee:	bf00      	nop
  407bf0:	20401014 	.word	0x20401014

00407bf4 <_read_r>:
  407bf4:	b570      	push	{r4, r5, r6, lr}
  407bf6:	460d      	mov	r5, r1
  407bf8:	4c08      	ldr	r4, [pc, #32]	; (407c1c <_read_r+0x28>)
  407bfa:	4611      	mov	r1, r2
  407bfc:	4606      	mov	r6, r0
  407bfe:	461a      	mov	r2, r3
  407c00:	4628      	mov	r0, r5
  407c02:	2300      	movs	r3, #0
  407c04:	6023      	str	r3, [r4, #0]
  407c06:	f7fb fad3 	bl	4031b0 <_read>
  407c0a:	1c43      	adds	r3, r0, #1
  407c0c:	d000      	beq.n	407c10 <_read_r+0x1c>
  407c0e:	bd70      	pop	{r4, r5, r6, pc}
  407c10:	6823      	ldr	r3, [r4, #0]
  407c12:	2b00      	cmp	r3, #0
  407c14:	d0fb      	beq.n	407c0e <_read_r+0x1a>
  407c16:	6033      	str	r3, [r6, #0]
  407c18:	bd70      	pop	{r4, r5, r6, pc}
  407c1a:	bf00      	nop
  407c1c:	20401014 	.word	0x20401014

00407c20 <__aeabi_uldivmod>:
  407c20:	b953      	cbnz	r3, 407c38 <__aeabi_uldivmod+0x18>
  407c22:	b94a      	cbnz	r2, 407c38 <__aeabi_uldivmod+0x18>
  407c24:	2900      	cmp	r1, #0
  407c26:	bf08      	it	eq
  407c28:	2800      	cmpeq	r0, #0
  407c2a:	bf1c      	itt	ne
  407c2c:	f04f 31ff 	movne.w	r1, #4294967295
  407c30:	f04f 30ff 	movne.w	r0, #4294967295
  407c34:	f000 b97e 	b.w	407f34 <__aeabi_idiv0>
  407c38:	f1ad 0c08 	sub.w	ip, sp, #8
  407c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407c40:	f000 f806 	bl	407c50 <__udivmoddi4>
  407c44:	f8dd e004 	ldr.w	lr, [sp, #4]
  407c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407c4c:	b004      	add	sp, #16
  407c4e:	4770      	bx	lr

00407c50 <__udivmoddi4>:
  407c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407c54:	468c      	mov	ip, r1
  407c56:	460e      	mov	r6, r1
  407c58:	4604      	mov	r4, r0
  407c5a:	9d08      	ldr	r5, [sp, #32]
  407c5c:	2b00      	cmp	r3, #0
  407c5e:	d150      	bne.n	407d02 <__udivmoddi4+0xb2>
  407c60:	428a      	cmp	r2, r1
  407c62:	4617      	mov	r7, r2
  407c64:	d96c      	bls.n	407d40 <__udivmoddi4+0xf0>
  407c66:	fab2 fe82 	clz	lr, r2
  407c6a:	f1be 0f00 	cmp.w	lr, #0
  407c6e:	d00b      	beq.n	407c88 <__udivmoddi4+0x38>
  407c70:	f1ce 0420 	rsb	r4, lr, #32
  407c74:	fa20 f404 	lsr.w	r4, r0, r4
  407c78:	fa01 f60e 	lsl.w	r6, r1, lr
  407c7c:	ea44 0c06 	orr.w	ip, r4, r6
  407c80:	fa02 f70e 	lsl.w	r7, r2, lr
  407c84:	fa00 f40e 	lsl.w	r4, r0, lr
  407c88:	ea4f 4917 	mov.w	r9, r7, lsr #16
  407c8c:	0c22      	lsrs	r2, r4, #16
  407c8e:	fbbc f0f9 	udiv	r0, ip, r9
  407c92:	fa1f f887 	uxth.w	r8, r7
  407c96:	fb09 c610 	mls	r6, r9, r0, ip
  407c9a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407c9e:	fb00 f308 	mul.w	r3, r0, r8
  407ca2:	42b3      	cmp	r3, r6
  407ca4:	d909      	bls.n	407cba <__udivmoddi4+0x6a>
  407ca6:	19f6      	adds	r6, r6, r7
  407ca8:	f100 32ff 	add.w	r2, r0, #4294967295
  407cac:	f080 8122 	bcs.w	407ef4 <__udivmoddi4+0x2a4>
  407cb0:	42b3      	cmp	r3, r6
  407cb2:	f240 811f 	bls.w	407ef4 <__udivmoddi4+0x2a4>
  407cb6:	3802      	subs	r0, #2
  407cb8:	443e      	add	r6, r7
  407cba:	1af6      	subs	r6, r6, r3
  407cbc:	b2a2      	uxth	r2, r4
  407cbe:	fbb6 f3f9 	udiv	r3, r6, r9
  407cc2:	fb09 6613 	mls	r6, r9, r3, r6
  407cc6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407cca:	fb03 f808 	mul.w	r8, r3, r8
  407cce:	45a0      	cmp	r8, r4
  407cd0:	d909      	bls.n	407ce6 <__udivmoddi4+0x96>
  407cd2:	19e4      	adds	r4, r4, r7
  407cd4:	f103 32ff 	add.w	r2, r3, #4294967295
  407cd8:	f080 810a 	bcs.w	407ef0 <__udivmoddi4+0x2a0>
  407cdc:	45a0      	cmp	r8, r4
  407cde:	f240 8107 	bls.w	407ef0 <__udivmoddi4+0x2a0>
  407ce2:	3b02      	subs	r3, #2
  407ce4:	443c      	add	r4, r7
  407ce6:	ebc8 0404 	rsb	r4, r8, r4
  407cea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407cee:	2100      	movs	r1, #0
  407cf0:	2d00      	cmp	r5, #0
  407cf2:	d062      	beq.n	407dba <__udivmoddi4+0x16a>
  407cf4:	fa24 f40e 	lsr.w	r4, r4, lr
  407cf8:	2300      	movs	r3, #0
  407cfa:	602c      	str	r4, [r5, #0]
  407cfc:	606b      	str	r3, [r5, #4]
  407cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407d02:	428b      	cmp	r3, r1
  407d04:	d907      	bls.n	407d16 <__udivmoddi4+0xc6>
  407d06:	2d00      	cmp	r5, #0
  407d08:	d055      	beq.n	407db6 <__udivmoddi4+0x166>
  407d0a:	2100      	movs	r1, #0
  407d0c:	e885 0041 	stmia.w	r5, {r0, r6}
  407d10:	4608      	mov	r0, r1
  407d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407d16:	fab3 f183 	clz	r1, r3
  407d1a:	2900      	cmp	r1, #0
  407d1c:	f040 8090 	bne.w	407e40 <__udivmoddi4+0x1f0>
  407d20:	42b3      	cmp	r3, r6
  407d22:	d302      	bcc.n	407d2a <__udivmoddi4+0xda>
  407d24:	4282      	cmp	r2, r0
  407d26:	f200 80f8 	bhi.w	407f1a <__udivmoddi4+0x2ca>
  407d2a:	1a84      	subs	r4, r0, r2
  407d2c:	eb66 0603 	sbc.w	r6, r6, r3
  407d30:	2001      	movs	r0, #1
  407d32:	46b4      	mov	ip, r6
  407d34:	2d00      	cmp	r5, #0
  407d36:	d040      	beq.n	407dba <__udivmoddi4+0x16a>
  407d38:	e885 1010 	stmia.w	r5, {r4, ip}
  407d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407d40:	b912      	cbnz	r2, 407d48 <__udivmoddi4+0xf8>
  407d42:	2701      	movs	r7, #1
  407d44:	fbb7 f7f2 	udiv	r7, r7, r2
  407d48:	fab7 fe87 	clz	lr, r7
  407d4c:	f1be 0f00 	cmp.w	lr, #0
  407d50:	d135      	bne.n	407dbe <__udivmoddi4+0x16e>
  407d52:	1bf3      	subs	r3, r6, r7
  407d54:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407d58:	fa1f fc87 	uxth.w	ip, r7
  407d5c:	2101      	movs	r1, #1
  407d5e:	fbb3 f0f8 	udiv	r0, r3, r8
  407d62:	0c22      	lsrs	r2, r4, #16
  407d64:	fb08 3610 	mls	r6, r8, r0, r3
  407d68:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407d6c:	fb0c f300 	mul.w	r3, ip, r0
  407d70:	42b3      	cmp	r3, r6
  407d72:	d907      	bls.n	407d84 <__udivmoddi4+0x134>
  407d74:	19f6      	adds	r6, r6, r7
  407d76:	f100 32ff 	add.w	r2, r0, #4294967295
  407d7a:	d202      	bcs.n	407d82 <__udivmoddi4+0x132>
  407d7c:	42b3      	cmp	r3, r6
  407d7e:	f200 80ce 	bhi.w	407f1e <__udivmoddi4+0x2ce>
  407d82:	4610      	mov	r0, r2
  407d84:	1af6      	subs	r6, r6, r3
  407d86:	b2a2      	uxth	r2, r4
  407d88:	fbb6 f3f8 	udiv	r3, r6, r8
  407d8c:	fb08 6613 	mls	r6, r8, r3, r6
  407d90:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407d94:	fb0c fc03 	mul.w	ip, ip, r3
  407d98:	45a4      	cmp	ip, r4
  407d9a:	d907      	bls.n	407dac <__udivmoddi4+0x15c>
  407d9c:	19e4      	adds	r4, r4, r7
  407d9e:	f103 32ff 	add.w	r2, r3, #4294967295
  407da2:	d202      	bcs.n	407daa <__udivmoddi4+0x15a>
  407da4:	45a4      	cmp	ip, r4
  407da6:	f200 80b5 	bhi.w	407f14 <__udivmoddi4+0x2c4>
  407daa:	4613      	mov	r3, r2
  407dac:	ebcc 0404 	rsb	r4, ip, r4
  407db0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407db4:	e79c      	b.n	407cf0 <__udivmoddi4+0xa0>
  407db6:	4629      	mov	r1, r5
  407db8:	4628      	mov	r0, r5
  407dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407dbe:	f1ce 0120 	rsb	r1, lr, #32
  407dc2:	fa06 f30e 	lsl.w	r3, r6, lr
  407dc6:	fa07 f70e 	lsl.w	r7, r7, lr
  407dca:	fa20 f901 	lsr.w	r9, r0, r1
  407dce:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407dd2:	40ce      	lsrs	r6, r1
  407dd4:	ea49 0903 	orr.w	r9, r9, r3
  407dd8:	fbb6 faf8 	udiv	sl, r6, r8
  407ddc:	ea4f 4419 	mov.w	r4, r9, lsr #16
  407de0:	fb08 661a 	mls	r6, r8, sl, r6
  407de4:	fa1f fc87 	uxth.w	ip, r7
  407de8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  407dec:	fb0a f20c 	mul.w	r2, sl, ip
  407df0:	429a      	cmp	r2, r3
  407df2:	fa00 f40e 	lsl.w	r4, r0, lr
  407df6:	d90a      	bls.n	407e0e <__udivmoddi4+0x1be>
  407df8:	19db      	adds	r3, r3, r7
  407dfa:	f10a 31ff 	add.w	r1, sl, #4294967295
  407dfe:	f080 8087 	bcs.w	407f10 <__udivmoddi4+0x2c0>
  407e02:	429a      	cmp	r2, r3
  407e04:	f240 8084 	bls.w	407f10 <__udivmoddi4+0x2c0>
  407e08:	f1aa 0a02 	sub.w	sl, sl, #2
  407e0c:	443b      	add	r3, r7
  407e0e:	1a9b      	subs	r3, r3, r2
  407e10:	fa1f f989 	uxth.w	r9, r9
  407e14:	fbb3 f1f8 	udiv	r1, r3, r8
  407e18:	fb08 3311 	mls	r3, r8, r1, r3
  407e1c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  407e20:	fb01 f60c 	mul.w	r6, r1, ip
  407e24:	429e      	cmp	r6, r3
  407e26:	d907      	bls.n	407e38 <__udivmoddi4+0x1e8>
  407e28:	19db      	adds	r3, r3, r7
  407e2a:	f101 32ff 	add.w	r2, r1, #4294967295
  407e2e:	d26b      	bcs.n	407f08 <__udivmoddi4+0x2b8>
  407e30:	429e      	cmp	r6, r3
  407e32:	d969      	bls.n	407f08 <__udivmoddi4+0x2b8>
  407e34:	3902      	subs	r1, #2
  407e36:	443b      	add	r3, r7
  407e38:	1b9b      	subs	r3, r3, r6
  407e3a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  407e3e:	e78e      	b.n	407d5e <__udivmoddi4+0x10e>
  407e40:	f1c1 0e20 	rsb	lr, r1, #32
  407e44:	fa22 f40e 	lsr.w	r4, r2, lr
  407e48:	408b      	lsls	r3, r1
  407e4a:	4323      	orrs	r3, r4
  407e4c:	fa20 f70e 	lsr.w	r7, r0, lr
  407e50:	fa06 f401 	lsl.w	r4, r6, r1
  407e54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407e58:	fa26 f60e 	lsr.w	r6, r6, lr
  407e5c:	433c      	orrs	r4, r7
  407e5e:	fbb6 f9fc 	udiv	r9, r6, ip
  407e62:	0c27      	lsrs	r7, r4, #16
  407e64:	fb0c 6619 	mls	r6, ip, r9, r6
  407e68:	fa1f f883 	uxth.w	r8, r3
  407e6c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407e70:	fb09 f708 	mul.w	r7, r9, r8
  407e74:	42b7      	cmp	r7, r6
  407e76:	fa02 f201 	lsl.w	r2, r2, r1
  407e7a:	fa00 fa01 	lsl.w	sl, r0, r1
  407e7e:	d908      	bls.n	407e92 <__udivmoddi4+0x242>
  407e80:	18f6      	adds	r6, r6, r3
  407e82:	f109 30ff 	add.w	r0, r9, #4294967295
  407e86:	d241      	bcs.n	407f0c <__udivmoddi4+0x2bc>
  407e88:	42b7      	cmp	r7, r6
  407e8a:	d93f      	bls.n	407f0c <__udivmoddi4+0x2bc>
  407e8c:	f1a9 0902 	sub.w	r9, r9, #2
  407e90:	441e      	add	r6, r3
  407e92:	1bf6      	subs	r6, r6, r7
  407e94:	b2a0      	uxth	r0, r4
  407e96:	fbb6 f4fc 	udiv	r4, r6, ip
  407e9a:	fb0c 6614 	mls	r6, ip, r4, r6
  407e9e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  407ea2:	fb04 f808 	mul.w	r8, r4, r8
  407ea6:	45b8      	cmp	r8, r7
  407ea8:	d907      	bls.n	407eba <__udivmoddi4+0x26a>
  407eaa:	18ff      	adds	r7, r7, r3
  407eac:	f104 30ff 	add.w	r0, r4, #4294967295
  407eb0:	d228      	bcs.n	407f04 <__udivmoddi4+0x2b4>
  407eb2:	45b8      	cmp	r8, r7
  407eb4:	d926      	bls.n	407f04 <__udivmoddi4+0x2b4>
  407eb6:	3c02      	subs	r4, #2
  407eb8:	441f      	add	r7, r3
  407eba:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  407ebe:	ebc8 0707 	rsb	r7, r8, r7
  407ec2:	fba0 8902 	umull	r8, r9, r0, r2
  407ec6:	454f      	cmp	r7, r9
  407ec8:	4644      	mov	r4, r8
  407eca:	464e      	mov	r6, r9
  407ecc:	d314      	bcc.n	407ef8 <__udivmoddi4+0x2a8>
  407ece:	d029      	beq.n	407f24 <__udivmoddi4+0x2d4>
  407ed0:	b365      	cbz	r5, 407f2c <__udivmoddi4+0x2dc>
  407ed2:	ebba 0304 	subs.w	r3, sl, r4
  407ed6:	eb67 0706 	sbc.w	r7, r7, r6
  407eda:	fa07 fe0e 	lsl.w	lr, r7, lr
  407ede:	40cb      	lsrs	r3, r1
  407ee0:	40cf      	lsrs	r7, r1
  407ee2:	ea4e 0303 	orr.w	r3, lr, r3
  407ee6:	e885 0088 	stmia.w	r5, {r3, r7}
  407eea:	2100      	movs	r1, #0
  407eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ef0:	4613      	mov	r3, r2
  407ef2:	e6f8      	b.n	407ce6 <__udivmoddi4+0x96>
  407ef4:	4610      	mov	r0, r2
  407ef6:	e6e0      	b.n	407cba <__udivmoddi4+0x6a>
  407ef8:	ebb8 0402 	subs.w	r4, r8, r2
  407efc:	eb69 0603 	sbc.w	r6, r9, r3
  407f00:	3801      	subs	r0, #1
  407f02:	e7e5      	b.n	407ed0 <__udivmoddi4+0x280>
  407f04:	4604      	mov	r4, r0
  407f06:	e7d8      	b.n	407eba <__udivmoddi4+0x26a>
  407f08:	4611      	mov	r1, r2
  407f0a:	e795      	b.n	407e38 <__udivmoddi4+0x1e8>
  407f0c:	4681      	mov	r9, r0
  407f0e:	e7c0      	b.n	407e92 <__udivmoddi4+0x242>
  407f10:	468a      	mov	sl, r1
  407f12:	e77c      	b.n	407e0e <__udivmoddi4+0x1be>
  407f14:	3b02      	subs	r3, #2
  407f16:	443c      	add	r4, r7
  407f18:	e748      	b.n	407dac <__udivmoddi4+0x15c>
  407f1a:	4608      	mov	r0, r1
  407f1c:	e70a      	b.n	407d34 <__udivmoddi4+0xe4>
  407f1e:	3802      	subs	r0, #2
  407f20:	443e      	add	r6, r7
  407f22:	e72f      	b.n	407d84 <__udivmoddi4+0x134>
  407f24:	45c2      	cmp	sl, r8
  407f26:	d3e7      	bcc.n	407ef8 <__udivmoddi4+0x2a8>
  407f28:	463e      	mov	r6, r7
  407f2a:	e7d1      	b.n	407ed0 <__udivmoddi4+0x280>
  407f2c:	4629      	mov	r1, r5
  407f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f32:	bf00      	nop

00407f34 <__aeabi_idiv0>:
  407f34:	4770      	bx	lr
  407f36:	bf00      	nop
  407f38:	2044454c 	.word	0x2044454c
  407f3c:	00004e4f 	.word	0x00004e4f
  407f40:	0a207325 	.word	0x0a207325
  407f44:	00000000 	.word	0x00000000
  407f48:	2044454c 	.word	0x2044454c
  407f4c:	0046464f 	.word	0x0046464f
  407f50:	74736554 	.word	0x74736554
  407f54:	6f432065 	.word	0x6f432065
  407f58:	0000006d 	.word	0x0000006d
  407f5c:	0a204b4f 	.word	0x0a204b4f
  407f60:	00000000 	.word	0x00000000
  407f64:	61726f68 	.word	0x61726f68
  407f68:	0000003a 	.word	0x0000003a
  407f6c:	72616c41 	.word	0x72616c41
  407f70:	6573206d 	.word	0x6573206d
  407f74:	6f742074 	.word	0x6f742074
  407f78:	2e25203a 	.word	0x2e25203a
  407f7c:	64686832 	.word	0x64686832
  407f80:	322e253a 	.word	0x322e253a
  407f84:	0a646868 	.word	0x0a646868
  407f88:	00000000 	.word	0x00000000
  407f8c:	72727543 	.word	0x72727543
  407f90:	20746e65 	.word	0x20746e65
  407f94:	656d6974 	.word	0x656d6974
  407f98:	2e25203a 	.word	0x2e25203a
  407f9c:	64686832 	.word	0x64686832
  407fa0:	322e253a 	.word	0x322e253a
  407fa4:	0a646868 	.word	0x0a646868
  407fa8:	00000000 	.word	0x00000000
  407fac:	20435452 	.word	0x20435452
  407fb0:	72616c61 	.word	0x72616c61
  407fb4:	6573206d 	.word	0x6573206d
  407fb8:	72652074 	.word	0x72652074
  407fbc:	00726f72 	.word	0x00726f72

00407fc0 <__FUNCTION__.9746>:
  407fc0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  407fd0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  407fe0:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  407ff0:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

00408000 <__FUNCTION__.8784>:
  408000:	5f666968 00727369                       hif_isr.

00408008 <__FUNCTION__.8805>:
  408008:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  408018:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  408028:	63206568 0a706968 00000000 66696828     he chip.....(hif
  408038:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  408048:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  408058:	00000000 66696828 64612029 73657264     ....(hif) addres
  408068:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  408078:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  408088:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  408098:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  4080a8:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  4080b8:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  4080c8:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  4080d8:	64207070 276e6469 65732074 58522074     pp didn't set RX
  4080e8:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  4080f8:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  408108:	61462029 2065736c 65746e69 70757272     ) False interrup
  408118:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  408128:	74206c69 6552206f 69206461 7265746e     il to Read inter
  408138:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  408148:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  408158:	65687420 69686320 00000a70 46494828      the chip...(HIF
  408168:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  408178:	746e6920 75727265 25207470 72742064      interrupt %d tr
  408188:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  408198:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  4081a8:	72612064 656d7567 000a746e 20505041     d argument..APP 
  4081b8:	75716552 65747365 69532064 6920657a     Requested Size i
  4081c8:	616c2073 72656772 61687420 6874206e     s larger than th
  4081d8:	65722065 65766963 75622064 72656666     e recived buffer
  4081e8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  4081f8:	20505041 75716552 65747365 64412064     APP Requested Ad
  408208:	73657264 65622073 646e6f79 65687420     dress beyond the
  408218:	63657220 64657669 66756220 20726566      recived buffer 
  408228:	72646461 20737365 20646e61 676e656c     address and leng
  408238:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

00408248 <__FUNCTION__.8820>:
  408248:	5f666968 69676572 72657473 0062635f     hif_register_cb.

00408258 <__FUNCTION__.8774>:
  408258:	5f666968 646e6573 00000000              hif_send....

00408264 <__FUNCTION__.8790>:
  408264:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00408274 <__FUNCTION__.8799>:
  408274:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  408284:	0063735f                                _sc.

00408288 <__FUNCTION__.8747>:
  408288:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
  408298:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  4082a8:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  4082b8:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  4082c8:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  4082d8:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  4082e8:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  4082f8:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  408308:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  408318:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  408328:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  408338:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  408348:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  408358:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  408368:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  408378:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  408388:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  408398:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  4083a8:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  4083b8:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  4083c8:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  4083d8:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  4083e8:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  4083f8:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  408408:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  408418:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  408428:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  408438:	2079656b 65646e69 64252078 0000000a     key index %d....
  408448:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  408458:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  408468:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  408478:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  408488:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  408498:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  4084a8:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  4084b8:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  4084c8:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  4084d8:	72702066 2065626f 75716572 73747365     f probe requests
  4084e8:	72657020 61637320 6c73206e 000a746f      per scan slot..
  4084f8:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  408508:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  408518:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  408528:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  408538:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  408548:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  408558:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  408568:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  408578:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  408588:	66754220 20726566 65637865 64656465      Buffer exceeded
  408598:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  4085a8:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  4085b8:	00000000                                ....

004085bc <__FUNCTION__.8771>:
  4085bc:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

004085cc <__FUNCTION__.8678>:
  4085cc:	70696863 6965645f 0074696e              chip_deinit.

004085d8 <__FUNCTION__.8584>:
  4085d8:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  4085e8:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  4085f8:	20656b61 66207075 656c6961 00000a64     ake up failed...
  408608:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  408618:	20656b61 66207075 656c6961 00000a64     ake up failed...
  408628:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  408638:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  408648:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  408658:	69616620 6572206c 72206461 30206765      fail read reg 0
  408668:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  408678:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  408688:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  408698:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  4086a8:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  4086b8:	00000000 6f727245 68772072 20656c69     ....Error while 
  4086c8:	64616572 20676e69 0a676572 00000000     reading reg.....
  4086d8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  4086e8:	656c6961 6f742064 61657220 00000a64     ailed to read...
  4086f8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  408708:	656c6961 6f742064 69727720 000a6574     ailed to write..
  408718:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  408728:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  408738:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  408748:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  408758:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  408768:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  408778:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  408788:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  408798:	69642068 6c626173 61662065 000a6c69     h disable fail..
  4087a8:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  4087b8:	696e6920 75622074 00000a73               init bus...

004087c4 <__FUNCTION__.8665>:
  4087c4:	645f6d6e 695f7672 0074696e              nm_drv_init.

004087d0 <__FUNCTION__.8672>:
  4087d0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

004087e0 <__FUNCTION__.8073>:
  4087e0:	5f697073 61746164 6165725f 00000064     spi_data_read...

004087f0 <crc7_syndrome_table>:
  4087f0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  408800:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  408810:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  408820:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  408830:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  408840:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  408850:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  408860:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  408870:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  408880:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  408890:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  4088a0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  4088b0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  4088c0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  4088d0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  4088e0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

004088f0 <__FUNCTION__.8140>:
  4088f0:	735f6d6e 695f6970 0074696e              nm_spi_init.

004088fc <__FUNCTION__.8088>:
  4088fc:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040890c <__FUNCTION__.8123>:
  40890c:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  40891c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40892c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40893c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40894c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40895c:	61642064 72206174 6f707365 2065736e     d data response 
  40896c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40897c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40898c:	656c6961 61642064 72206174 6f707365     ailed data respo
  40899c:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  4089ac:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  4089bc:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4089cc:	61657220 62202c64 65207375 726f7272      read, bus error
  4089dc:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  4089ec:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  4089fc:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  408a0c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  408a1c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408a2c:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  408a3c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  408a4c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408a5c:	77202c64 65746972 67657220 30252820     d, write reg (%0
  408a6c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  408a7c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  408a8c:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  408a9c:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  408aac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408abc:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  408acc:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  408adc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408aec:	65722064 6e6f7073 202c6573 64616572     d response, read
  408afc:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  408b0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408b1c:	61642064 72206174 2e646165 000a2e2e     d data read.....
  408b2c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408b3c:	6e692064 6e726574 72206c61 20646165     d internal read 
  408b4c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  408b5c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  408b6c:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  408b7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408b8c:	6e692064 6e726574 72206c61 20646165     d internal read 
  408b9c:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  408bac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408bbc:	6e692064 6e726574 77206c61 65746972     d internal write
  408bcc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  408bdc:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  408bec:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  408bfc:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  408c0c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408c1c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  408c2c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  408c3c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408c4c:	65722064 6e6f7073 202c6573 64616572     d response, read
  408c5c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  408c6c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  408c7c:	656c6961 6c622064 206b636f 61746164     ailed block data
  408c8c:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  408c9c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408cac:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  408cbc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  408ccc:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  408cdc:	7220646d 6f707365 2c65736e 69727720     md response, wri
  408cec:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  408cfc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  408d0c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  408d1c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  408d2c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  408d3c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  408d4c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  408d5c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  408d6c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408d7c:	61642064 62206174 6b636f6c 63726320     d data block crc
  408d8c:	69727720 202c6574 20737562 6f727265      write, bus erro
  408d9c:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  408dac:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  408dbc:	61746164 69727720 2e2e6574 00000a2e     data write......

00408dcc <__FUNCTION__.8098>:
  408dcc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00408ddc <__FUNCTION__.8049>:
  408ddc:	5f697073 00646d63                       spi_cmd.

00408de4 <__FUNCTION__.8106>:
  408de4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00408df4 <__FUNCTION__.8057>:
  408df4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00408e00 <__FUNCTION__.8115>:
  408e00:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  408e10:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
  408e20:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
  408e30:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  408e40:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  408e50:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  408e60:	204c5353 6b636f53 000a7465 6b636f73     SSL Socket..sock
  408e70:	635f7465 62203a62 20646e69 63637573     et_cb: bind succ
  408e80:	21737365 00000a0d 6b636f73 635f7465     ess!....socket_c
  408e90:	62203a62 20646e69 6f727265 0a0d2172     b: bind error!..
  408ea0:	00000000 6b636f73 635f7465 6c203a62     ....socket_cb: l
  408eb0:	65747369 7573206e 73656363 0a0d2173     isten success!..
  408ec0:	00000000 6b636f73 635f7465 6c203a62     ....socket_cb: l
  408ed0:	65747369 7265206e 21726f72 00000a0d     isten error!....
  408ee0:	6b636f73 635f7465 61203a62 70656363     socket_cb: accep
  408ef0:	75732074 73656363 0a0d2173 00000000     t success!......
  408f00:	6b636f73 635f7465 61203a62 70656363     socket_cb: accep
  408f10:	72652074 21726f72 00000a0d 6b636f73     t error!....sock
  408f20:	635f7465 73203a62 20646e65 63637573     et_cb: send succ
  408f30:	21737365 00000a0d 20504354 76726553     ess!....TCP Serv
  408f40:	54207265 20747365 706d6f43 6574656c     er Test Complete
  408f50:	000a0d21 736f6c63 6f732065 74656b63     !...close socket
  408f60:	0000000a 736e654d 6d656761 63657220     ....Mensagem rec
  408f70:	64696265 6f642061 54555020 203a5954     ebida do PUTTY: 
  408f80:	656d756e 25206f72 000a2064 2d2d2d20     numero %d .. ---
  408f90:	2d2d2d2d 000a202d 2044456c 004e4e4f     ----- ..lED ONN.
  408fa0:	00007325 6b636f73 635f7465 72203a62     %s..socket_cb: r
  408fb0:	20766365 6f727265 0a0d2172 00000000     ecv error!......
  408fc0:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  408fd0:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
  408fe0:	4148435f 4445474e 4f43203a 43454e4e     _CHANGED: CONNEC
  408ff0:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  409000:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
  409010:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
  409020:	4944203a 4e4f4353 5443454e 0a0d4445     : DISCONNECTED..
  409030:	00000000 34333231 38373635 00000000     ....12345678....
  409040:	4e45504f 00000000 69666977 3a62635f     OPEN....wifi_cb:
  409050:	4d324d20 4649575f 45525f49 48445f51      M2M_WIFI_REQ_DH
  409060:	435f5043 3a464e4f 20504920 25207369     CP_CONF: IP is %
  409070:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  409080:	52454c41 43204154 21454641 00000000     ALERTA CAFE!....
  409090:	52414f42 4e492044 41495449 455a494c     BOARD INITIALIZE
  4090a0:	00000044 57202d2d 31434e49 20303035     D...-- WINC1500 
  4090b0:	20504354 76726573 65207265 706d6178     TCP server examp
  4090c0:	2d20656c 2d0a0d2d 4153202d 3037454d     le --..-- SAME70
  4090d0:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  4090e0:	656c6970 4d203a64 32207961 30322039     piled: May 29 20
  4090f0:	31203731 33323a30 2031303a 0a0d2d2d     17 10:23:01 --..
  409100:	00000000 20435452 54494e49 45544149     ....RTC INITIATE
  409110:	00000044 6e69616d 326d203a 69775f6d     D...main: m2m_wi
  409120:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
  409130:	2821726f 0d296425 0000000a 49464957     or!(%d).....WIFI
  409140:	494e4920 54414954 00004445 69797274      INITIATED..tryi
  409150:	7420676e 6f63206f 63656e6e 2e2e2e74     ng to connect...
  409160:	00000000 6e69616d 6166203a 64656c69     ....main: failed
  409170:	206f7420 61657263 54206574 73205043      to create TCP s
  409180:	65767265 6f732072 74656b63 72726520     erver socket err
  409190:	0d21726f 0000000a 6e6e6f43 69746365     or!.....Connecti
  4091a0:	6c206e6f 2e74736f 0000000a 00000043     on lost.....C...

004091b0 <_global_impure_ptr>:
  4091b0:	20400020                                 .@ 

004091b4 <zeroes.6993>:
  4091b4:	30303030 30303030 30303030 30303030     0000000000000000
  4091c4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4091d4:	00000000 33323130 37363534 62613938     ....0123456789ab
  4091e4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

004091f4 <blanks.6992>:
  4091f4:	20202020 20202020 20202020 20202020                     

00409204 <_init>:
  409204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409206:	bf00      	nop
  409208:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40920a:	bc08      	pop	{r3}
  40920c:	469e      	mov	lr, r3
  40920e:	4770      	bx	lr

00409210 <__init_array_start>:
  409210:	0040665d 	.word	0x0040665d

00409214 <__frame_dummy_init_array_entry>:
  409214:	00400165                                e.@.

00409218 <_fini>:
  409218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40921a:	bf00      	nop
  40921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40921e:	bc08      	pop	{r3}
  409220:	469e      	mov	lr, r3
  409222:	4770      	bx	lr

00409224 <__fini_array_start>:
  409224:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	ffff                                             .

2040001d <tcp_server_socket>:
2040001d:	00ff 0000                                        ...

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	91ac 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <__malloc_av_>:
	...
20400454:	044c 2040 044c 2040 0454 2040 0454 2040     L.@ L.@ T.@ T.@ 
20400464:	045c 2040 045c 2040 0464 2040 0464 2040     \.@ \.@ d.@ d.@ 
20400474:	046c 2040 046c 2040 0474 2040 0474 2040     l.@ l.@ t.@ t.@ 
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <lc_ctype_charset>:
2040085c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2040087c <__mb_cur_max>:
2040087c:	0001 0000                                   ....

20400880 <__wctomb>:
20400880:	79e9 0040                                   .y@.
