
PWM_PWM_LED_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d68  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20400000  00400d68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20400430  00401198  00020430  2**2
                  ALLOC
  3 .stack        00002000  204004f8  00401260  00020430  2**0
                  ALLOC
  4 .heap         00000200  204024f8  00403260  00020430  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a9b0  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001695  00000000  00000000  0002ae67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003702  00000000  00000000  0002c4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006c8  00000000  00000000  0002fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000700  00000000  00000000  000302c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c33e  00000000  00000000  000309c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000779b  00000000  00000000  0004cd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089c62  00000000  00000000  0005449f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f84  00000000  00000000  000de104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204024f8 	.word	0x204024f8
  400004:	00400875 	.word	0x00400875
  400008:	00400871 	.word	0x00400871
  40000c:	00400871 	.word	0x00400871
  400010:	00400871 	.word	0x00400871
  400014:	00400871 	.word	0x00400871
  400018:	00400871 	.word	0x00400871
	...
  40002c:	00400871 	.word	0x00400871
  400030:	00400871 	.word	0x00400871
  400034:	00000000 	.word	0x00000000
  400038:	00400871 	.word	0x00400871
  40003c:	00400871 	.word	0x00400871
  400040:	00400871 	.word	0x00400871
  400044:	00400871 	.word	0x00400871
  400048:	00400871 	.word	0x00400871
  40004c:	00400871 	.word	0x00400871
  400050:	00400871 	.word	0x00400871
  400054:	00400871 	.word	0x00400871
  400058:	00400871 	.word	0x00400871
  40005c:	00400871 	.word	0x00400871
  400060:	00400871 	.word	0x00400871
  400064:	00000000 	.word	0x00000000
  400068:	0040042d 	.word	0x0040042d
  40006c:	00400441 	.word	0x00400441
  400070:	00400455 	.word	0x00400455
  400074:	00400871 	.word	0x00400871
  400078:	00400871 	.word	0x00400871
  40007c:	00400871 	.word	0x00400871
  400080:	00400469 	.word	0x00400469
  400084:	0040047d 	.word	0x0040047d
  400088:	00400871 	.word	0x00400871
  40008c:	00400871 	.word	0x00400871
  400090:	00400871 	.word	0x00400871
  400094:	00400871 	.word	0x00400871
  400098:	00400871 	.word	0x00400871
  40009c:	00400871 	.word	0x00400871
  4000a0:	00400871 	.word	0x00400871
  4000a4:	00400871 	.word	0x00400871
  4000a8:	00400871 	.word	0x00400871
  4000ac:	00400871 	.word	0x00400871
  4000b0:	00400871 	.word	0x00400871
  4000b4:	00400871 	.word	0x00400871
  4000b8:	00400871 	.word	0x00400871
  4000bc:	00400ad5 	.word	0x00400ad5
  4000c0:	00400871 	.word	0x00400871
  4000c4:	00400871 	.word	0x00400871
  4000c8:	00400871 	.word	0x00400871
  4000cc:	00400871 	.word	0x00400871
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400871 	.word	0x00400871
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400871 	.word	0x00400871
  4000e0:	00400871 	.word	0x00400871
  4000e4:	00400871 	.word	0x00400871
  4000e8:	00400871 	.word	0x00400871
  4000ec:	00400871 	.word	0x00400871
  4000f0:	00400871 	.word	0x00400871
  4000f4:	00400871 	.word	0x00400871
  4000f8:	00400871 	.word	0x00400871
  4000fc:	00400871 	.word	0x00400871
  400100:	00400871 	.word	0x00400871
  400104:	00400871 	.word	0x00400871
  400108:	00400871 	.word	0x00400871
  40010c:	00400871 	.word	0x00400871
  400110:	00400871 	.word	0x00400871
	...
  400120:	00400871 	.word	0x00400871
  400124:	00400871 	.word	0x00400871
  400128:	00400871 	.word	0x00400871
  40012c:	00400871 	.word	0x00400871
  400130:	00400871 	.word	0x00400871
  400134:	00000000 	.word	0x00000000
  400138:	00400871 	.word	0x00400871
  40013c:	00400871 	.word	0x00400871

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400430 	.word	0x20400430
  40015c:	00000000 	.word	0x00000000
  400160:	00400d68 	.word	0x00400d68

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400434 	.word	0x20400434
  400190:	00400d68 	.word	0x00400d68
  400194:	00400d68 	.word	0x00400d68
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	4802      	ldr	r0, [pc, #8]	; (4001e0 <sysclk_init+0x44>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	00400a61 	.word	0x00400a61
  4001e8:	00400535 	.word	0x00400535
  4001ec:	00400589 	.word	0x00400589
  4001f0:	00400599 	.word	0x00400599
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	004005a9 	.word	0x004005a9
  400200:	00400491 	.word	0x00400491
  400204:	004004cd 	.word	0x004004cd
  400208:	00400951 	.word	0x00400951

0040020c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40020e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400212:	4b68      	ldr	r3, [pc, #416]	; (4003b4 <board_init+0x1a8>)
  400214:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400216:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40021a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40021e:	4b66      	ldr	r3, [pc, #408]	; (4003b8 <board_init+0x1ac>)
  400220:	2200      	movs	r2, #0
  400222:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400226:	695a      	ldr	r2, [r3, #20]
  400228:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40022c:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40022e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400232:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400236:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40023a:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40023e:	f006 0707 	and.w	r7, r6, #7
  400242:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400244:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400248:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  40024c:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400250:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400254:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400256:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  400258:	fa05 f107 	lsl.w	r1, r5, r7
  40025c:	fa03 f200 	lsl.w	r2, r3, r0
  400260:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  400262:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  400266:	3b01      	subs	r3, #1
  400268:	f1b3 3fff 	cmp.w	r3, #4294967295
  40026c:	d1f6      	bne.n	40025c <board_init+0x50>
        } while(sets--);
  40026e:	3d01      	subs	r5, #1
  400270:	f1b5 3fff 	cmp.w	r5, #4294967295
  400274:	d1ef      	bne.n	400256 <board_init+0x4a>
  400276:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40027a:	4b4f      	ldr	r3, [pc, #316]	; (4003b8 <board_init+0x1ac>)
  40027c:	695a      	ldr	r2, [r3, #20]
  40027e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400282:	615a      	str	r2, [r3, #20]
  400284:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400288:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40028c:	4a4b      	ldr	r2, [pc, #300]	; (4003bc <board_init+0x1b0>)
  40028e:	494c      	ldr	r1, [pc, #304]	; (4003c0 <board_init+0x1b4>)
  400290:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400292:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400296:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400298:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40029c:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002a0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002a4:	f022 0201 	bic.w	r2, r2, #1
  4002a8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002ac:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002b0:	f022 0201 	bic.w	r2, r2, #1
  4002b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002bc:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002c0:	200a      	movs	r0, #10
  4002c2:	4c40      	ldr	r4, [pc, #256]	; (4003c4 <board_init+0x1b8>)
  4002c4:	47a0      	blx	r4
  4002c6:	200b      	movs	r0, #11
  4002c8:	47a0      	blx	r4
  4002ca:	200c      	movs	r0, #12
  4002cc:	47a0      	blx	r4
  4002ce:	2010      	movs	r0, #16
  4002d0:	47a0      	blx	r4
  4002d2:	2011      	movs	r0, #17
  4002d4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002d6:	4b3c      	ldr	r3, [pc, #240]	; (4003c8 <board_init+0x1bc>)
  4002d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002dc:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002e2:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002ec:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4002f2:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002f8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  4002fa:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4002fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400300:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400302:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400306:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400308:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40030a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40030e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400310:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400314:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400318:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40031c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400320:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400326:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400328:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40032a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40032e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400330:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400334:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400336:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400338:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40033c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40033e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400340:	4922      	ldr	r1, [pc, #136]	; (4003cc <board_init+0x1c0>)
  400342:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  400346:	f042 0210 	orr.w	r2, r2, #16
  40034a:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034e:	4a20      	ldr	r2, [pc, #128]	; (4003d0 <board_init+0x1c4>)
  400350:	2110      	movs	r1, #16
  400352:	6611      	str	r1, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400354:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400358:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40035a:	6251      	str	r1, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400360:	6f10      	ldr	r0, [r2, #112]	; 0x70
  400362:	4308      	orrs	r0, r1
  400364:	6710      	str	r0, [r2, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  400366:	6f50      	ldr	r0, [r2, #116]	; 0x74
  400368:	4308      	orrs	r0, r1
  40036a:	6750      	str	r0, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40036c:	6051      	str	r1, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400372:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400378:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40037a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400380:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400382:	4311      	orrs	r1, r2
  400384:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400386:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400388:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  40038c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038e:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400394:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40039a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40039c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40039e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003a4:	4311      	orrs	r1, r2
  4003a6:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003a8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003aa:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  4003ae:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003b0:	605a      	str	r2, [r3, #4]
  4003b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003b4:	400e1850 	.word	0x400e1850
  4003b8:	e000ed00 	.word	0xe000ed00
  4003bc:	400e0c00 	.word	0x400e0c00
  4003c0:	5a00080c 	.word	0x5a00080c
  4003c4:	004005b9 	.word	0x004005b9
  4003c8:	400e1200 	.word	0x400e1200
  4003cc:	40088000 	.word	0x40088000
  4003d0:	400e1000 	.word	0x400e1000

004003d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003d6:	4770      	bx	lr

004003d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003da:	4770      	bx	lr

004003dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003e0:	4604      	mov	r4, r0
  4003e2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003e4:	4b0e      	ldr	r3, [pc, #56]	; (400420 <pio_handler_process+0x44>)
  4003e6:	4798      	blx	r3
  4003e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003ea:	4620      	mov	r0, r4
  4003ec:	4b0d      	ldr	r3, [pc, #52]	; (400424 <pio_handler_process+0x48>)
  4003ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003f0:	4005      	ands	r5, r0
  4003f2:	d013      	beq.n	40041c <pio_handler_process+0x40>
  4003f4:	4c0c      	ldr	r4, [pc, #48]	; (400428 <pio_handler_process+0x4c>)
  4003f6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4003fa:	6823      	ldr	r3, [r4, #0]
  4003fc:	4543      	cmp	r3, r8
  4003fe:	d108      	bne.n	400412 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400400:	6861      	ldr	r1, [r4, #4]
  400402:	4229      	tst	r1, r5
  400404:	d005      	beq.n	400412 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400406:	68e3      	ldr	r3, [r4, #12]
  400408:	4640      	mov	r0, r8
  40040a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40040c:	6863      	ldr	r3, [r4, #4]
  40040e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400412:	42b4      	cmp	r4, r6
  400414:	d002      	beq.n	40041c <pio_handler_process+0x40>
  400416:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400418:	2d00      	cmp	r5, #0
  40041a:	d1ee      	bne.n	4003fa <pio_handler_process+0x1e>
  40041c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400420:	004003d5 	.word	0x004003d5
  400424:	004003d9 	.word	0x004003d9
  400428:	2040044c 	.word	0x2040044c

0040042c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40042c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40042e:	210a      	movs	r1, #10
  400430:	4801      	ldr	r0, [pc, #4]	; (400438 <PIOA_Handler+0xc>)
  400432:	4b02      	ldr	r3, [pc, #8]	; (40043c <PIOA_Handler+0x10>)
  400434:	4798      	blx	r3
  400436:	bd08      	pop	{r3, pc}
  400438:	400e0e00 	.word	0x400e0e00
  40043c:	004003dd 	.word	0x004003dd

00400440 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400440:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400442:	210b      	movs	r1, #11
  400444:	4801      	ldr	r0, [pc, #4]	; (40044c <PIOB_Handler+0xc>)
  400446:	4b02      	ldr	r3, [pc, #8]	; (400450 <PIOB_Handler+0x10>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	400e1000 	.word	0x400e1000
  400450:	004003dd 	.word	0x004003dd

00400454 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400454:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400456:	210c      	movs	r1, #12
  400458:	4801      	ldr	r0, [pc, #4]	; (400460 <PIOC_Handler+0xc>)
  40045a:	4b02      	ldr	r3, [pc, #8]	; (400464 <PIOC_Handler+0x10>)
  40045c:	4798      	blx	r3
  40045e:	bd08      	pop	{r3, pc}
  400460:	400e1200 	.word	0x400e1200
  400464:	004003dd 	.word	0x004003dd

00400468 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400468:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40046a:	2110      	movs	r1, #16
  40046c:	4801      	ldr	r0, [pc, #4]	; (400474 <PIOD_Handler+0xc>)
  40046e:	4b02      	ldr	r3, [pc, #8]	; (400478 <PIOD_Handler+0x10>)
  400470:	4798      	blx	r3
  400472:	bd08      	pop	{r3, pc}
  400474:	400e1400 	.word	0x400e1400
  400478:	004003dd 	.word	0x004003dd

0040047c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40047c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40047e:	2111      	movs	r1, #17
  400480:	4801      	ldr	r0, [pc, #4]	; (400488 <PIOE_Handler+0xc>)
  400482:	4b02      	ldr	r3, [pc, #8]	; (40048c <PIOE_Handler+0x10>)
  400484:	4798      	blx	r3
  400486:	bd08      	pop	{r3, pc}
  400488:	400e1600 	.word	0x400e1600
  40048c:	004003dd 	.word	0x004003dd

00400490 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400490:	2803      	cmp	r0, #3
  400492:	d007      	beq.n	4004a4 <pmc_mck_set_division+0x14>
  400494:	2804      	cmp	r0, #4
  400496:	d008      	beq.n	4004aa <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400498:	2802      	cmp	r0, #2
  40049a:	bf0c      	ite	eq
  40049c:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4004a0:	2200      	movne	r2, #0
  4004a2:	e004      	b.n	4004ae <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4004a4:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4004a8:	e001      	b.n	4004ae <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4004aa:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4004ae:	4906      	ldr	r1, [pc, #24]	; (4004c8 <pmc_mck_set_division+0x38>)
  4004b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4004b6:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4004b8:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4004ba:	460a      	mov	r2, r1
  4004bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004be:	f013 0f08 	tst.w	r3, #8
  4004c2:	d0fb      	beq.n	4004bc <pmc_mck_set_division+0x2c>
}
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop
  4004c8:	400e0600 	.word	0x400e0600

004004cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004cc:	4a18      	ldr	r2, [pc, #96]	; (400530 <pmc_switch_mck_to_pllack+0x64>)
  4004ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004d4:	4318      	orrs	r0, r3
  4004d6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004da:	f013 0f08 	tst.w	r3, #8
  4004de:	d003      	beq.n	4004e8 <pmc_switch_mck_to_pllack+0x1c>
  4004e0:	e009      	b.n	4004f6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004e2:	3b01      	subs	r3, #1
  4004e4:	d103      	bne.n	4004ee <pmc_switch_mck_to_pllack+0x22>
  4004e6:	e01e      	b.n	400526 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4004ec:	4910      	ldr	r1, [pc, #64]	; (400530 <pmc_switch_mck_to_pllack+0x64>)
  4004ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004f0:	f012 0f08 	tst.w	r2, #8
  4004f4:	d0f5      	beq.n	4004e2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004f6:	4a0e      	ldr	r2, [pc, #56]	; (400530 <pmc_switch_mck_to_pllack+0x64>)
  4004f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004fa:	f023 0303 	bic.w	r3, r3, #3
  4004fe:	f043 0302 	orr.w	r3, r3, #2
  400502:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400504:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400506:	f010 0008 	ands.w	r0, r0, #8
  40050a:	d004      	beq.n	400516 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40050c:	2000      	movs	r0, #0
  40050e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400510:	3b01      	subs	r3, #1
  400512:	d103      	bne.n	40051c <pmc_switch_mck_to_pllack+0x50>
  400514:	e009      	b.n	40052a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40051a:	4905      	ldr	r1, [pc, #20]	; (400530 <pmc_switch_mck_to_pllack+0x64>)
  40051c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40051e:	f012 0f08 	tst.w	r2, #8
  400522:	d0f5      	beq.n	400510 <pmc_switch_mck_to_pllack+0x44>
  400524:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400526:	2001      	movs	r0, #1
  400528:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40052a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40052c:	4770      	bx	lr
  40052e:	bf00      	nop
  400530:	400e0600 	.word	0x400e0600

00400534 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400534:	b138      	cbz	r0, 400546 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400536:	490e      	ldr	r1, [pc, #56]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400538:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40053a:	4a0e      	ldr	r2, [pc, #56]	; (400574 <pmc_switch_mainck_to_xtal+0x40>)
  40053c:	401a      	ands	r2, r3
  40053e:	4b0e      	ldr	r3, [pc, #56]	; (400578 <pmc_switch_mainck_to_xtal+0x44>)
  400540:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400542:	620b      	str	r3, [r1, #32]
  400544:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400546:	480a      	ldr	r0, [pc, #40]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400548:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40054a:	0209      	lsls	r1, r1, #8
  40054c:	b289      	uxth	r1, r1
  40054e:	4a0b      	ldr	r2, [pc, #44]	; (40057c <pmc_switch_mainck_to_xtal+0x48>)
  400550:	401a      	ands	r2, r3
  400552:	4b0b      	ldr	r3, [pc, #44]	; (400580 <pmc_switch_mainck_to_xtal+0x4c>)
  400554:	4313      	orrs	r3, r2
  400556:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400558:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40055a:	4602      	mov	r2, r0
  40055c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40055e:	f013 0f01 	tst.w	r3, #1
  400562:	d0fb      	beq.n	40055c <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400564:	4a02      	ldr	r2, [pc, #8]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400566:	6a11      	ldr	r1, [r2, #32]
  400568:	4b06      	ldr	r3, [pc, #24]	; (400584 <pmc_switch_mainck_to_xtal+0x50>)
  40056a:	430b      	orrs	r3, r1
  40056c:	6213      	str	r3, [r2, #32]
  40056e:	4770      	bx	lr
  400570:	400e0600 	.word	0x400e0600
  400574:	fec8fffc 	.word	0xfec8fffc
  400578:	01370002 	.word	0x01370002
  40057c:	ffc8fffc 	.word	0xffc8fffc
  400580:	00370001 	.word	0x00370001
  400584:	01370000 	.word	0x01370000

00400588 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400588:	4b02      	ldr	r3, [pc, #8]	; (400594 <pmc_osc_is_ready_mainck+0xc>)
  40058a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40058c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	400e0600 	.word	0x400e0600

00400598 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40059c:	4b01      	ldr	r3, [pc, #4]	; (4005a4 <pmc_disable_pllack+0xc>)
  40059e:	629a      	str	r2, [r3, #40]	; 0x28
  4005a0:	4770      	bx	lr
  4005a2:	bf00      	nop
  4005a4:	400e0600 	.word	0x400e0600

004005a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <pmc_is_locked_pllack+0xc>)
  4005aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4005ac:	f000 0002 	and.w	r0, r0, #2
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e0600 	.word	0x400e0600

004005b8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4005b8:	283f      	cmp	r0, #63	; 0x3f
  4005ba:	d81e      	bhi.n	4005fa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4005bc:	281f      	cmp	r0, #31
  4005be:	d80c      	bhi.n	4005da <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4005c0:	4b11      	ldr	r3, [pc, #68]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005c2:	699a      	ldr	r2, [r3, #24]
  4005c4:	2301      	movs	r3, #1
  4005c6:	4083      	lsls	r3, r0
  4005c8:	4393      	bics	r3, r2
  4005ca:	d018      	beq.n	4005fe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4005cc:	2301      	movs	r3, #1
  4005ce:	fa03 f000 	lsl.w	r0, r3, r0
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005d4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005d6:	2000      	movs	r0, #0
  4005d8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4005da:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005dc:	4b0a      	ldr	r3, [pc, #40]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4005e2:	2301      	movs	r3, #1
  4005e4:	4083      	lsls	r3, r0
  4005e6:	4393      	bics	r3, r2
  4005e8:	d00b      	beq.n	400602 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005ea:	2301      	movs	r3, #1
  4005ec:	fa03 f000 	lsl.w	r0, r3, r0
  4005f0:	4b05      	ldr	r3, [pc, #20]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005f2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4005f6:	2000      	movs	r0, #0
  4005f8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4005fa:	2001      	movs	r0, #1
  4005fc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005fe:	2000      	movs	r0, #0
  400600:	4770      	bx	lr
  400602:	2000      	movs	r0, #0
}
  400604:	4770      	bx	lr
  400606:	bf00      	nop
  400608:	400e0600 	.word	0x400e0600

0040060c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  40060c:	b4f0      	push	{r4, r5, r6, r7}
  40060e:	b08c      	sub	sp, #48	; 0x30
  400610:	4607      	mov	r7, r0
  400612:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400614:	ac01      	add	r4, sp, #4
  400616:	4d11      	ldr	r5, [pc, #68]	; (40065c <pwm_clocks_generate+0x50>)
  400618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400628:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40062a:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40062c:	f852 3b04 	ldr.w	r3, [r2], #4
  400630:	fbb6 f3f3 	udiv	r3, r6, r3
  400634:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40063c:	d905      	bls.n	40064a <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  40063e:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400640:	280b      	cmp	r0, #11
  400642:	d1f3      	bne.n	40062c <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400644:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400648:	e005      	b.n	400656 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40064a:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  40064c:	bf94      	ite	ls
  40064e:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  400652:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  400656:	b00c      	add	sp, #48	; 0x30
  400658:	bcf0      	pop	{r4, r5, r6, r7}
  40065a:	4770      	bx	lr
  40065c:	00400d10 	.word	0x00400d10

00400660 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400660:	b570      	push	{r4, r5, r6, lr}
  400662:	4606      	mov	r6, r0
  400664:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400666:	6808      	ldr	r0, [r1, #0]
  400668:	b140      	cbz	r0, 40067c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40066a:	6889      	ldr	r1, [r1, #8]
  40066c:	4b0e      	ldr	r3, [pc, #56]	; (4006a8 <pwm_init+0x48>)
  40066e:	4798      	blx	r3
  400670:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400672:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400676:	4298      	cmp	r0, r3
  400678:	d101      	bne.n	40067e <pwm_init+0x1e>
  40067a:	e00e      	b.n	40069a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  40067c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40067e:	6860      	ldr	r0, [r4, #4]
  400680:	b140      	cbz	r0, 400694 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400682:	68a1      	ldr	r1, [r4, #8]
  400684:	4b08      	ldr	r3, [pc, #32]	; (4006a8 <pwm_init+0x48>)
  400686:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400688:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40068c:	4298      	cmp	r0, r3
  40068e:	d007      	beq.n	4006a0 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  400690:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400694:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  400696:	2000      	movs	r0, #0
  400698:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40069a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40069e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  4006a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  4006a4:	bd70      	pop	{r4, r5, r6, pc}
  4006a6:	bf00      	nop
  4006a8:	0040060d 	.word	0x0040060d

004006ac <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4006ac:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4006ae:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4006b0:	684a      	ldr	r2, [r1, #4]
  4006b2:	f002 020f 	and.w	r2, r2, #15
  4006b6:	8a8c      	ldrh	r4, [r1, #20]
  4006b8:	4322      	orrs	r2, r4
  4006ba:	890c      	ldrh	r4, [r1, #8]
  4006bc:	4322      	orrs	r2, r4
  4006be:	7a8c      	ldrb	r4, [r1, #10]
  4006c0:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4006c4:	7d8c      	ldrb	r4, [r1, #22]
  4006c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4006ca:	7dcc      	ldrb	r4, [r1, #23]
  4006cc:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4006d0:	7e0c      	ldrb	r4, [r1, #24]
  4006d2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4006d6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4006da:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4006de:	68ca      	ldr	r2, [r1, #12]
  4006e0:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4006e4:	690a      	ldr	r2, [r1, #16]
  4006e6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4006ea:	7d8a      	ldrb	r2, [r1, #22]
  4006ec:	b13a      	cbz	r2, 4006fe <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4006ee:	8b8c      	ldrh	r4, [r1, #28]
  4006f0:	8b4a      	ldrh	r2, [r1, #26]
  4006f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4006f6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4006fa:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4006fe:	6c84      	ldr	r4, [r0, #72]	; 0x48
  400700:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  400704:	409a      	lsls	r2, r3
  400706:	43d2      	mvns	r2, r2
  400708:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40070c:	7fcc      	ldrb	r4, [r1, #31]
  40070e:	fa04 f603 	lsl.w	r6, r4, r3
  400712:	7f8c      	ldrb	r4, [r1, #30]
  400714:	409c      	lsls	r4, r3
  400716:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40071a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40071c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40071e:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400720:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400722:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400726:	fa04 f503 	lsl.w	r5, r4, r3
  40072a:	f891 4020 	ldrb.w	r4, [r1, #32]
  40072e:	409c      	lsls	r4, r3
  400730:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400734:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400736:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400738:	2201      	movs	r2, #1
  40073a:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  40073c:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400740:	b11c      	cbz	r4, 40074a <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  400742:	6a04      	ldr	r4, [r0, #32]
  400744:	4314      	orrs	r4, r2
  400746:	6204      	str	r4, [r0, #32]
  400748:	e003      	b.n	400752 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40074a:	6a04      	ldr	r4, [r0, #32]
  40074c:	ea24 0402 	bic.w	r4, r4, r2
  400750:	6204      	str	r4, [r0, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  400752:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400756:	2c02      	cmp	r4, #2
  400758:	d105      	bne.n	400766 <pwm_channel_init+0xba>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  40075a:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40075e:	4314      	orrs	r4, r2
  400760:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  400764:	e00d      	b.n	400782 <pwm_channel_init+0xd6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  400766:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40076a:	43d5      	mvns	r5, r2
  40076c:	402c      	ands	r4, r5
  40076e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400772:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400776:	2c01      	cmp	r4, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  400778:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40077a:	bf0c      	ite	eq
  40077c:	4314      	orreq	r4, r2
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  40077e:	402c      	andne	r4, r5
  400780:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  400782:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400786:	2c02      	cmp	r4, #2
  400788:	d106      	bne.n	400798 <pwm_channel_init+0xec>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  40078a:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40078e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  400792:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  400796:	e011      	b.n	4007bc <pwm_channel_init+0x110>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  400798:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40079c:	0412      	lsls	r2, r2, #16
  40079e:	43d5      	mvns	r5, r2
  4007a0:	402c      	ands	r4, r5
  4007a2:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4007a6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4007aa:	2c01      	cmp	r4, #1
  4007ac:	d103      	bne.n	4007b6 <pwm_channel_init+0x10a>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4007ae:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4007b0:	4322      	orrs	r2, r4
  4007b2:	6682      	str	r2, [r0, #104]	; 0x68
  4007b4:	e002      	b.n	4007bc <pwm_channel_init+0x110>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  4007b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  4007b8:	402a      	ands	r2, r5
  4007ba:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4007bc:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4007be:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4007c0:	22ff      	movs	r2, #255	; 0xff
  4007c2:	409a      	lsls	r2, r3
  4007c4:	ea25 0402 	bic.w	r4, r5, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4007c8:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
  4007cc:	409a      	lsls	r2, r3
  4007ce:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4007d0:	66c2      	str	r2, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  4007d2:	b953      	cbnz	r3, 4007ea <pwm_channel_init+0x13e>
		if (p_channel->spread_spectrum_mode ==
  4007d4:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
  4007d8:	2a01      	cmp	r2, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  4007da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  4007dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4007e0:	bf08      	it	eq
  4007e2:	f042 7280 	orreq.w	r2, r2, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  4007e6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  4007ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  4007ee:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  4007f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  4007f6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  4007fa:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  4007fe:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  400800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  400804:	4313      	orrs	r3, r2
  400806:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  40080a:	2000      	movs	r0, #0
  40080c:	bc70      	pop	{r4, r5, r6}
  40080e:	4770      	bx	lr

00400810 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400810:	690b      	ldr	r3, [r1, #16]
  400812:	4293      	cmp	r3, r2
  400814:	d307      	bcc.n	400826 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  400816:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  400818:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40081a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40081e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  400822:	2000      	movs	r0, #0
  400824:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  400826:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40082a:	4770      	bx	lr

0040082c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  40082c:	2301      	movs	r3, #1
  40082e:	fa03 f101 	lsl.w	r1, r3, r1
  400832:	6041      	str	r1, [r0, #4]
  400834:	4770      	bx	lr
  400836:	bf00      	nop

00400838 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400838:	2301      	movs	r3, #1
  40083a:	fa03 f101 	lsl.w	r1, r3, r1
  40083e:	6081      	str	r1, [r0, #8]
  400840:	4770      	bx	lr
  400842:	bf00      	nop

00400844 <pwm_channel_get_interrupt_status>:
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  400844:	69c0      	ldr	r0, [r0, #28]
#endif
}
  400846:	4770      	bx	lr

00400848 <pwm_channel_enable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  400848:	3210      	adds	r2, #16
  40084a:	2301      	movs	r3, #1
  40084c:	fa03 f202 	lsl.w	r2, r3, r2
  400850:	fa03 f101 	lsl.w	r1, r3, r1
  400854:	4311      	orrs	r1, r2
  400856:	6101      	str	r1, [r0, #16]
  400858:	4770      	bx	lr
  40085a:	bf00      	nop

0040085c <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  40085c:	3210      	adds	r2, #16
  40085e:	2301      	movs	r3, #1
  400860:	fa03 f202 	lsl.w	r2, r3, r2
  400864:	fa03 f101 	lsl.w	r1, r3, r1
  400868:	4311      	orrs	r1, r2
  40086a:	6141      	str	r1, [r0, #20]
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop

00400870 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400870:	e7fe      	b.n	400870 <Dummy_Handler>
  400872:	bf00      	nop

00400874 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400874:	b500      	push	{lr}
  400876:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400878:	4b27      	ldr	r3, [pc, #156]	; (400918 <Reset_Handler+0xa4>)
  40087a:	4a28      	ldr	r2, [pc, #160]	; (40091c <Reset_Handler+0xa8>)
  40087c:	429a      	cmp	r2, r3
  40087e:	d003      	beq.n	400888 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400880:	4b27      	ldr	r3, [pc, #156]	; (400920 <Reset_Handler+0xac>)
  400882:	4a25      	ldr	r2, [pc, #148]	; (400918 <Reset_Handler+0xa4>)
  400884:	429a      	cmp	r2, r3
  400886:	d304      	bcc.n	400892 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400888:	4b26      	ldr	r3, [pc, #152]	; (400924 <Reset_Handler+0xb0>)
  40088a:	4a27      	ldr	r2, [pc, #156]	; (400928 <Reset_Handler+0xb4>)
  40088c:	429a      	cmp	r2, r3
  40088e:	d30f      	bcc.n	4008b0 <Reset_Handler+0x3c>
  400890:	e01a      	b.n	4008c8 <Reset_Handler+0x54>
  400892:	4921      	ldr	r1, [pc, #132]	; (400918 <Reset_Handler+0xa4>)
  400894:	4b25      	ldr	r3, [pc, #148]	; (40092c <Reset_Handler+0xb8>)
  400896:	1a5b      	subs	r3, r3, r1
  400898:	f023 0303 	bic.w	r3, r3, #3
  40089c:	3304      	adds	r3, #4
  40089e:	4a1f      	ldr	r2, [pc, #124]	; (40091c <Reset_Handler+0xa8>)
  4008a0:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4008a2:	f852 0b04 	ldr.w	r0, [r2], #4
  4008a6:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4008aa:	429a      	cmp	r2, r3
  4008ac:	d1f9      	bne.n	4008a2 <Reset_Handler+0x2e>
  4008ae:	e7eb      	b.n	400888 <Reset_Handler+0x14>
  4008b0:	4b1f      	ldr	r3, [pc, #124]	; (400930 <Reset_Handler+0xbc>)
  4008b2:	4a20      	ldr	r2, [pc, #128]	; (400934 <Reset_Handler+0xc0>)
  4008b4:	1ad2      	subs	r2, r2, r3
  4008b6:	f022 0203 	bic.w	r2, r2, #3
  4008ba:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4008bc:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4008be:	2100      	movs	r1, #0
  4008c0:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4008c4:	4293      	cmp	r3, r2
  4008c6:	d1fb      	bne.n	4008c0 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4008c8:	4a1b      	ldr	r2, [pc, #108]	; (400938 <Reset_Handler+0xc4>)
  4008ca:	4b1c      	ldr	r3, [pc, #112]	; (40093c <Reset_Handler+0xc8>)
  4008cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4008d0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008d2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008d6:	fab3 f383 	clz	r3, r3
  4008da:	095b      	lsrs	r3, r3, #5
  4008dc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4008de:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008e4:	2200      	movs	r2, #0
  4008e6:	4b16      	ldr	r3, [pc, #88]	; (400940 <Reset_Handler+0xcc>)
  4008e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4008ea:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008ec:	4a15      	ldr	r2, [pc, #84]	; (400944 <Reset_Handler+0xd0>)
  4008ee:	6813      	ldr	r3, [r2, #0]
  4008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008f4:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008f6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008fa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008fe:	b129      	cbz	r1, 40090c <Reset_Handler+0x98>
		cpu_irq_enable();
  400900:	2201      	movs	r2, #1
  400902:	4b0f      	ldr	r3, [pc, #60]	; (400940 <Reset_Handler+0xcc>)
  400904:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400906:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40090a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40090c:	4b0e      	ldr	r3, [pc, #56]	; (400948 <Reset_Handler+0xd4>)
  40090e:	4798      	blx	r3

        /* Branch to main function */
        main();
  400910:	4b0e      	ldr	r3, [pc, #56]	; (40094c <Reset_Handler+0xd8>)
  400912:	4798      	blx	r3
  400914:	e7fe      	b.n	400914 <Reset_Handler+0xa0>
  400916:	bf00      	nop
  400918:	20400000 	.word	0x20400000
  40091c:	00400d68 	.word	0x00400d68
  400920:	20400430 	.word	0x20400430
  400924:	204004f8 	.word	0x204004f8
  400928:	20400430 	.word	0x20400430
  40092c:	2040042f 	.word	0x2040042f
  400930:	20400434 	.word	0x20400434
  400934:	204004fb 	.word	0x204004fb
  400938:	e000ed00 	.word	0xe000ed00
  40093c:	00400000 	.word	0x00400000
  400940:	20400000 	.word	0x20400000
  400944:	e000ed88 	.word	0xe000ed88
  400948:	00400bd5 	.word	0x00400bd5
  40094c:	00400bb9 	.word	0x00400bb9

00400950 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400950:	4b3c      	ldr	r3, [pc, #240]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  400952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400954:	f003 0303 	and.w	r3, r3, #3
  400958:	2b01      	cmp	r3, #1
  40095a:	d00f      	beq.n	40097c <SystemCoreClockUpdate+0x2c>
  40095c:	b113      	cbz	r3, 400964 <SystemCoreClockUpdate+0x14>
  40095e:	2b02      	cmp	r3, #2
  400960:	d029      	beq.n	4009b6 <SystemCoreClockUpdate+0x66>
  400962:	e057      	b.n	400a14 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400964:	4b38      	ldr	r3, [pc, #224]	; (400a48 <SystemCoreClockUpdate+0xf8>)
  400966:	695b      	ldr	r3, [r3, #20]
  400968:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40096c:	bf14      	ite	ne
  40096e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400972:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400976:	4b35      	ldr	r3, [pc, #212]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  400978:	601a      	str	r2, [r3, #0]
  40097a:	e04b      	b.n	400a14 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40097c:	4b31      	ldr	r3, [pc, #196]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  40097e:	6a1b      	ldr	r3, [r3, #32]
  400980:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400984:	d003      	beq.n	40098e <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400986:	4a32      	ldr	r2, [pc, #200]	; (400a50 <SystemCoreClockUpdate+0x100>)
  400988:	4b30      	ldr	r3, [pc, #192]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  40098a:	601a      	str	r2, [r3, #0]
  40098c:	e042      	b.n	400a14 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40098e:	4a31      	ldr	r2, [pc, #196]	; (400a54 <SystemCoreClockUpdate+0x104>)
  400990:	4b2e      	ldr	r3, [pc, #184]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  400992:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400994:	4b2b      	ldr	r3, [pc, #172]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  400996:	6a1b      	ldr	r3, [r3, #32]
  400998:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40099c:	2b10      	cmp	r3, #16
  40099e:	d002      	beq.n	4009a6 <SystemCoreClockUpdate+0x56>
  4009a0:	2b20      	cmp	r3, #32
  4009a2:	d004      	beq.n	4009ae <SystemCoreClockUpdate+0x5e>
  4009a4:	e036      	b.n	400a14 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4009a6:	4a2c      	ldr	r2, [pc, #176]	; (400a58 <SystemCoreClockUpdate+0x108>)
  4009a8:	4b28      	ldr	r3, [pc, #160]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009aa:	601a      	str	r2, [r3, #0]
          break;
  4009ac:	e032      	b.n	400a14 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4009ae:	4a28      	ldr	r2, [pc, #160]	; (400a50 <SystemCoreClockUpdate+0x100>)
  4009b0:	4b26      	ldr	r3, [pc, #152]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009b2:	601a      	str	r2, [r3, #0]
          break;
  4009b4:	e02e      	b.n	400a14 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4009b6:	4b23      	ldr	r3, [pc, #140]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  4009b8:	6a1b      	ldr	r3, [r3, #32]
  4009ba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009be:	d003      	beq.n	4009c8 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4009c0:	4a23      	ldr	r2, [pc, #140]	; (400a50 <SystemCoreClockUpdate+0x100>)
  4009c2:	4b22      	ldr	r3, [pc, #136]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009c4:	601a      	str	r2, [r3, #0]
  4009c6:	e012      	b.n	4009ee <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009c8:	4a22      	ldr	r2, [pc, #136]	; (400a54 <SystemCoreClockUpdate+0x104>)
  4009ca:	4b20      	ldr	r3, [pc, #128]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009cc:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009ce:	4b1d      	ldr	r3, [pc, #116]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  4009d0:	6a1b      	ldr	r3, [r3, #32]
  4009d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d6:	2b10      	cmp	r3, #16
  4009d8:	d002      	beq.n	4009e0 <SystemCoreClockUpdate+0x90>
  4009da:	2b20      	cmp	r3, #32
  4009dc:	d004      	beq.n	4009e8 <SystemCoreClockUpdate+0x98>
  4009de:	e006      	b.n	4009ee <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4009e0:	4a1d      	ldr	r2, [pc, #116]	; (400a58 <SystemCoreClockUpdate+0x108>)
  4009e2:	4b1a      	ldr	r3, [pc, #104]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009e4:	601a      	str	r2, [r3, #0]
          break;
  4009e6:	e002      	b.n	4009ee <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4009e8:	4a19      	ldr	r2, [pc, #100]	; (400a50 <SystemCoreClockUpdate+0x100>)
  4009ea:	4b18      	ldr	r3, [pc, #96]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  4009ec:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4009ee:	4b15      	ldr	r3, [pc, #84]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  4009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009f2:	f003 0303 	and.w	r3, r3, #3
  4009f6:	2b02      	cmp	r3, #2
  4009f8:	d10c      	bne.n	400a14 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009fa:	4a12      	ldr	r2, [pc, #72]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  4009fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400a00:	4812      	ldr	r0, [pc, #72]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  400a02:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400a06:	6803      	ldr	r3, [r0, #0]
  400a08:	fb01 3303 	mla	r3, r1, r3, r3
  400a0c:	b2d2      	uxtb	r2, r2
  400a0e:	fbb3 f3f2 	udiv	r3, r3, r2
  400a12:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a14:	4b0b      	ldr	r3, [pc, #44]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  400a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a1c:	2b70      	cmp	r3, #112	; 0x70
  400a1e:	d107      	bne.n	400a30 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  400a20:	4a0a      	ldr	r2, [pc, #40]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  400a22:	6813      	ldr	r3, [r2, #0]
  400a24:	490d      	ldr	r1, [pc, #52]	; (400a5c <SystemCoreClockUpdate+0x10c>)
  400a26:	fba1 1303 	umull	r1, r3, r1, r3
  400a2a:	085b      	lsrs	r3, r3, #1
  400a2c:	6013      	str	r3, [r2, #0]
  400a2e:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a30:	4b04      	ldr	r3, [pc, #16]	; (400a44 <SystemCoreClockUpdate+0xf4>)
  400a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a34:	4905      	ldr	r1, [pc, #20]	; (400a4c <SystemCoreClockUpdate+0xfc>)
  400a36:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a3a:	680b      	ldr	r3, [r1, #0]
  400a3c:	40d3      	lsrs	r3, r2
  400a3e:	600b      	str	r3, [r1, #0]
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	400e0600 	.word	0x400e0600
  400a48:	400e1810 	.word	0x400e1810
  400a4c:	20400004 	.word	0x20400004
  400a50:	00b71b00 	.word	0x00b71b00
  400a54:	003d0900 	.word	0x003d0900
  400a58:	007a1200 	.word	0x007a1200
  400a5c:	aaaaaaab 	.word	0xaaaaaaab

00400a60 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a60:	4b12      	ldr	r3, [pc, #72]	; (400aac <system_init_flash+0x4c>)
  400a62:	4298      	cmp	r0, r3
  400a64:	d804      	bhi.n	400a70 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a6a:	4b11      	ldr	r3, [pc, #68]	; (400ab0 <system_init_flash+0x50>)
  400a6c:	601a      	str	r2, [r3, #0]
  400a6e:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a70:	4b10      	ldr	r3, [pc, #64]	; (400ab4 <system_init_flash+0x54>)
  400a72:	4298      	cmp	r0, r3
  400a74:	d803      	bhi.n	400a7e <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a76:	4a10      	ldr	r2, [pc, #64]	; (400ab8 <system_init_flash+0x58>)
  400a78:	4b0d      	ldr	r3, [pc, #52]	; (400ab0 <system_init_flash+0x50>)
  400a7a:	601a      	str	r2, [r3, #0]
  400a7c:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a7e:	4b0f      	ldr	r3, [pc, #60]	; (400abc <system_init_flash+0x5c>)
  400a80:	4298      	cmp	r0, r3
  400a82:	d803      	bhi.n	400a8c <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a84:	4a0e      	ldr	r2, [pc, #56]	; (400ac0 <system_init_flash+0x60>)
  400a86:	4b0a      	ldr	r3, [pc, #40]	; (400ab0 <system_init_flash+0x50>)
  400a88:	601a      	str	r2, [r3, #0]
  400a8a:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a8c:	4b0d      	ldr	r3, [pc, #52]	; (400ac4 <system_init_flash+0x64>)
  400a8e:	4298      	cmp	r0, r3
  400a90:	d803      	bhi.n	400a9a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a92:	4a0d      	ldr	r2, [pc, #52]	; (400ac8 <system_init_flash+0x68>)
  400a94:	4b06      	ldr	r3, [pc, #24]	; (400ab0 <system_init_flash+0x50>)
  400a96:	601a      	str	r2, [r3, #0]
  400a98:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a9a:	4b0c      	ldr	r3, [pc, #48]	; (400acc <system_init_flash+0x6c>)
  400a9c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a9e:	bf94      	ite	ls
  400aa0:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aa4:	4a0a      	ldrhi	r2, [pc, #40]	; (400ad0 <system_init_flash+0x70>)
  400aa6:	4b02      	ldr	r3, [pc, #8]	; (400ab0 <system_init_flash+0x50>)
  400aa8:	601a      	str	r2, [r3, #0]
  400aaa:	4770      	bx	lr
  400aac:	01312cff 	.word	0x01312cff
  400ab0:	400e0c00 	.word	0x400e0c00
  400ab4:	026259ff 	.word	0x026259ff
  400ab8:	04000100 	.word	0x04000100
  400abc:	039386ff 	.word	0x039386ff
  400ac0:	04000200 	.word	0x04000200
  400ac4:	04c4b3ff 	.word	0x04c4b3ff
  400ac8:	04000300 	.word	0x04000300
  400acc:	05f5e0ff 	.word	0x05f5e0ff
  400ad0:	04000500 	.word	0x04000500

00400ad4 <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  400ad4:	b510      	push	{r4, lr}
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  400ad6:	4c05      	ldr	r4, [pc, #20]	; (400aec <PWM0_Handler+0x18>)
  400ad8:	4620      	mov	r0, r4
  400ada:	4b05      	ldr	r3, [pc, #20]	; (400af0 <PWM0_Handler+0x1c>)
  400adc:	4798      	blx	r3
			/* Set new duty cycle */
			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  400ade:	4905      	ldr	r1, [pc, #20]	; (400af4 <PWM0_Handler+0x20>)
  400ae0:	2201      	movs	r2, #1
  400ae2:	600a      	str	r2, [r1, #0]
			
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 1);
  400ae4:	4620      	mov	r0, r4
  400ae6:	4b04      	ldr	r3, [pc, #16]	; (400af8 <PWM0_Handler+0x24>)
  400ae8:	4798      	blx	r3
  400aea:	bd10      	pop	{r4, pc}
  400aec:	40020000 	.word	0x40020000
  400af0:	00400845 	.word	0x00400845
  400af4:	204004bc 	.word	0x204004bc
  400af8:	00400811 	.word	0x00400811

00400afc <inicializa_pwm>:
		}


void inicializa_pwm(){
  400afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b00:	b084      	sub	sp, #16
	/* Configure the console uart for debug information */


	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  400b02:	201f      	movs	r0, #31
  400b04:	4b21      	ldr	r3, [pc, #132]	; (400b8c <inicializa_pwm+0x90>)
  400b06:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  400b08:	4c21      	ldr	r4, [pc, #132]	; (400b90 <inicializa_pwm+0x94>)
  400b0a:	2101      	movs	r1, #1
  400b0c:	4620      	mov	r0, r4
  400b0e:	4b21      	ldr	r3, [pc, #132]	; (400b94 <inicializa_pwm+0x98>)
  400b10:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400b12:	f242 7310 	movw	r3, #10000	; 0x2710
  400b16:	9301      	str	r3, [sp, #4]
  400b18:	2600      	movs	r6, #0
  400b1a:	9602      	str	r6, [sp, #8]
  400b1c:	4b1e      	ldr	r3, [pc, #120]	; (400b98 <inicializa_pwm+0x9c>)
  400b1e:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM0, &clock_setting);
  400b20:	a901      	add	r1, sp, #4
  400b22:	4620      	mov	r0, r4
  400b24:	4b1d      	ldr	r3, [pc, #116]	; (400b9c <inicializa_pwm+0xa0>)
  400b26:	4798      	blx	r3
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  400b28:	4d1d      	ldr	r5, [pc, #116]	; (400ba0 <inicializa_pwm+0xa4>)
  400b2a:	4629      	mov	r1, r5
  400b2c:	4620      	mov	r0, r4
  400b2e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 400bb4 <inicializa_pwm+0xb8>
  400b32:	47c0      	blx	r8

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  400b34:	4632      	mov	r2, r6
  400b36:	4631      	mov	r1, r6
  400b38:	4620      	mov	r0, r4
  400b3a:	4b1a      	ldr	r3, [pc, #104]	; (400ba4 <inicializa_pwm+0xa8>)
  400b3c:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  400b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b42:	812b      	strh	r3, [r5, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  400b44:	2701      	movs	r7, #1
  400b46:	72af      	strb	r7, [r5, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400b48:	230b      	movs	r3, #11
  400b4a:	606b      	str	r3, [r5, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  400b4c:	2364      	movs	r3, #100	; 0x64
  400b4e:	612b      	str	r3, [r5, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  400b50:	60ee      	str	r6, [r5, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  400b52:	602f      	str	r7, [r5, #0]

	pwm_channel_init(PWM0, &g_pwm_channel_led);
  400b54:	4629      	mov	r1, r5
  400b56:	4620      	mov	r0, r4
  400b58:	47c0      	blx	r8

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  400b5a:	4632      	mov	r2, r6
  400b5c:	4639      	mov	r1, r7
  400b5e:	4620      	mov	r0, r4
  400b60:	4b11      	ldr	r3, [pc, #68]	; (400ba8 <inicializa_pwm+0xac>)
  400b62:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400b64:	4b11      	ldr	r3, [pc, #68]	; (400bac <inicializa_pwm+0xb0>)
  400b66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400b72:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b76:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(PWM0_IRQn);
	NVIC_SetPriority(PWM0_IRQn, 0);
	NVIC_EnableIRQ(PWM0_IRQn);
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  400b78:	4631      	mov	r1, r6
  400b7a:	4620      	mov	r0, r4
  400b7c:	4d0c      	ldr	r5, [pc, #48]	; (400bb0 <inicializa_pwm+0xb4>)
  400b7e:	47a8      	blx	r5
	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);
  400b80:	4639      	mov	r1, r7
  400b82:	4620      	mov	r0, r4
  400b84:	47a8      	blx	r5
}
  400b86:	b004      	add	sp, #16
  400b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b8c:	004005b9 	.word	0x004005b9
  400b90:	40020000 	.word	0x40020000
  400b94:	00400839 	.word	0x00400839
  400b98:	11e1a300 	.word	0x11e1a300
  400b9c:	00400661 	.word	0x00400661
  400ba0:	204004bc 	.word	0x204004bc
  400ba4:	00400849 	.word	0x00400849
  400ba8:	0040085d 	.word	0x0040085d
  400bac:	e000e100 	.word	0xe000e100
  400bb0:	0040082d 	.word	0x0040082d
  400bb4:	004006ad 	.word	0x004006ad

00400bb8 <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400bb8:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	sysclk_init();
  400bba:	4b03      	ldr	r3, [pc, #12]	; (400bc8 <main+0x10>)
  400bbc:	4798      	blx	r3
	board_init();
  400bbe:	4b03      	ldr	r3, [pc, #12]	; (400bcc <main+0x14>)
  400bc0:	4798      	blx	r3
	
	inicializa_pwm();
  400bc2:	4b03      	ldr	r3, [pc, #12]	; (400bd0 <main+0x18>)
  400bc4:	4798      	blx	r3
  400bc6:	e7fe      	b.n	400bc6 <main+0xe>
  400bc8:	0040019d 	.word	0x0040019d
  400bcc:	0040020d 	.word	0x0040020d
  400bd0:	00400afd 	.word	0x00400afd

00400bd4 <__libc_init_array>:
  400bd4:	b570      	push	{r4, r5, r6, lr}
  400bd6:	4e0f      	ldr	r6, [pc, #60]	; (400c14 <__libc_init_array+0x40>)
  400bd8:	4d0f      	ldr	r5, [pc, #60]	; (400c18 <__libc_init_array+0x44>)
  400bda:	1b76      	subs	r6, r6, r5
  400bdc:	10b6      	asrs	r6, r6, #2
  400bde:	bf18      	it	ne
  400be0:	2400      	movne	r4, #0
  400be2:	d005      	beq.n	400bf0 <__libc_init_array+0x1c>
  400be4:	3401      	adds	r4, #1
  400be6:	f855 3b04 	ldr.w	r3, [r5], #4
  400bea:	4798      	blx	r3
  400bec:	42a6      	cmp	r6, r4
  400bee:	d1f9      	bne.n	400be4 <__libc_init_array+0x10>
  400bf0:	4e0a      	ldr	r6, [pc, #40]	; (400c1c <__libc_init_array+0x48>)
  400bf2:	4d0b      	ldr	r5, [pc, #44]	; (400c20 <__libc_init_array+0x4c>)
  400bf4:	1b76      	subs	r6, r6, r5
  400bf6:	f000 f8a5 	bl	400d44 <_init>
  400bfa:	10b6      	asrs	r6, r6, #2
  400bfc:	bf18      	it	ne
  400bfe:	2400      	movne	r4, #0
  400c00:	d006      	beq.n	400c10 <__libc_init_array+0x3c>
  400c02:	3401      	adds	r4, #1
  400c04:	f855 3b04 	ldr.w	r3, [r5], #4
  400c08:	4798      	blx	r3
  400c0a:	42a6      	cmp	r6, r4
  400c0c:	d1f9      	bne.n	400c02 <__libc_init_array+0x2e>
  400c0e:	bd70      	pop	{r4, r5, r6, pc}
  400c10:	bd70      	pop	{r4, r5, r6, pc}
  400c12:	bf00      	nop
  400c14:	00400d50 	.word	0x00400d50
  400c18:	00400d50 	.word	0x00400d50
  400c1c:	00400d58 	.word	0x00400d58
  400c20:	00400d50 	.word	0x00400d50

00400c24 <register_fini>:
  400c24:	4b02      	ldr	r3, [pc, #8]	; (400c30 <register_fini+0xc>)
  400c26:	b113      	cbz	r3, 400c2e <register_fini+0xa>
  400c28:	4802      	ldr	r0, [pc, #8]	; (400c34 <register_fini+0x10>)
  400c2a:	f000 b805 	b.w	400c38 <atexit>
  400c2e:	4770      	bx	lr
  400c30:	00000000 	.word	0x00000000
  400c34:	00400c45 	.word	0x00400c45

00400c38 <atexit>:
  400c38:	2300      	movs	r3, #0
  400c3a:	4601      	mov	r1, r0
  400c3c:	461a      	mov	r2, r3
  400c3e:	4618      	mov	r0, r3
  400c40:	f000 b814 	b.w	400c6c <__register_exitproc>

00400c44 <__libc_fini_array>:
  400c44:	b538      	push	{r3, r4, r5, lr}
  400c46:	4d07      	ldr	r5, [pc, #28]	; (400c64 <__libc_fini_array+0x20>)
  400c48:	4c07      	ldr	r4, [pc, #28]	; (400c68 <__libc_fini_array+0x24>)
  400c4a:	1b2c      	subs	r4, r5, r4
  400c4c:	10a4      	asrs	r4, r4, #2
  400c4e:	d005      	beq.n	400c5c <__libc_fini_array+0x18>
  400c50:	3c01      	subs	r4, #1
  400c52:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400c56:	4798      	blx	r3
  400c58:	2c00      	cmp	r4, #0
  400c5a:	d1f9      	bne.n	400c50 <__libc_fini_array+0xc>
  400c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400c60:	f000 b87a 	b.w	400d58 <_fini>
  400c64:	00400d68 	.word	0x00400d68
  400c68:	00400d64 	.word	0x00400d64

00400c6c <__register_exitproc>:
  400c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c70:	4c25      	ldr	r4, [pc, #148]	; (400d08 <__register_exitproc+0x9c>)
  400c72:	6825      	ldr	r5, [r4, #0]
  400c74:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400c78:	4606      	mov	r6, r0
  400c7a:	4688      	mov	r8, r1
  400c7c:	4692      	mov	sl, r2
  400c7e:	4699      	mov	r9, r3
  400c80:	b3c4      	cbz	r4, 400cf4 <__register_exitproc+0x88>
  400c82:	6860      	ldr	r0, [r4, #4]
  400c84:	281f      	cmp	r0, #31
  400c86:	dc17      	bgt.n	400cb8 <__register_exitproc+0x4c>
  400c88:	1c43      	adds	r3, r0, #1
  400c8a:	b176      	cbz	r6, 400caa <__register_exitproc+0x3e>
  400c8c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400c90:	2201      	movs	r2, #1
  400c92:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400c96:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400c9a:	4082      	lsls	r2, r0
  400c9c:	4311      	orrs	r1, r2
  400c9e:	2e02      	cmp	r6, #2
  400ca0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400ca4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400ca8:	d01e      	beq.n	400ce8 <__register_exitproc+0x7c>
  400caa:	3002      	adds	r0, #2
  400cac:	6063      	str	r3, [r4, #4]
  400cae:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400cb2:	2000      	movs	r0, #0
  400cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400cb8:	4b14      	ldr	r3, [pc, #80]	; (400d0c <__register_exitproc+0xa0>)
  400cba:	b303      	cbz	r3, 400cfe <__register_exitproc+0x92>
  400cbc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400cc0:	f3af 8000 	nop.w
  400cc4:	4604      	mov	r4, r0
  400cc6:	b1d0      	cbz	r0, 400cfe <__register_exitproc+0x92>
  400cc8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400ccc:	2700      	movs	r7, #0
  400cce:	e880 0088 	stmia.w	r0, {r3, r7}
  400cd2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400cd6:	4638      	mov	r0, r7
  400cd8:	2301      	movs	r3, #1
  400cda:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400cde:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400ce2:	2e00      	cmp	r6, #0
  400ce4:	d0e1      	beq.n	400caa <__register_exitproc+0x3e>
  400ce6:	e7d1      	b.n	400c8c <__register_exitproc+0x20>
  400ce8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400cec:	430a      	orrs	r2, r1
  400cee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400cf2:	e7da      	b.n	400caa <__register_exitproc+0x3e>
  400cf4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400cf8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400cfc:	e7c1      	b.n	400c82 <__register_exitproc+0x16>
  400cfe:	f04f 30ff 	mov.w	r0, #4294967295
  400d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d06:	bf00      	nop
  400d08:	00400d40 	.word	0x00400d40
  400d0c:	00000000 	.word	0x00000000
  400d10:	00000001 	.word	0x00000001
  400d14:	00000002 	.word	0x00000002
  400d18:	00000004 	.word	0x00000004
  400d1c:	00000008 	.word	0x00000008
  400d20:	00000010 	.word	0x00000010
  400d24:	00000020 	.word	0x00000020
  400d28:	00000040 	.word	0x00000040
  400d2c:	00000080 	.word	0x00000080
  400d30:	00000100 	.word	0x00000100
  400d34:	00000200 	.word	0x00000200
  400d38:	00000400 	.word	0x00000400
  400d3c:	00000043 	.word	0x00000043

00400d40 <_global_impure_ptr>:
  400d40:	20400008                                ..@ 

00400d44 <_init>:
  400d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d46:	bf00      	nop
  400d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400d4a:	bc08      	pop	{r3}
  400d4c:	469e      	mov	lr, r3
  400d4e:	4770      	bx	lr

00400d50 <__init_array_start>:
  400d50:	00400c25 	.word	0x00400c25

00400d54 <__frame_dummy_init_array_entry>:
  400d54:	00400165                                e.@.

00400d58 <_fini>:
  400d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d5a:	bf00      	nop
  400d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400d5e:	bc08      	pop	{r3}
  400d60:	469e      	mov	lr, r3
  400d62:	4770      	bx	lr

00400d64 <__fini_array_start>:
  400d64:	00400141 	.word	0x00400141
